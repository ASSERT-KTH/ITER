bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.SHORT_BUF))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
2	[BUG]  [BUGGY]  if(!val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.NUMBER))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
3	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DEFAULT))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
4	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)||!val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)||!val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)||!val.equals(ZipLong.NaN))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
5	[BUG]  [BUGGY]  if(!val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.BLOCK))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
6	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)||!val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)||!val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)||!val.equals(ZipLong.SHORT_BUF))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
7	[BUG]  [BUGGY]  if(!val.equals(ZipLong.BIGINT))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.BIGINT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.BIGINT))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
8	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()!=  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
9	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
10	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
11	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
12	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
13	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
14	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
15	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
16	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
17	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
18	[BUG]  [BUGGY]  if  (val.equals(Value.DD_SIG)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(Value.DD_SIG)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(Value.DD_SIG)||  val.getValue()  ==  null)  {	  if    (Value.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
19	[BUG]  [BUGGY]  if  (Value.DD_SIG.equals(val)||  current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (Value.DD_SIG.equals(val)||  current.entry.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (Value.DD_SIG.equals(val)||  current.entry.getValue()  ==  null)  {	  if    (Value.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
20	[BUG]  [BUGGY]  if  (val.equals(Value.DD_SIG)||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(Value.DD_SIG)||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(Value.DD_SIG)||  val.getValue()!=  null)  {	  if    (Value.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
21	[BUG]  [BUGGY]  if  (Value.DD_SIG.equals(val)||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (Value.DD_SIG.equals(val)||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (Value.DD_SIG.equals(val)||  val.getValue()!=  null)  {	  if    (Value.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
22	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DD_BUF))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DD_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DD_BUF))  {	  if(!val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
23	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DD_SIG  ||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DD_SIG  ||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DD_SIG  ||  val.equals(ZipLong.DD_SIG))  {	  if(!val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
24	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DD_SIG)||!val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DD_SIG)||!val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DD_SIG)||!val.equals(ZipLong.LP))  {	  if(!val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
25	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DD_SIG)||!val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DD_SIG)||!val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DD_SIG)||!val.equals(ZipLong.NaN))  {	  if(!val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
26	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER_SIG))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER_SIG))  {	  if(!val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
27	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.getInputStream();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.getInputStream();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
28	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.entry.getInputStream();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
29	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  currentEntry.getInputStream();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
30	[BUG]  [BUGGY]  Inflater  inf  =  current.in.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.in.getInputStream();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.in.getInputStream();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
31	[BUG]  [BUGGY]  Inflater  inf  =  current.inputStream;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.inputStream;  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.inputStream;	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
32	[BUG]  [BUGGY]  Inflater  inf  =  current.readInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.readInputStream();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.readInputStream();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
33	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
34	[BUG]  [BUGGY]  if(val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
35	[BUG]  [BUGGY]  if(current.entry!=  null  ||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null  ||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null  ||  val.getValue()  ==  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
36	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  val.getValue()  ==  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
37	[BUG]  [BUGGY]  if(current.entry.getCrc()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getCrc()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getCrc()  ==  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
38	[BUG]  [BUGGY]  if(current.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
39	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
40	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getKey()))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.getKey()))  {	  if    (!ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
41	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getValue())||!val.equals(current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getValue())||!val.equals(current.entry.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.getValue())||!val.equals(current.entry.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
42	[BUG]  [BUGGY]  val.setValue(current.entry.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.entry.getValue()  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.entry.getValue()  +  1);	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
43	[BUG]  [BUGGY]  val.setValue(current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.entry.getKey());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.entry.getKey());	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
44	[BUG]  [BUGGY]  val.setValue(current.getEntry().getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.getEntry().getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.getEntry().getValue());	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
45	[BUG]  [BUGGY]  val.setValue(current.entry.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.entry.getValue(),  val);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.entry.getValue(),  val);	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
46	[BUG]  [BUGGY]  val.setValue(current.entry.getValue()  +  2);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.entry.getValue()  +  2);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.entry.getValue()  +  2);	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
47	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.DD_SIG))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
48	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DECEMBER_SIG))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
49	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DD_BUF))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DD_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DD_BUF))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
50	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DD_SIG,  current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DD_SIG,  current.entry.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DD_SIG,  current.entry.getValue()))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.LP))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.DECEMBER))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
53	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.SHORT_BUF))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
54	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.NUMBER))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
55	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DEFAULT))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
56	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.BIGINT))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.BIGINT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.BIGINT))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
57	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DEFAULT_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DEFAULT_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DEFAULT_VALUE))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
58	[BUG]  [BUGGY]  if  (val.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(current.getValue()))  {	  if    (ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
59	[BUG]  [BUGGY]  if(val.getValue().equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(current.getValue()))  {	  if    (ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
60	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!ZipLong.DD_BIGINT.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!ZipLong.DD_BIGINT.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)&&!ZipLong.DD_BIGINT.equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
61	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||!ZipLong.DD_BIGINT.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||!ZipLong.DD_BIGINT.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)||!ZipLong.DD_BIGINT.equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
62	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||!ZipLong.DD_BIGINT.equals(val))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||!ZipLong.DD_BIGINT.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)||!ZipLong.DD_BIGINT.equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
63	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BUF.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BUF.equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
64	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
65	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
66	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
67	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
68	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
69	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
70	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
71	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
72	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
73	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
74	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
75	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
76	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
77	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
78	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
79	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getKey()))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val.getKey()))  {	  if    (!ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getValue())&&  current.entry.getCrc()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getValue())&&  current.entry.getCrc()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val.getValue())&&  current.entry.getCrc()!=  null)  {	  if    (!ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
82	[BUG]  [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
83	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
84	[BUG]  [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()!=  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
86	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SIG))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
87	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_QUOTE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_QUOTE))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
88	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_BUF))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_BUF))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
89	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DEFAULT_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DEFAULT_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DEFAULT_SIG))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
90	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_WRITE))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_WRITE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_WRITE))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
91	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_BYTE))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_BYTE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_BYTE))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
92	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_VALUE))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
93	[BUG]  [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(value))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||!ZipLong.DD_SIG.equals(value))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
94	[BUG]  [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.value))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.value))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
95	[BUG]  [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(value))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  ZipLong.DD_SIG.equals(value))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
96	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(val));	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
97	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_EXP_32);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(TWO_EXP_32);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
98	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.NaN);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.NaN);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.NaN);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
99	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WORD_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(WORD_BUF);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
100	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.DD_SIG)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
101	[BUG]  [BUGGY]  if(val.getValue()  >=  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >=  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >=  ZipLong.DD_SIG)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
102	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER_SIG)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DECEMBER_SIG)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
103	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.LP)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.LP)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.LP)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
104	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.BLOCK)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
105	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {	  if(val.getKey()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
106	[BUG]  [BUGGY]  if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getKey()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
107	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {	  if(val.getKey()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
108	[BUG]  [BUGGY]  if(current.entry.getKey()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getKey()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getKey()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getKey()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
109	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getKey()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
110	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
111	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
112	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.NUMBER_INT)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
113	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
114	[BUG]  [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||!ZipLong.DD_SIG.equals(val.getValue()))  {	  if(val    ==    null    ||!ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
115	[BUG]  [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(current.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||!ZipLong.DD_SIG.equals(current.entry))  {	  if(val    ==    null    ||!ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
116	[BUG]  [BUGGY]  if(val!=  null  ||!ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||!ZipLong.DD_SIG.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||!ZipLong.DD_SIG.equals(val))  {	  if(val    ==    null    ||!ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
117	[BUG]  [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||!ZipLong.DD_SIG.equals(current.getValue()))  {	  if(val    ==    null    ||!ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
118	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
119	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
120	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
121	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
122	[BUG]  [BUGGY]  if(val.equals(ZipLong.MAX_VALUE)||  val.equals(ZipLong.DD))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.MAX_VALUE)||  val.equals(ZipLong.DD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.MAX_VALUE)||  val.equals(ZipLong.DD))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
123	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.value))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.value))  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
124	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry.getKey()))  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
125	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.val))  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
126	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
127	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.DD))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.DD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.DD))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
128	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
129	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD)||  val.equals(ZipLong.SKIP_BUF))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD)||  val.equals(ZipLong.SKIP_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD)||  val.equals(ZipLong.SKIP_BUF))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
130	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
131	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
132	[BUG]  [BUGGY]  if(val!=  null  &&  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  &&  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  &&  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
133	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  <  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  <  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  <  ZipLong.NUMBER_INT)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
134	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
135	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  <  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  <  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  <  ZipLong.NUMBER_INT)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
136	[BUG]  [BUGGY]  if  (current.entry.getValue()  ==  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (current.entry.getValue()  ==  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (current.entry.getValue()  ==  ZipLong.DD_SIG)  {	  if    (val.getValue()    ==    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
137	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DD_SIG)  {	  if    (val.getValue()    ==    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
138	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DD_SIG)  {	  if    (val.getValue()    ==    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
139	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER_SIG)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER_SIG)  {	  if    (val.getValue()    ==    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
140	[BUG]  [BUGGY]  if  (val.getValue().equals(Value.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.getValue().equals(Value.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.getValue().equals(Value.DD_SIG))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
141	[BUG]  [BUGGY]  if  (val.equals(Value.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(Value.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(Value.DD_SIG))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
142	[BUG]  [BUGGY]  if  (Value.DD_SIG.equals(val.getKey()))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (Value.DD_SIG.equals(val.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (Value.DD_SIG.equals(val.getKey()))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
143	[BUG]  [BUGGY]  if  (Value.DD_SIG.equals(current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (Value.DD_SIG.equals(current.entry.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (Value.DD_SIG.equals(current.entry.getValue()))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
144	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(val)&&  current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(val)&&  current.entry.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(val)&&  current.entry.getValue()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)&&    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
145	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)&&    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
146	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD_SIG)&&  current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD_SIG)&&  current.entry.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD_SIG)&&  current.entry.getValue()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)&&    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
147	[BUG]  [BUGGY]  if  (Value.DD_SIG.equals(val)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (Value.DD_SIG.equals(val)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (Value.DD_SIG.equals(val)&&  val.getValue()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)&&    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
148	[BUG]  [BUGGY]  new  ZipLong(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(current.entry.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(current.entry.getValue());	  new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
149	[BUG]  [BUGGY]  new  ZipLong(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getValue()  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getValue()  +  1);	  new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
150	[BUG]  [BUGGY]  new  ZipLong(current.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(current.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(current.getValue());	  new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
151	[BUG]  [BUGGY]  new  ZipLong(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getValue(),  0);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getValue(),  0);	  new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
152	[BUG]  [BUGGY]  new  ZipLong(val.getKey());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getKey());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getKey());	  new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
153	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD_SIG)&&  current.entry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD_SIG)&&  current.entry.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD_SIG)&&  current.entry.getValue()!=  null)  {	  if    (val.equals(ZipLong.DD_SIG)&&    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
154	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
155	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
156	[BUG]  [BUGGY]  if(val.contains(ZipLong.DECEMBER)||  val.contains(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.contains(ZipLong.DECEMBER)||  val.contains(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.contains(ZipLong.DECEMBER)||  val.contains(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
157	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getType()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getType()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  &&  val.getType()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
158	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
159	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
160	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getType()!=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getType()!=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.getType()!=  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
161	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.DECEMBER  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
162	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.DECEMBER  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
163	[BUG]  [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.entry.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.entry.getValue()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
164	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue().equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue().equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue().equals(ZipLong.DD_SIG))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
165	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
166	[BUG]  [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(val.getKey()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(val.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  ZipLong.DD_SIG.equals(val.getKey()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
167	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FIRST  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FIRST  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FIRST  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
168	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FIRST)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FIRST)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
169	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
170	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
171	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.NUMBER_FIRST)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.NUMBER_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.NUMBER_FIRST)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
172	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
173	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()!=    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
174	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()!=    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
175	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()!=    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
176	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
177	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
178	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
179	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP  ||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP  ||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP  ||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
180	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.LP))  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
181	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP,  val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP,  val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP,  val.getValue()))  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
182	[BUG]  [BUGGY]  if  (val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {	  if    (val.getValue()    ==    null    ||    ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
183	[BUG]  [BUGGY]  if  (val.getValue()!=  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.getValue()!=  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.getValue()!=  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {	  if    (val.getValue()    ==    null    ||    ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
184	[BUG]  [BUGGY]  if  (val.getKey()  ==  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.getKey()  ==  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.getKey()  ==  null  ||  ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {	  if    (val.getValue()    ==    null    ||    ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
185	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
186	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.DD_SIG))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
187	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
188	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.startsWith(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.startsWith(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)||  val.startsWith(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
189	[BUG]  [BUGGY]  if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
190	[BUG]  [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
191	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.BIGINT))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.BIGINT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.BIGINT))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
192	[BUG]  [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
193	[BUG]  [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
194	[BUG]  [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.UTF8))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.UTF8))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.UTF8))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
195	[BUG]  [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
196	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
197	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
198	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
199	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
200	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getType()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getType()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getType()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
201	[BUG]  [BUGGY]  val.setLength(1);  current.entry.setZipEncoding(getZipEncoding());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(1);  current.entry.setZipEncoding(getZipEncoding());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(1);  current.entry.setZipEncoding(getZipEncoding());	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
202	[BUG]  [BUGGY]  val.setLength(0);  entryEncoding.setZipEncoding(getZipEncoding());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  entryEncoding.setZipEncoding(getZipEncoding());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  entryEncoding.setZipEncoding(getZipEncoding());	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
203	[BUG]  [BUGGY]  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding()  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  current.entry.setZipEncoding(getZipEncoding()  +  1);	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
204	[BUG]  [BUGGY]  val.setLength(0);  current.entry.setCrc(getZipEncoding());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  current.entry.setCrc(getZipEncoding());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  current.entry.setCrc(getZipEncoding());	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
205	[BUG]  [BUGGY]  current.entry.setZipEncoding(getZipEncoding());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  current.entry.setZipEncoding(getZipEncoding());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	current.entry.setZipEncoding(getZipEncoding());	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
206	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DD_BUF))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DD_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DD_BUF))  {	  if(val.equals(ZipLong.DD_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
207	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DD_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
208	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
209	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
210	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
211	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
212	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
213	[BUG]  [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getCrc()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
214	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
215	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
216	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
217	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
218	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
219	[BUG]  [BUGGY]  readFully(val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(val,  val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(val,  val.getValue());	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
220	[BUG]  [BUGGY]  readFully(val,  val.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(val,  val.length);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(val,  val.length);	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
221	[BUG]  [BUGGY]  readFully(val,  val.intValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(val,  val.intValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(val,  val.intValue());	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
222	[BUG]  [BUGGY]  readFully(val,  current.entry);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(val,  current.entry);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(val,  current.entry);	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
223	[BUG]  [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {	  if(val!=    null    ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
224	[BUG]  [BUGGY]  if(val!=  null  &&  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  &&  ZipLong.DD_SIG.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  &&  ZipLong.DD_SIG.equals(val))  {	  if(val!=    null    ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
225	[BUG]  [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(current.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  ZipLong.DD_SIG.equals(current.entry))  {	  if(val!=    null    ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
226	[BUG]  [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {	  if(val!=    null    ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
227	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.getValue().equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.getValue().equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.getValue().equals(val.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
228	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getKey()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getKey()))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
229	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getCrc().equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getCrc().equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getCrc().equals(val.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
230	[BUG]  [BUGGY]  if(!val.equals(ZipLong.LP  ||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.LP  ||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.LP  ||  val.equals(ZipLong.LP))  {	  if(!val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
231	[BUG]  [BUGGY]  if(!val.equals(ZipLong.LP,  val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.LP,  val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.LP,  val.getValue()))  {	  if(!val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
232	[BUG]  [BUGGY]  if(!val.equals(ZipLong.LP)||!val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.LP)||!val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.LP)||!val.equals(ZipLong.LP))  {	  if(!val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
233	[BUG]  [BUGGY]  if(!val.equals(ZipLong.LP)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.LP)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.LP)||  val.equals(ZipLong.LP))  {	  if(!val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
234	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
235	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
236	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
237	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
238	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
239	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
240	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
241	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
242	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
243	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
244	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
245	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  >=  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  >=  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  >=  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
246	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!current.entry.getCrc().equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!current.entry.getCrc().equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)||!current.entry.getCrc().equals(val.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
247	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val.getKey()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val.getKey()))  {	  if    (!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
248	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||  current.entry.getValue().equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||  current.entry.getValue().equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)||  current.entry.getValue().equals(val.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
249	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
250	[BUG]  [BUGGY]  if(val  ==  null  ||  current.entry.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  current.entry.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  current.entry.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
251	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  >=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  >=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  >=  ZipLong.NUMBER_INT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
252	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
253	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.MIN_VALUE))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.MIN_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.MIN_VALUE))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
254	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
255	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
256	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DECEMBER  ||  current.entry.getCrc()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DECEMBER  ||  current.entry.getCrc()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.DECEMBER  ||  current.entry.getCrc()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
257	[BUG]  [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getCrc()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
258	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.SHORT_BUF))  {	  if(val.getValue().equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
259	[BUG]  [BUGGY]  if(current.entry.getValue().equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue().equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue().equals(ZipLong.DECEMBER))  {	  if(val.getValue().equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
260	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.SHORT_BUF))  {	  if(val.getValue().equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
261	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.NUMBER))  {	  if(val.getValue().equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
262	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.BLOCK))  {	  if(val.getValue().equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
263	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.LP))  {	  if(val.getValue().equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
264	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DECEMBER)||  val.getValue().equals(ZipLong.NaN))  {	  if(val.getValue().equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
265	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
266	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.MIN_VALUE))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.MIN_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.MIN_VALUE))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
267	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.startsWith(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.startsWith(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)||  val.startsWith(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
268	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
269	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
270	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
271	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
272	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
273	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
274	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
275	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
276	[BUG]  [BUGGY]  if(val.equals(ZipLong.SKIP_BUF))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SKIP_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SKIP_BUF))  {	  if(val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
277	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.UTF8))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.UTF8))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.UTF8))  {	  if(val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
278	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
279	[BUG]  [BUGGY]  if(!val.equals(ZipLong.valueOf(val)))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.valueOf(val)))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.valueOf(val)))  {	  if(!val.equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
280	[BUG]  [BUGGY]  if(!val.equals(ZipLong.NUMBER_INT))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.NUMBER_INT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.NUMBER_INT))  {	  if(!val.equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
281	[BUG]  [BUGGY]  if(val.getValue()  >  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    <    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
282	[BUG]  [BUGGY]  if(val.getValue()  <  =  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  =  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  =  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    <    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
283	[BUG]  [BUGGY]  if(val.getValue()  <  zipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  zipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  zipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    <    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
284	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
285	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD)&&  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
286	[BUG]  [BUGGY]  if(val.equals(ZipLong.LC)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LC)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LC)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
287	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD_SIG)&&  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD_SIG)&&  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD_SIG)&&  val.getValue()!=  null)  {	  if    (val.equals(ZipLong.DD_SIG)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
288	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
289	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
290	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.TWO_EXP_32  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.TWO_EXP_32  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.TWO_EXP_32  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
291	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  >=  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
292	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
293	[BUG]  [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
294	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  &&  val.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  &&  val.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  &&  val.getType()!=  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()!=    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
295	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()!=    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
296	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
297	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
298	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
299	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  >  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  >  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  >  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
300	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
301	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
302	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.SHORT))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.SHORT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.SHORT))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
303	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
304	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.UTF8))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.UTF8))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.UTF8))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
305	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
306	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
307	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.BIGINT))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.BIGINT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.BIGINT))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
308	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD_SIG)||  current.entry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD_SIG)||  current.entry.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD_SIG)||  current.entry.getValue()!=  null)  {	  if    (val.equals(ZipLong.DD_SIG)||    val.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
309	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
310	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
311	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
312	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||  current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
313	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)&&  current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
314	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.getValue())&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
315	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
316	[BUG]  [BUGGY]  if(val  ==  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
317	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  <  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  <  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  <  ZipLong.DEFAULT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
318	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  >=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  >=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  >=  ZipLong.DEFAULT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
319	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getType()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getType()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getType()  ==  ZipLong.DEFAULT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
320	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
321	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
322	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
323	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
324	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
325	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  >=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  >=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  >=  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
326	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
327	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()!=  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
328	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
329	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
330	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
331	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
332	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
333	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.DEFAULT  ||  current.entry.getCrc()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
334	[BUG]  [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getCrc()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
335	[BUG]  [BUGGY]  if  (val.getKey().equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.getKey().equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.getKey().equals(ZipLong.DD_SIG))  {	  if    (ZipLong.DD_SIG.equals(val.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
336	[BUG]  [BUGGY]  if(current.entry.getValue().equals(ZipLong.DD))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue().equals(ZipLong.DD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue().equals(ZipLong.DD))  {	  if(val.getValue().equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
337	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DEFAULT))  {	  if(val.getValue().equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
338	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.BLOCK))  {	  if(val.getValue().equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
339	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.valueOf(val.getValue())))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.valueOf(val.getValue())))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.valueOf(val.getValue())))  {	  if(val.getValue().equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
340	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
341	[BUG]  [BUGGY]  if(val  ==  null  ||  current.entry.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  current.entry.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  current.entry.equals(ZipLong.DD_SIG))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
342	[BUG]  [BUGGY]  if(val  ==  null  ||  current.entry.getValue().equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  current.entry.getValue().equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  current.entry.getValue().equals(ZipLong.DD_SIG))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
343	[BUG]  [BUGGY]  if(val  ==  null  ||  zipLong.DD_SIG.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  zipLong.DD_SIG.equals(current.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  zipLong.DD_SIG.equals(current.entry))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
344	[BUG]  [BUGGY]  if(current.entry!=  null  ||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null  ||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null  ||  ZipLong.DD_SIG.equals(val))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
345	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.SHORT_BUF)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
346	[BUG]  [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >=  ZipLong.NUMBER_INT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
347	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.TWO_EXP_32)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
348	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT    ||    current.entry.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
349	[BUG]  [BUGGY]  if(current.entry.getType()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT    ||    current.entry.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
350	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getType()!=  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT    ||    current.entry.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
351	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT    ||    current.entry.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
352	[BUG]  [BUGGY]  if(current.entry.getValue()  >=  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  >=  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  >=  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT    ||    current.entry.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
353	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(val)||  current.entry.getCrc()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(val)||  current.entry.getCrc()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(val)||  current.entry.getCrc()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)||    current.entry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
354	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD_SIG)||  current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD_SIG)||  current.entry.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD_SIG)||  current.entry.getValue()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)||    current.entry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
355	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(current.entry)||  val.getValue()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)||    current.entry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
356	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.ADD))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.ADD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.ADD))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
357	[BUG]  [BUGGY]  if(val!=  null  &&  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  &&  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  &&  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
358	[BUG]  [BUGGY]  val.setLength(1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(1);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
359	[BUG]  [BUGGY]  val.setLength(2);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(2);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(2);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
360	[BUG]  [BUGGY]  val.setLength(256);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(256);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(256);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
361	[BUG]  [BUGGY]  val.setLength(0L);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0L);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0L);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
362	[BUG]  [BUGGY]  val.getValue();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.getValue();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.getValue();	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
363	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
364	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
365	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(SHORT_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
366	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(sHORT_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(sHORT_BUF));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(sHORT_BUF));	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
367	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SKIP_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
368	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SKIP_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
369	[BUG]  [BUGGY]  if(val!=  null  &&  val.getValue()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  &&  val.getValue()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  &&  val.getValue()  ==  ZipLong.DECEMBER)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
370	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
371	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||!val.equals(value))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||!val.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)||!val.equals(value))  {	  if    (!ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
372	[BUG]  [BUGGY]  if  (value.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (value.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (value.equals(ZipLong.DD_SIG))  {	  if    (!ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
373	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)||  val.getValue()  ==  null)  {	  if    (!ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
374	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
375	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INTEGER  ||  val.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INTEGER  ||  val.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INTEGER  ||  val.getType()!=  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
376	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INTEGER  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INTEGER  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INTEGER  &&  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
377	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
378	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INTEGER  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INTEGER  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INTEGER  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
379	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
380	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
381	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
382	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
383	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.valueOf(max)))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.valueOf(max)))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.valueOf(max)))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
384	[BUG]  [BUGGY]  if(val.getValue()  >=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >=  ZipLong.DEFAULT)  {	  if(val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
385	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
386	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
387	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
388	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  &&  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
389	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
390	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  &&  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  &&  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DEFAULT  &&  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
391	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
392	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.SHORT_BUF)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
393	[BUG]  [BUGGY]  if(current.entry.getValue()  >=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  >=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  >=  ZipLong.NUMBER_INT)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
394	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
395	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
396	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
397	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
398	[BUG]  [BUGGY]  if(current.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
399	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
400	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
401	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.FIELD_NAME))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
402	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
403	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.EXPR_SYNTHETIC))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.EXPR_SYNTHETIC))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.EXPR_SYNTHETIC))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
404	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.EQUALS)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.EQUALS)&&  hasUTF8Flag)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.EQUALS)&&  hasUTF8Flag)  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
405	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
406	[BUG]  [BUGGY]  if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
407	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
408	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
409	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
410	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
411	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
412	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
413	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MAX_VALUE  +  1);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
414	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MAX_VALUE,  1);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
415	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  SHORT_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MAX_VALUE,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
416	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MIN_VALUE);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MIN_VALUE);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
417	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  10);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  10);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MAX_VALUE,  10);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
418	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  max);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  max);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MAX_VALUE,  max);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
419	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getCrc().equals(val))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getCrc().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||!current.entry.getCrc().equals(val))  {	  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
420	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue().equals(val))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue().equals(val))  {	  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
421	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||!current.entry.getValue().equals(val))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||!current.entry.getValue().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.entry)||!current.entry.getValue().equals(val))  {	  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
422	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getKey().equals(val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getKey().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||!current.entry.getKey().equals(val))  {	  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
423	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getCrc().equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getCrc().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||  current.entry.getCrc().equals(val))  {	  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
424	[BUG]  [BUGGY]  val  =  new  ZipLong(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(current.entry.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(current.entry.getValue());	  val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
425	[BUG]  [BUGGY]  val  =  new  ZipLong(current.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(current.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(current.getValue());	  val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
426	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.parseZipLong(current.entry.getValue()));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.parseZipLong(current.entry.getValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.parseZipLong(current.entry.getValue()));	  val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
427	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(current.getValue()));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(current.getValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(current.getValue()));	  val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
428	[BUG]  [BUGGY]  current.entry.setSize(val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  current.entry.setSize(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	current.entry.setSize(val.getValue());	  new    ZipLong(val.getValue());    current.entry.setSize(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
429	[BUG]  [BUGGY]  val  =  new  ZipLong(val.getValue());  current.entry.setSize(val.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(val.getValue());  current.entry.setSize(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(val.getValue());  current.entry.setSize(val.getValue());	  new    ZipLong(val.getValue());    current.entry.setSize(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
430	[BUG]  [BUGGY]  new  ZipLong(val.getValue());  current.entry.setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getValue());  current.entry.setCrc(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getValue());  current.entry.setCrc(val.getValue());	  new    ZipLong(val.getValue());    current.entry.setSize(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
431	[BUG]  [BUGGY]  new  ZipLong(val.getValue(),  0);  current.entry.setSize(val.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getValue(),  0);  current.entry.setSize(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getValue(),  0);  current.entry.setSize(val.getValue());	  new    ZipLong(val.getValue());    current.entry.setSize(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
432	[BUG]  [BUGGY]  new  ZipLong(val.getKey());  current.entry.setSize(val.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getKey());  current.entry.setSize(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getKey());  current.entry.setSize(val.getValue());	  new    ZipLong(val.getValue());    current.entry.setSize(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
433	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
434	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_BUF)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
435	[BUG]  [BUGGY]  if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.DD_SIG))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
436	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
437	[BUG]  [BUGGY]  if(val.getValue()  >=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >=  ZipLong.DECEMBER)  {	  if(val.getValue()!=    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
438	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue()  ==  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
439	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)&&  val.getValue()  ==  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
440	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)&&  val.getValue()!=  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
441	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||  current.entry.getValue()!=  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
442	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.entry)||  val.getValue()  ==  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
443	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getCrc()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  current.entry.getCrc()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||  current.entry.getCrc()  ==  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
444	[BUG]  [BUGGY]  val.setLength(0);  current.entry.setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  current.entry.setCrc(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  current.entry.setCrc(val.getValue());	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
445	[BUG]  [BUGGY]  current.entry.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  current.entry.setValue(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	current.entry.setValue(val.getValue());	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
446	[BUG]  [BUGGY]  val.setLength(1);  current.entry.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(1);  current.entry.setValue(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(1);  current.entry.setValue(val.getValue());	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
447	[BUG]  [BUGGY]  val.setLength(0);  current.entry.setValue(val.getKey());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  current.entry.setValue(val.getKey());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  current.entry.setValue(val.getKey());	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
448	[BUG]  [BUGGY]  val.setLength(0);  current.entry.setRaw(val.getValue());  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  current.entry.setRaw(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  current.entry.setRaw(val.getValue());	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
449	[BUG]  [BUGGY]  if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
450	[BUG]  [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
451	[BUG]  [BUGGY]  readFully(current.entry);  val  =  new  ZipLong(current.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(current.entry);  val  =  new  ZipLong(current.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(current.entry);  val  =  new  ZipLong(current.getValue());	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
452	[BUG]  [BUGGY]  readFully(SHORT_BUF);  val  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(SHORT_BUF);  val  =  new  ZipLong(SHORT_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(SHORT_BUF);  val  =  new  ZipLong(SHORT_BUF);	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
453	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.getValue());	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
454	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
455	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
456	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
457	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
458	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.BLOCK))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
459	[BUG]  [BUGGY]  if(val.equals(ZipLong.BLOCK)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.BLOCK)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.BLOCK)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.BLOCK))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
460	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.BLOCK))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
461	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.BLOCK))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
462	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.LP))  {	  if    (val.getValue().equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
463	[BUG]  [BUGGY]  if  (current.entry.getValue().equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (current.entry.getValue().equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (current.entry.getValue().equals(ZipLong.DD_SIG))  {	  if    (val.getValue().equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
464	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DOUBLE_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DOUBLE_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DOUBLE_VALUE))  {	  if    (val.getValue().equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
465	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
466	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
467	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
468	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
469	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
470	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
471	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
472	[BUG]  [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  >=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
473	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
474	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
475	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
476	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)&&  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
477	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD_SIG))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
478	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SUB)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SUB)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SUB)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
479	[BUG]  [BUGGY]  if(current  ==  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current  ==  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current  ==  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
480	[BUG]  [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.getKey()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  ZipLong.DD_SIG.equals(current.getKey()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
481	[BUG]  [BUGGY]  if(current!=  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current!=  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current!=  null  ||  ZipLong.DD_SIG.equals(val.getValue()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
482	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.DEFAULT))  {	  if(val.equals(ZipLong.DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
483	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT  ||  val.equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT  ||  val.equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT  ||  val.equals(ZipLong.DEFAULT))  {	  if(val.equals(ZipLong.DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
484	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.UTF8))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.UTF8))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.UTF8))  {	  if(val.equals(ZipLong.DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
485	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
486	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.getValue().equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.getValue().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.entry.getValue().equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
487	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getCrc().equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getCrc().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getCrc().equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
488	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getKey().equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getKey().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)&&!current.entry.getKey().equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
489	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(current.entry.getValue()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(current.entry.getValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(current.entry.getValue()));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
490	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(short.getValue()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(short.getValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(short.getValue()));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
491	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(current.nextValue()));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(current.nextValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(current.nextValue()));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
492	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(SHORT_BUF));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(SHORT_BUF));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
493	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.getValue()  +  1));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.getValue()  +  1));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(val.getValue()  +  1));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
494	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
495	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
496	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
497	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
498	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
499	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
500	[BUG]  [BUGGY]  if  (val.equals(current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(current.entry.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(current.entry.getValue()))  {	  if    (ZipLong.DD_SIG.equals(current.entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
501	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(current.entry.getKey()))  {	  if    (ZipLong.DD_SIG.equals(current.entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
502	[BUG]  [BUGGY]  if  (val.getValue().equals(current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.getValue().equals(current.entry.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.getValue().equals(current.entry.getValue()))  {	  if    (ZipLong.DD_SIG.equals(current.entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
503	[BUG]  [BUGGY]  val.setValue(current.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.getValue()  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.getValue()  +  1);	  val.setValue(current.getValue());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
504	[BUG]  [BUGGY]  val.setValue(current.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.getValue(),  val);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.getValue(),  val);	  val.setValue(current.getValue());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
505	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getKey()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getKey()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getKey()  ==  ZipLong.DEFAULT)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
506	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.MIN_VALUE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.MIN_VALUE)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
507	[BUG]  [BUGGY]  if  (!val.equals(ZipLong.DD_SIG)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!val.equals(ZipLong.DD_SIG)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!val.equals(ZipLong.DD_SIG)&&  val.getValue()  ==  null)  {	  if    (val.equals(ZipLong.DD_SIG)&&    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
508	[BUG]  [BUGGY]  if(value  ==  null  ||  ZipLong.DD_SIG.equals(value))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(value  ==  null  ||  ZipLong.DD_SIG.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(value  ==  null  ||  ZipLong.DD_SIG.equals(value))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
509	[BUG]  [BUGGY]  val  =  new  ZipLong(val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(val);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(val);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
510	[BUG]  [BUGGY]  val  =  new  ZipLong(VALUE_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(VALUE_SHORT_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(VALUE_SHORT_BUF);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
511	[BUG]  [BUGGY]  long  val  =  new  ZipLong(val);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  long  val  =  new  ZipLong(val);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	long  val  =  new  ZipLong(val);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
512	[BUG]  [BUGGY]  val.setLength(0);  current.entry.setFileName(val.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  current.entry.setFileName(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  current.entry.setFileName(val.getValue());	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
513	[BUG]  [BUGGY]  val.setLength(0);  current.entry.setSize(val.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  current.entry.setSize(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  current.entry.setSize(val.getValue());	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
514	[BUG]  [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
515	[BUG]  [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  in.close();  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  in.close();  }	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
516	[BUG]  [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  return;  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  return;  }	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
517	[BUG]  [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  inputStream.close();  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  }  else  {  inputStream.close();  }	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
518	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
519	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_OF_RANGE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_OF_RANGE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_OF_RANGE)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
520	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
521	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
522	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(SHORT_BUF))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
523	[BUG]  [BUGGY]  if(current  ==  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current  ==  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current  ==  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
524	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(current.getValue()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
525	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
526	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.BLOCK))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
527	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.SHORT))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.SHORT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.SHORT))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
528	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.SHORT))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.SHORT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.SHORT))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
529	[BUG]  [BUGGY]  if(val.equals(ZipLong.valueOf))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.valueOf))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.valueOf))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
530	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
531	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
532	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
533	[BUG]  [BUGGY]  if(value.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(value.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(value.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
534	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.DEFAULT))  {	  if(val.equals(ZipLong.DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
535	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD_BUF))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.DD_BUF))  {	  if(val.equals(ZipLong.DD_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
536	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
537	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
538	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  throw  new  IllegalStateException( " ");  }	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
539	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  return;  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  return;  }	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
540	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
541	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  return;  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  return;  }	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
542	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(value))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(value))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
543	[BUG]  [BUGGY]  if(value  ==  null  ||  ZipLong.DD_SIG.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(value  ==  null  ||  ZipLong.DD_SIG.equals(current.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(value  ==  null  ||  ZipLong.DD_SIG.equals(current.entry))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
544	[BUG]  [BUGGY]  if(current  ==  null  ||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current  ==  null  ||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current  ==  null  ||  ZipLong.DD_SIG.equals(val))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
545	[BUG]  [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.RD)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
546	[BUG]  [BUGGY]  if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
547	[BUG]  [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(new  ZipLong(val)))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||!ZipLong.DD_SIG.equals(new  ZipLong(val)))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||!ZipLong.DD_SIG.equals(new  ZipLong(val)))  {	  if(val    ==    null    ||!ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
548	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()!=    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
549	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
550	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
551	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
552	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(sourceName)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(sourceName)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(sourceName)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
553	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||!current.entry.getValue().equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||!current.entry.getValue().equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)||!current.entry.getValue().equals(val.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
554	[BUG]  [BUGGY]  if(val.equals(ZipLong.WRITE)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.WRITE)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.WRITE)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
555	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.getValue().equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.getValue().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.getValue().equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
556	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD_SIG)||  current.entry.getCrc()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD_SIG)||  current.entry.getCrc()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD_SIG)||  current.entry.getCrc()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)||    current.entry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
557	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.TWO_DWORD_BUF))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.TWO_DWORD_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT_BUF)||  val.equals(ZipLong.TWO_DWORD_BUF))  {	  if(val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
558	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER_OF_RANGE))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER_OF_RANGE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER_OF_RANGE))  {	  if(val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
559	[BUG]  [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  hasDataDescriptor)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()  ==  ZipLong.DEFAULT  ||  hasDataDescriptor)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
560	[BUG]  [BUGGY]  if(current.entry!=  null  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
561	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  current.entry.getType()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
562	[BUG]  [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  &&  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()  ==  ZipLong.DEFAULT  &&  hasDataDescriptor)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()  ==  ZipLong.DEFAULT  &&  hasDataDescriptor)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
563	[BUG]  [BUGGY]  if  (val.equals(Value.DD_SIG)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(Value.DD_SIG)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(Value.DD_SIG)&&  val.getValue()  ==  null)  {	  if    (Value.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
564	[BUG]  [BUGGY]  if  (Value.DEFAULT.equals(val)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (Value.DEFAULT.equals(val)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (Value.DEFAULT.equals(val)||  val.getValue()  ==  null)  {	  if    (Value.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
565	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DEFAULT_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DEFAULT_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DEFAULT_SIG))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
566	[BUG]  [BUGGY]  if  (Value.DD_SIG.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (Value.DD_SIG.equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (Value.DD_SIG.equals(current.getValue()))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
567	[BUG]  [BUGGY]  if(Value.DD_SIG.equals(val.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(Value.DD_SIG.equals(val.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(Value.DD_SIG.equals(val.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
568	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
569	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
570	[BUG]  [BUGGY]  val.setValue(current.entry.getValue()  +  3);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.entry.getValue()  +  3);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.entry.getValue()  +  3);	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
571	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  MAX_VALUE);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MAX_VALUE,  MAX_VALUE);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
572	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.DD_SIG)  {	  if    (val.getValue()    ==    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
573	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
574	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
575	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.BLOCK))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
576	[BUG]  [BUGGY]  if(val.equals(ZipLong.EQUALS)||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.EQUALS)||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.EQUALS)||  val.equals(ZipLong.DD_SIG))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
577	[BUG]  [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.RD)||  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
578	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
579	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
580	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
581	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.NaN))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
582	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
583	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
584	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
585	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
586	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
587	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(value))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(value))  {	  if    (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
588	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)||!ZipLong.DD_BIGINT.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)||!ZipLong.DD_BIGINT.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current)||!ZipLong.DD_BIGINT.equals(val))  {	  if    (!ZipLong.DD_SIG.equals(val)||!ZipLong.DD_BIGINT.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
589	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DEFAULT_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DEFAULT_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DEFAULT_SIG))  {	  if(!val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
590	[BUG]  [BUGGY]  if(!val.equals(ZipLong.valueOf))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.valueOf))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.valueOf))  {	  if(!val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
591	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
592	[BUG]  [BUGGY]  if(current.entry.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getKey()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
593	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
594	[BUG]  [BUGGY]  val.setLength(length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(length);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(length);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
595	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
596	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
597	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)||  val.getValue()!=  null)  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
598	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.key))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.key))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.key))  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
599	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.getValue().equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.getValue().equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.entry)&&!current.getValue().equals(val.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
600	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
601	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
602	[BUG]  [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.RD)||  val.equals(ZipLong.DECEMBER))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
603	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(current.getKey()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(current.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(current.getKey()))  {	  if    (ZipLong.DD_SIG.equals(val.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
604	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(val.getKey())||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(val.getKey())||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(val.getKey())||  val.getValue()!=  null)  {	  if    (ZipLong.DD_SIG.equals(val.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
605	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(val.getKey())||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(val.getKey())||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(val.getKey())||  val.getValue()  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
606	[BUG]  [BUGGY]  if(!val.equals(ZipLong.SHORT))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.SHORT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.SHORT))  {	  if(!val.equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
607	[BUG]  [BUGGY]  if(!val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.NaN))  {	  if(!val.equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
608	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
609	[BUG]  [BUGGY]  new  ZipLong(val.getValue()  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getValue()  +  2);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getValue()  +  2);	  new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
610	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
611	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
612	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
613	[BUG]  [BUGGY]  if(val.getKey()  ==  ZipLong.SHORT_BUF  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  ==  ZipLong.SHORT_BUF  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  ==  ZipLong.SHORT_BUF  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getKey()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
614	[BUG]  [BUGGY]  if(current.entry.getKey()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getKey()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getKey()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
615	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.valueOf))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.valueOf))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.valueOf))  {	  if(val.getValue().equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
616	[BUG]  [BUGGY]  if(current.entry!=  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
617	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  current.entry.getValue()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
618	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  hasDataDescriptor)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  hasDataDescriptor)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
619	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
620	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD)&&  val.getValue()  ==  null)  {	  if    (val.equals(ZipLong.DD_SIG)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
621	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.BIGINT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.BIGINT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.BIGINT)  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
622	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WRITE_DWORD_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(WRITE_DWORD_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
623	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.LP))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
624	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry.getValue())||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(current.entry.getValue())||  hasDataDescriptor)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(current.entry.getValue())||  hasDataDescriptor)  {	  if    (ZipLong.DD_SIG.equals(current.entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
625	[BUG]  [BUGGY]  val  =  new  ZipLong(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(val.getValue()  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(val.getValue()  +  1);	  val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
626	[BUG]  [BUGGY]  val  =  new  ZipLong(short.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(short.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(short.getValue());	  val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
627	[BUG]  [BUGGY]  val.setValue(new  ZipLong(current.getValue()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(new  ZipLong(current.getValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(new  ZipLong(current.getValue()));	  val.setValue(current.getValue());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
628	[BUG]  [BUGGY]  val.setValue(current.getKey());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.getKey());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.getKey());	  val.setValue(current.getValue());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
629	[BUG]  [BUGGY]  val.setValue(current.getValue()  +  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.getValue()  +  2);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.getValue()  +  2);	  val.setValue(current.getValue());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
630	[BUG]  [BUGGY]  val.setValue(current.getValue()  +  3);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.getValue()  +  3);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.getValue()  +  3);	  val.setValue(current.getValue());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
631	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.getValue())&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
632	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getValue())&&  hasUTF8Flag  &&  current.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current.getValue())&&  hasUTF8Flag  &&  current.entry!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current.getValue())&&  hasUTF8Flag  &&  current.entry!=  null)  {	  if    (!ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
633	[BUG]  [BUGGY]  readFully(val,  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(val,  val);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(val,  val);	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
634	[BUG]  [BUGGY]  readFully(val.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(val.getValue());	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
635	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(value)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(value)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(value)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
636	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.name)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.name)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.name)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
637	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
638	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
639	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
640	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
641	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_BYTE  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_BYTE  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_BYTE  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
642	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
643	[BUG]  [BUGGY]  if  (val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(value)||  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(value)||  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(value)||  val.getValue()  ==  null)  {	  if    (val.getValue()    ==    null    ||    ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
644	[BUG]  [BUGGY]  if(val.equals(ZipLong.LC)||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LC)||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LC)||  val.equals(ZipLong.DD_SIG))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
645	[BUG]  [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.RD)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
646	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
647	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
648	[BUG]  [BUGGY]  if  (val.equals(ZipLong.DD)&&  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (val.equals(ZipLong.DD)&&  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (val.equals(ZipLong.DD)&&  val.getValue()!=  null)  {	  if    (val.equals(ZipLong.DD_SIG)||    val.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
649	[BUG]  [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.DD))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.DD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SHORT)||  val.equals(ZipLong.DD))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
650	[BUG]  [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getCrc()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getCrc()  ==  ZipLong.NUMBER_INT)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
651	[BUG]  [BUGGY]  if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SIG)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
652	[BUG]  [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.RD)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.RD)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
653	[BUG]  [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getType()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    >=    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
654	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.getValue()  +  2));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.getValue()  +  2));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(val.getValue()  +  2));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
655	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.getKey()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.getKey()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(val.getKey()));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
656	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.toString()));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(val.toString()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(val.toString()));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
657	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
658	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.NONE)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
659	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
660	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(value)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(value)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(value)&&  val.getValue()  ==  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
661	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_F)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_F)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.NUMBER_F)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
662	[BUG]  [BUGGY]  if(current.entry.getCrc()!=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getCrc()!=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getCrc()!=  ZipLong.NUMBER_INT)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
663	[BUG]  [BUGGY]  if(current.entry.getKey()!=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getKey()!=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getKey()!=  ZipLong.NUMBER_INT)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
664	[BUG]  [BUGGY]  if(val.getKey()  <  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()  <  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()  <  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    <    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
665	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()!=  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()!=  ZipLong.DD_SIG)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
666	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.DD_SIG)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.DD_SIG)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()!=  ZipLong.DD_SIG)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
667	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.NUMBER_FIRST)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
668	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(current)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(current)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
669	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(sourceName)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(sourceName)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(sourceName)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
670	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
671	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.startsWith(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
672	[BUG]  [BUGGY]  Inflater  inf  =  current.inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.inputStream.getInputStream();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.inputStream.getInputStream();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
673	[BUG]  [BUGGY]  Inflater  inf  =  current.readIn();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.readIn();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.readIn();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
674	[BUG]  [BUGGY]  Inflater  inf  =  val.readIn();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  val.readIn();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  val.readIn();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
675	[BUG]  [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
676	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
677	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
678	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()!=  ZipLong.DECEMBER)  {	  if(val.getValue()!=    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
679	[BUG]  [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (!ZipLong.DD_SIG.equals(value)||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (!ZipLong.DD_SIG.equals(value)||  val.getValue()!=  null)  {	  if    (!ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
680	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getType()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
681	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  &&  val.getType()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  &&  val.getType()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DECEMBER  &&  val.getType()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getType()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
682	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.BIGINT))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.BIGINT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.BIGINT))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
683	[BUG]  [BUGGY]  if(val  ==  null  ||!val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||!val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||!val.equals(ZipLong.LP))  {	  if(!val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
684	[BUG]  [BUGGY]  if(!val.equals(ZipLong.LP)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.LP)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.LP)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
685	[BUG]  [BUGGY]  if(!val.equals(ZipLong.LP)||!val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.LP)||!val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.LP)||!val.equals(ZipLong.NaN))  {	  if(!val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
686	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DEFAULT_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DEFAULT_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.DEFAULT_SIG))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
687	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
688	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.UTF8))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.UTF8))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.UTF8))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
689	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_ARRAY))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_ARRAY))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_ARRAY))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
690	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
691	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.NaN  +  1))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.NaN  +  1))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)||  val.equals(ZipLong.NaN  +  1))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
692	[BUG]  [BUGGY]  if(val.equals(ZipLong.DL)||  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DL)||  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DL)||  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
693	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)||  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
694	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)&&  val.getValue()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)&&  val.getValue()  >  0)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)&&  val.getValue()  >  0)  {	  if(val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
695	[BUG]  [BUGGY]  val.setLength(length  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(length  +  1);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(length  +  1);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
696	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.POSITIVE_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.POSITIVE_SIZE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.POSITIVE_SIZE)  {	  if    (val.getValue()    ==    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
697	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.MAX_VALUE,  2);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.MAX_VALUE,  2);	  val    =    new    ZipLong(ZipLong.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
698	[BUG]  [BUGGY]  if  (ZipLong.DD_SIG.equals(val)||  current.entry.setCrc(val.getValue())  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if  (ZipLong.DD_SIG.equals(val)||  current.entry.setCrc(val.getValue())  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if  (ZipLong.DD_SIG.equals(val)||  current.entry.setCrc(val.getValue())  ==  null)  {	  if    (ZipLong.DD_SIG.equals(val)||    current.entry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
699	[BUG]  [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.BIGINT)||  val.equals(ZipLong.DEFAULT))  {	  if(val.equals(ZipLong.BIGINT))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
700	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
701	[BUG]  [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.TWO_EXP_32)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
702	[BUG]  [BUGGY]  int  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  int  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	int  val.setLength(0);  current.entry.setZipEncoding(getZipEncoding());	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
703	[BUG]  [BUGGY]  val.setLength(0);  this.current.entry.setZipEncoding(getZipEncoding());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setLength(0);  this.current.entry.setZipEncoding(getZipEncoding());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setLength(0);  this.current.entry.setZipEncoding(getZipEncoding());	  val.setLength(0);    current.entry.setZipEncoding(getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
704	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.BLOCK))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
705	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.BLOCK))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.BLOCK))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.BLOCK))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.BLOCK))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
706	[BUG]  [BUGGY]  if(val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(val)&&  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(val)&&  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  null  ||  ZipLong.DD_SIG.equals(val)&&  val.getValue()!=  null)  {	  if    (val.getValue()    ==    null    ||    ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
707	[BUG]  [BUGGY]  if(val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
708	[BUG]  [BUGGY]  if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.SHORT))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.SHORT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NaN)||  val.equals(ZipLong.SHORT))  {	  if(val.equals(ZipLong.SHORT))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
709	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  current.entry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  current.entry.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  current.entry.getValue()!=  null)  {	  if    (!ZipLong.DD_SIG.equals(val)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
710	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  <  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
711	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NEGATIVE_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NEGATIVE_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NEGATIVE_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
712	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.MIN_VALUE  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.MIN_VALUE  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.MIN_VALUE  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
713	[BUG]  [BUGGY]  if(!Value.DD_SIG.equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!Value.DD_SIG.equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!Value.DD_SIG.equals(val.getValue()))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
714	[BUG]  [BUGGY]  if(val.getValue()  ==  null  ||  Value.DD_SIG.equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  null  ||  Value.DD_SIG.equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  null  ||  Value.DD_SIG.equals(val.getValue()))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
715	[BUG]  [BUGGY]  if(Value.DEFAULT.equals(val.getKey()))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(Value.DEFAULT.equals(val.getKey()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(Value.DEFAULT.equals(val.getKey()))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
716	[BUG]  [BUGGY]  if(val.equals(value.getValue()))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(value.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(value.getValue()))  {	  if    (Value.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
717	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
718	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
719	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FLOAT  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
720	[BUG]  [BUGGY]  if(val  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
721	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
722	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
723	[BUG]  [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.NEGATIVE_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.NEGATIVE_SIZE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.NUMBER)||  val.equals(ZipLong.NEGATIVE_SIZE))  {	  if(val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
724	[BUG]  [BUGGY]  if(val.equals(ZipLong.DOUBLE)||  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DOUBLE)||  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DOUBLE)||  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
725	[BUG]  [BUGGY]  if(!val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.EQUALS))  {	  if(!val.equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
726	[BUG]  [BUGGY]  if(val.getValue()  ==  null  ||  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  null  ||  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  null  ||  val.getValue()!=  null)  {	  if(val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
727	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
728	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.TWO_EXP_32)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
729	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
730	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
731	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DECEMBER  ||  current.entry.getCrc()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DECEMBER  ||  current.entry.getCrc()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.DECEMBER  ||  current.entry.getCrc()  ==  ZipLong.SHORT_BUF)  {	  if(current.entry.getValue()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
732	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_FLOAT  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_FLOAT  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_FLOAT  ||  val.getValue()!=  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()!=    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
733	[BUG]  [BUGGY]  if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()!=    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
734	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.EQUALS))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
735	[BUG]  [BUGGY]  if(val!=  null  &&  ZIPLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  &&  ZIPLong.DD_SIG.equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  &&  ZIPLong.DD_SIG.equals(val))  {	  if(val!=    null    ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
736	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  &&  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
737	[BUG]  [BUGGY]  val  =  new  ZipLong(current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(current.entry.getKey());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(current.entry.getKey());	  val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
738	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.UTF8);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.UTF8);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.UTF8);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
739	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(short));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(short));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(short));	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
740	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
741	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_FIRST  ||  current.entry.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_FIRST  ||  current.entry.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_FIRST  ||  current.entry.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
742	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
743	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.NUMBER_BYTE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.NUMBER_BYTE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.NUMBER_INT  ||  current.entry.getCrc()  ==  ZipLong.NUMBER_BYTE)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
744	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)||  val.equals(SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)||  val.equals(SHORT_BUF))  {	  if(val.equals(ZipLong.DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
745	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.DD_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.DD_SIG))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
746	[BUG]  [BUGGY]  new  ZipLong(val.getShortValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  new  ZipLong(val.getShortValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	new  ZipLong(val.getShortValue());	  new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
747	[BUG]  [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val    ==    null    ||    val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
748	[BUG]  [BUGGY]  if(val.equals(ZipLong.WRITE)||  val.equals(ZipLong.EQUALS))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.WRITE)||  val.equals(ZipLong.EQUALS))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.WRITE)||  val.equals(ZipLong.EQUALS))  {	  if(val.equals(ZipLong.DD_SIG)||    val.equals(ZipLong.EQUALS))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
749	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  ==  null)  {	  if(!ZipLong.DD_SIG.equals(val)||    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
750	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DECEMBER  &&  val.getValue()  ==  ZipLong.BLOCK)  {	  if(val.getValue()    ==    ZipLong.DECEMBER    ||    val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
751	[BUG]  [BUGGY]  val.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(val.getValue());	  val.setValue(current.getValue());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
752	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  current.in.read();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  current.in.read();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
753	[BUG]  [BUGGY]  Inflater  inf  =  val.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  Inflater  inf  =  val.read();  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	Inflater  inf  =  val.read();	  Inflater    inf    =    val.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
754	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())||!val.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())||!val.isEmpty())  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.getValue())||!val.isEmpty())  {	  if    (!ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
755	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getName().equals(val))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getName().equals(val))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)||!current.entry.getName().equals(val))  {	  if(!ZipLong.DD_SIG.equals(val)||!current.entry.getValue().equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
756	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(str.getValue()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.valueOf(str.getValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(ZipLong.valueOf(str.getValue()));	  val    =    new    ZipLong(ZipLong.valueOf(val.getValue()));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
757	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getKey()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getKey()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getKey()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
758	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getName()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getName()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getName()  ==  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
759	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.DECEMBER)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
760	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DD_SIG  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()!=    ZipLong.DD_SIG)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
761	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NUMBER))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NUMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NUMBER))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NUMBER))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
762	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.BLOCK)  {	  if(val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
763	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.MAX_VALUE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.MAX_VALUE)  {	  if(val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
764	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(current.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(current.entry))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
765	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val.entry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry  ==  null  ||  ZipLong.DD_SIG.equals(val.entry))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
766	[BUG]  [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
767	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  current.entry.getCrc()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_SIG)&&  current.entry.getCrc()  ==  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_SIG)&&  current.entry.getCrc()  ==  null)  {	  if    (val.equals(ZipLong.DD_SIG)&&    val.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
768	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val.getValue())&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val.getValue())&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val.getValue())&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
769	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  TWO_DWORD_BUF);  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val  =  new  ZipLong(SHORT_BUF,  TWO_DWORD_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
770	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
771	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.NaN))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.NaN))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
772	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DECEMBER))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DECEMBER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DECEMBER))  {	  if    (val.getValue().equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
773	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.NaN))  {	  if    (val.getValue().equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
774	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DS_SIG))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DS_SIG))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.DD_SIG)||  val.getValue().equals(ZipLong.DS_SIG))  {	  if    (val.getValue().equals(ZipLong.DD_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
775	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.VERTICAL  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.VERTICAL  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.VERTICAL  ||  val.getValue()  ==  ZipLong.NUMBER_INT)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
776	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NULL  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NULL  ||  val.getValue()  ==  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NULL  ||  val.getValue()  ==  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
777	[BUG]  [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getValue()  >  ZipLong.VERTICAL)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.VERTICAL)    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
778	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.VERTICAL)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
779	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
780	[BUG]  [BUGGY]  if(val.getValue().equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue().equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue().equals(ZipLong.NaN))  {	  if(val.getValue().equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
781	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  current.entry.setCrc(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  current.entry.setCrc(val.getValue());  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  readFully(val);  val  =  new  ZipLong(val.getValue());  }  else  {  current.entry.setCrc(val.getValue());  }	  readFully(val);    val    =    new    ZipLong(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
782	[BUG]  [BUGGY]  val.setValue(new  ZipLong(current.entry.getValue()));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(new  ZipLong(current.entry.getValue()));  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(new  ZipLong(current.entry.getValue()));	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
783	[BUG]  [BUGGY]  val.setValue(current.entry.getName());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  val.setValue(current.entry.getName());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	val.setValue(current.entry.getName());	  val.setValue(current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
784	[BUG]  [BUGGY]  if(value!=  null  &&!ZipLong.DD_SIG.equals(value))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(value!=  null  &&!ZipLong.DD_SIG.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(value!=  null  &&!ZipLong.DD_SIG.equals(value))  {	  if    (!ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
785	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(value)&&  val.getValue()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(value)&&  val.getValue()  >  0)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(value)&&  val.getValue()  >  0)  {	  if    (!ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
786	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(value)||!zipEncoding.equals(value))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(value)||!zipEncoding.equals(value))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(value)||!zipEncoding.equals(value))  {	  if    (!ZipLong.DD_SIG.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
787	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.TWO_EXP_32)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.TWO_EXP_32)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
788	[BUG]  [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.VERTICAL)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.VERTICAL)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()!=  ZipLong.NUMBER_INT  ||  current.entry.getValue()!=  ZipLong.VERTICAL)  {	  if(current.entry.getValue()!=    ZipLong.NUMBER_INT)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
789	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
790	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.MAX_VALUE)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.BLOCK  ||  val.getValue()  ==  ZipLong.MAX_VALUE)  {	  if(val.getValue()    ==    ZipLong.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
791	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
792	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.LP))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.LP))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
793	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.getValue())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!ZipLong.DD_SIG.equals(val)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
794	[BUG]  [BUGGY]  if(current.entry.getType()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getType()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getType()!=  ZipLong.DEFAULT)  {	  if(current.entry.getType()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
795	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.MAX_VALUE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT)&&  val.equals(ZipLong.MAX_VALUE))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
796	[BUG]  [BUGGY]  if(current.entry.getValue()  <  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  <  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  <  ZipLong.NUMBER_INT  ||  current.entry.getType()  ==  ZipLong.DECEMBER)  {	  if(current.entry.getValue()    ==    ZipLong.NUMBER_INT    ||    current.entry.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
797	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  &&  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  &&  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  &&  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
798	[BUG]  [BUGGY]  if(val  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NUMBER_FLOAT)  {	  if(val.getValue()!=    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
799	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  >  0)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.entry)&&  val.getValue()  >  0)  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
800	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||!zipEncoding.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||!zipEncoding.equals(current.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.entry)||!zipEncoding.equals(current.entry))  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
801	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||!val.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.entry)||!val.equals(current.entry))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.entry)||!val.equals(current.entry))  {	  if    (!ZipLong.DD_SIG.equals(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
802	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NEGATIVE_FIRST)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NEGATIVE_FIRST)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_INT  ||  val.getValue()  ==  ZipLong.NEGATIVE_FIRST)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getValue()    ==    ZipLong.NUMBER_FIRST)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
803	[BUG]  [BUGGY]  if(val.equals(ZipLong.SKIP_BUF)||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.SKIP_BUF)||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.SKIP_BUF)||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
804	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  val.equals(SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DD_BUF)||  val.equals(SHORT_BUF))  {	  if(val.equals(ZipLong.DD_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
805	[BUG]  [BUGGY]  if(val  ==  null  ||!val.getValue().equals(ZipLong.DEFAULT))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||!val.getValue().equals(ZipLong.DEFAULT))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||!val.getValue().equals(ZipLong.DEFAULT))  {	  if(val!=    null    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
806	[BUG]  [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.SKIP_BUF))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.SKIP_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DECEMBER)||  val.equals(ZipLong.SKIP_BUF))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
807	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DECEMBER)&&  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
808	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.SHORT_BUF))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.DECEMBER  ||  val.equals(ZipLong.SHORT_BUF))  {	  if(val.equals(ZipLong.DECEMBER)||    val.equals(ZipLong.SHORT_BUF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
809	[BUG]  [BUGGY]  if(val  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  ZipLong.DEFAULT  ||  val.getValue()  ==  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
810	[BUG]  [BUGGY]  if(current!=  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current!=  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current!=  null  ||  ZipLong.DD_SIG.equals(current.getValue()))  {	  if(val    ==    null    ||    ZipLong.DD_SIG.equals(current.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
811	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SPACE))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SPACE))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SPACE))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
812	[BUG]  [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SUB))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SUB))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.DEFAULT_SIG)||  val.equals(ZipLong.DEFAULT_SUB))  {	  if(val.equals(ZipLong.DEFAULT_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
813	[BUG]  [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {	  if(val.getValue()    <    ZipLong.NUMBER_INT    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
814	[BUG]  [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setValue(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setValue(val.getValue());  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  val.setLength(0);  current.entry.setValue(val.getValue());  }	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
815	[BUG]  [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setValue(val.getValue());  }  else  {  ZipLong  val  =  new  ZipLong(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  val.setLength(0);  current.entry.setValue(val.getValue());  }  else  {  ZipLong  val  =  new  ZipLong(val.getValue());  }  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry!=  null)  {  val.setLength(0);  current.entry.setValue(val.getValue());  }  else  {  ZipLong  val  =  new  ZipLong(val.getValue());  }	  val.setLength(0);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
816	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.getKey().equals(val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.getKey().equals(val.getValue()))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(val)&&!current.entry.getKey().equals(val.getValue()))  {	  if    (!ZipLong.DD_SIG.equals(val)&&!current.entry.getValue().equals(val.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
817	[BUG]  [BUGGY]  if(val.equals(ZipLong.LP)&&  val.equals(ZipLong.DD))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.equals(ZipLong.LP)&&  val.equals(ZipLong.DD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.equals(ZipLong.LP)&&  val.equals(ZipLong.DD))  {	  if(val.equals(ZipLong.DD)||    val.equals(ZipLong.LP))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
818	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.NaN))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.NaN))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.NaN))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
819	[BUG]  [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.INTEGER))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val  ==  null  ||  val.equals(ZipLong.INTEGER))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val  ==  null  ||  val.equals(ZipLong.INTEGER))  {	  if(val    ==    null    ||    val.equals(ZipLong.DECEMBER))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
820	[BUG]  [BUGGY]  if(val.getKey()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getKey()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getKey()!=  ZipLong.DEFAULT  ||  val.getValue()!=  ZipLong.DEFAULT)  {	  if(val.getValue()    ==    ZipLong.DEFAULT    ||    val.getValue()!=    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
821	[BUG]  [BUGGY]  readFully(val.getValue());  current.entry.setSize(val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  readFully(val.getValue());  current.entry.setSize(val.getValue());  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	readFully(val.getValue());  current.entry.setSize(val.getValue());	  new    ZipLong(val.getValue());    current.entry.setSize(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
822	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.NUMBER_INT  ||  val.getType()!=  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()!=    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
823	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getType()!=  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getType()!=  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.SHORT_BUF  ||  val.getType()!=  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INT    ||    val.getType()!=    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
824	[BUG]  [BUGGY]  if(!ZipLong.DD_SIG.equals(current.zipEncoding)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!ZipLong.DD_SIG.equals(current.zipEncoding)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!ZipLong.DD_SIG.equals(current.zipEncoding)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ZipLong.DD_SIG.equals(val)&&!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
825	[BUG]  [BUGGY]  if(!val.equals(ZipLong.DD_SIG)&&  val.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(!val.equals(ZipLong.DD_SIG)&&  val.getValue()!=  null)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(!val.equals(ZipLong.DD_SIG)&&  val.getValue()!=  null)  {	  if    (val.equals(ZipLong.DD_SIG)||    val.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
826	[BUG]  [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()!=  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()!=  ZipLong.DEFAULT)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(current.entry.getValue()  ==  ZipLong.DEFAULT  ||  current.entry.getCrc()!=  ZipLong.DEFAULT)  {	  if(current.entry.getValue()    ==    ZipLong.DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
827	[BUG]  [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  ZipLong.NUMBER_INTEGER  ||  val.getType()  ==  ZipLong.DECEMBER)  {	  if(val.getValue()    ==    ZipLong.NUMBER_INTEGER    ||    val.getType()    ==    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
828	[BUG]  [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DD))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val!=  null  ||  val.equals(ZipLong.DD))  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val!=  null  ||  val.equals(ZipLong.DD))  {	  if(val    ==    null    ||    val.equals(ZipLong.DD))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
829	[BUG]  [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.BLOCK)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()!=  ZipLong.DECEMBER  ||  val.getValue()!=  ZipLong.BLOCK)  {	  if(val.getValue()!=    ZipLong.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
830	[BUG]  [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FIRST  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  ==  ZipLong.NUMBER_FIRST  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  ==  ZipLong.NUMBER_FIRST  ||  val.getValue()  ==  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
831	[BUG]  [BUGGY]  if(val.getValue()  <  ZipLong.SHORT_BUF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);      [BUGGY]  if(val.getValue()  <  ZipLong.SHORT_BUF)  {  [BUGGY]        readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	if(val.getValue()  <  ZipLong.SHORT_BUF)  {	  if(val.getValue()    ==    ZipLong.SHORT_BUF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
