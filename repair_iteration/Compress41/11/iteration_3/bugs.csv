bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BU  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BU  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BU	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  AssertionError.make(current.entry,  WORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError.make(current.entry,  WORD,  CFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.make(current.entry,  WORD,  CFH_LEN));	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	aughtExceptionHandler.handleMissingException( " ");	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  AssertionError.make(current.entry,  WORD));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError.make(current.entry,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.make(current.entry,  WORD));	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  read  data  from  ' "+current.getClass().getName()  + "'. ");  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  read  data  from  ' "+current.getClass().getName()  + "'. ");  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  read  data  from  ' "+current.getClass().getName()  + "'. ");	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  read  data  from  ' "+current.getClass().getName()  + "' ");  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  read  data  from  ' "+current.getClass().getName()  + "' ");  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  read  data  from  ' "+current.getClass().getName()  + "' ");	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  current.getName());  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  current.getName());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  current.getName());	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  current.toString());  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  current.toString());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  current.toString());	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  final  AssertionError  <  T>  current  =  new  AssertionError  <  T>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  T>  current  =  new  AssertionError  <  T>();  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  T>  current  =  new  AssertionError  <  T>();	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
22	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(TWO_EXP_32);	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
23	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(1);	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
24	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(WORD_BUF);	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
25	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(0);	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
26	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(2);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(2);	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
27	[BUG]  [BUGGY]  ReadFully(WORD_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  ReadFully(WORD_BUF,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(WORD_BUF,  TWO_DWORD_BUF);	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  ReadFully(TWO_EXP_32,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  ReadFully(TWO_EXP_32,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(TWO_EXP_32,  WORD_BUF);	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  ReadFully(current.entry,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  ReadFully(current.entry,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(current.entry,  WORD_BUF);	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD),  WORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
34	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
35	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
36	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
37	[BUG]  [BUGGY]  readFully(WORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD_BUF,  SKIP_BUF);	  readFully(WORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
38	[BUG]  [BUGGY]  readFully(WORD_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD_BUF,  SHORT_BUF,  SKIP_BUF);	  readFully(WORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
39	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
40	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
41	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
42	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
43	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0),  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0),  0);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
44	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);	  pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
45	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  LFH_LEN);	  pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
46	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  CFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  CFH_LEN);	  pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
47	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DD,  DWORD);	  pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
48	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
49	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0),  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  0),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
50	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
51	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
52	[BUG]  [BUGGY]  ReadFully(WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(WORD,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(WORD,  TWO_DWORD_BUF);	  ReadFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
53	[BUG]  [BUGGY]  ReadFully(current.entry,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  ReadFully(current.entry,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(current.entry,  WORD);	  ReadFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
54	[BUG]  [BUGGY]  ReadFully(TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  ReadFully(TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(TWO_EXP_32,  WORD);	  ReadFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
55	[BUG]  [BUGGY]  ReadFully(SWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  WORD);	  ReadFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
56	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  ReadFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
57	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
60	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  b));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  b));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  b));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
62	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  NN));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  NN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  NN));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".   ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
66	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".   ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
67	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
68	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  WORD);	  pushback(WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
69	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD);	  pushback(WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
70	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  TWO_WORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  TWO_WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD,  TWO_WORD_BUF);	  pushback(WORD_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
71	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  WORD_BUF);	  pushback(WORD_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
72	[BUG]  [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
73	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
74	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
75	[BUG]  [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  LFH_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  LFH_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_DWORD_BUF,  LFH_BUF,  WORD_BUF);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
76	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  LFH_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  LFH_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  LFH_BUF,  WORD_BUF);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
77	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  LFH_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
78	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
79	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
80	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
81	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
82	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
83	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
84	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(TWO_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
85	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(1);	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
86	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>();  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>();	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
87	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(WORD_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
88	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(2);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(2);	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
89	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
90	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD,  LFH_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
91	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
92	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  LFH_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  LFH_BUF,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  LFH_BUF,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
93	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF));	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
94	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF));	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
95	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  CFH_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  CFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD,  CFH_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
96	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
97	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WHORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WHORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  WHORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
98	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
99	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
100	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  CFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  CFH_LEN);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
101	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  SHORT_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
102	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  SHORT_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
103	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  csize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  csize);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  csize);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
104	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  READ_EXP_32);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  READ_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  READ_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
105	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  MISSING_WORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  MISSING_WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  MISSING_WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
106	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(TWO_EXP_32,  WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
107	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
108	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
109	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
110	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
111	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
112	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
113	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  LFH_BUF);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
114	[BUG]  [BUGGY]  pushback(WORD_BUF,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(WORD_BUF,  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(WORD_BUF,  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
115	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF,  WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
116	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
117	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  SHORT_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
118	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WRITE_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WRITE_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
119	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  |  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  |  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  |  SHORT_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
120	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  LFH_LEN);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
121	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
122	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
123	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
124	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WS));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
125	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
126	[BUG]  [BUGGY]  ||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  ||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
127	[BUG]  [BUGGY]  ||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  ||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
128	[BUG]  [BUGGY]  ||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  ||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
129	[BUG]  [BUGGY]  ||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  ||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	||  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
130	[BUG]  [BUGGY]  ||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  ||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
131	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
132	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
133	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
134	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
135	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
136	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
137	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
138	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DWORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
139	[BUG]  [BUGGY]  entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
140	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  CFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  CFH_LEN);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
141	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  READ_EXP_32);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  READ_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  READ_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
142	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  MISSING_EXP_32);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  MISSING_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  MISSING_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
143	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_ERROR);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_ERROR);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_ERROR);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
144	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
145	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
146	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WHORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WHORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  WHORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
147	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  WORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
148	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
149	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(TWO_EXP_32,  SWT.DEFAULT_TABLE_ERROR);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(TWO_EXP_32,  SWT.DEFAULT_TABLE_ERROR);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(TWO_EXP_32,  SWT.DEFAULT_TABLE_ERROR);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
150	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
151	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  TWO_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
152	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
153	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  +  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  +  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  +  WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
154	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_2,  WORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_2,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_2,  WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
155	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN,  LFH_LEN);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
156	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
157	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
158	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
159	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
160	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  DWORD,  DWORD);	  pushback(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
161	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WHORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WHORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD,  WHORD);	  pushback(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
162	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  DWORD));	  pushback(TWO_WORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
163	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  LFH_BUF,  DWORD);	  pushback(TWO_WORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
164	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  DWORD);	  pushback(TWO_WORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
165	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  DD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  DD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  DD,  DWORD);	  pushback(TWO_WORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
166	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  DWORD,  WORD);	  pushback(TWO_WORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
167	[BUG]  [BUGGY]  while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
168	[BUG]  [BUGGY]  while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
169	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
170	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
171	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN),  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
172	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
173	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD),  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD),  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD),  WORD);	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
174	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  WORD);	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
175	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  DWORD);	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
176	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
177	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
178	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
179	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
180	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
181	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
182	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
183	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
184	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
185	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
186	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
187	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
188	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  0));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
189	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  0);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
190	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  SHORT_BUF);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
191	[BUG]  [BUGGY]  while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
192	[BUG]  [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
193	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
194	[BUG]  [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
195	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
196	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  0));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
197	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WS));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WS));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
198	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD,  WORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD,  WORD);	  pushback(WORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
199	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WHORD,  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WHORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WHORD,  WORD);	  pushback(WORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
200	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WSORD,  WORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WSORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WSORD,  WORD);	  pushback(WORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
201	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  WORD,  WORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  WORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  WORD,  WORD);	  pushback(WORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
202	[BUG]  [BUGGY]  while(current.entry!=  null)  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  pushback(TWO_EXP_32,  DWORD,  DWORD);	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
203	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  WORD);	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
204	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
205	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
207	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
208	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  NUMBER));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  NUMBER));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  NUMBER));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
209	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  0);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  0);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
210	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32));	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
211	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  0);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
212	[BUG]  [BUGGY]  AssertionError  <  TWO_EXP_32>  current  =  new  AssertionErrorImpl(TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  TWO_EXP_32>  current  =  new  AssertionErrorImpl(TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  TWO_EXP_32>  current  =  new  AssertionErrorImpl(TWO_EXP_32,  WORD);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
213	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
214	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError();  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError();	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
215	[BUG]  [BUGGY]  AssertionError  <  TWO_EXP_32>  current  =  new  AssertionErrorImpl(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  TWO_EXP_32>  current  =  new  AssertionErrorImpl(TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  TWO_EXP_32>  current  =  new  AssertionErrorImpl(TWO_EXP_32);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
216	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  DWORD));	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
217	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD,  WORD_BUF);	  pushback(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
218	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  WORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  WORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  WORD,  WORD_BUF);	  pushback(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
219	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WSORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WSORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WSORD,  WORD_BUF);	  pushback(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
220	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  DWORD,  WORD_BUF);	  pushback(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
221	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD,  WORD_BUF);	  pushback(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
222	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  WORD,  WORD);	  pushback(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
223	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));	  readFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
224	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  readFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
225	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  readFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
226	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  readFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
227	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  SHORT_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
228	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  SKIP_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  SKIP_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  SKIP_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
229	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  SHORT_BUF);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
230	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  WORD_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  WORD_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
231	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
232	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
233	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
234	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
235	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
236	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
237	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(WORD,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
238	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
239	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  DWORD,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
240	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  DWORD,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
241	[BUG]  [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
242	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
243	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionErrorImpl(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionErrorImpl(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionErrorImpl(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
244	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  0));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
245	[BUG]  [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
246	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  SHORT));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  SHORT));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  SHORT));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
247	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
248	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
249	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
250	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
251	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
252	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
253	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
254	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  CFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  CFH_LEN);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
255	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  csize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  csize);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  csize);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
256	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_ERROR,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_ERROR,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_ERROR,  WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
257	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  READ_EXP_32);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  READ_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  READ_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
258	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  MISSING_WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  MISSING_WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  MISSING_WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
259	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
260	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
261	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
262	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
263	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF),  SKIP_BUF);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
264	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  WORD_BUF);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
265	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
266	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  TWO_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
267	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
268	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  CFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  CFH_LEN);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
269	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_WORD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
270	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  READ_EXP_32);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  READ_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  READ_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
271	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WS));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WS));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WS));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
272	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  0);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
273	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
274	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  SHORT_BUF);	  pushback(TWO_DWORD_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
275	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DD,  LFH_BUF);	  pushback(TWO_DWORD_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
276	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  LFH_BUF);	  pushback(TWO_DWORD_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
277	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0),  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  0),  0);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
278	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
279	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
280	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
281	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  getClass().getName());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  getClass().getName());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  getClass().getName());	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
282	[BUG]  [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  encoding);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  error  =  new  AssertionError( "Failed  to  parse: "  +  encoding);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
283	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  fileNameLen);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  fileNameLen);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  fileNameLen);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
284	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	aughtExceptionHandler.throwInternal();	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
285	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  encoding);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  encoding);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
286	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  getClass());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  getClass());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  new  AssertionError( "Invalid  start  of  type: "  +  getClass());	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
287	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
288	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
289	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
290	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
291	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
292	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD,  LFH_LEN);	  pushback(TWO_EXP_32,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
293	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  0);	  pushback(TWO_EXP_32,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
294	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD,  CFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD,  CFH_LEN);	  pushback(TWO_EXP_32,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
295	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
296	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
297	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
298	[BUG]  [BUGGY]  readFully(SWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  SKIP_BUF);	  readFully(SWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
299	[BUG]  [BUGGY]  readFully(SWORD_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  SHORT_BUF,  SKIP_BUF);	  readFully(SWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
300	[BUG]  [BUGGY]  Pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  Pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	Pushback(ZipLong.getValue(TWO_EXP_32,  WORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
301	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_2,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_2,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_2,  WORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
302	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
303	[BUG]  [BUGGY]  readFully(WORD,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD,  SKIP_BUF);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
304	[BUG]  [BUGGY]  readFully(SWORD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  SHORT_BUF);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
305	[BUG]  [BUGGY]  ReadFully(SWORD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  SHORT_BUF);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
306	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  SHORT_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
307	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  LFH_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
308	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  WORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  WORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  WORD_BUF,  SHORT_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
309	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  SKIP_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
310	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  TWO_EXP_32);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
311	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  TWO_DWORD_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
312	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
313	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
314	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
315	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DD,  DWORD);	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
316	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
317	[BUG]  [BUGGY]  reader.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  reader.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	reader.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
318	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_WORD  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_WORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_WORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
319	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
320	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]                [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
321	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
322	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  current.entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  current.entry);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
323	[BUG]  [BUGGY]  AssertionError  <  K,  V>  current  =  current.entry;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  K,  V>  current  =  current.entry;  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  K,  V>  current  =  current.entry;	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
324	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  LFH_LEN);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
325	[BUG]  [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
326	[BUG]  [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
327	[BUG]  [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
328	[BUG]  [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  CFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  CFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
329	[BUG]  [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
330	[BUG]  [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  0));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD,  0));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
331	[BUG]  [BUGGY]  readFully(SWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  SHORT_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
332	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_DWORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_DWORD_BUF,  WORD_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
333	[BUG]  [BUGGY]  readFully(SWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  SKIP_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
334	[BUG]  [BUGGY]  readFully(SWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  LFH_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
335	[BUG]  [BUGGY]  ReadFully(SWORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  WORD_BUF);	  readFully(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
336	[BUG]  [BUGGY]  pushback(TWO_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_BUF,  WORD_BUF);	  pushback(WORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
337	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
338	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
339	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Throwable  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Throwable  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Throwable  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
340	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  LFH_LEN,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
341	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD,  DWORD));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
342	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  DWORD,  DWORD);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
343	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
344	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
345	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF),  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF),  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF),  DWORD,  DWORD);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
346	[BUG]  [BUGGY]  pushback(WORD_BUF,  DWORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(WORD_BUF,  DWORD,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(WORD_BUF,  DWORD,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
347	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD_BUF,  SHORT_BUF);	  pushback(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
348	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD_BUF,  SKIP_BUF);	  pushback(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
349	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD_BUF);	  pushback(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
350	[BUG]  [BUGGY]  readFully(SWORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  LFH_BUF);	  readFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
351	[BUG]  [BUGGY]  readFully(WORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD_BUF,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD_BUF,  LFH_BUF);	  readFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
352	[BUG]  [BUGGY]  readFully(SWORD_BUF,  WORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  WORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  WORD_BUF,  SHORT_BUF);	  readFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
353	[BUG]  [BUGGY]  readFully(SWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  LFH_BUF);	  readFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
354	[BUG]  [BUGGY]  ReadFully(WORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  ReadFully(WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(WORD_BUF);	  ReadFully(SWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
355	[BUG]  [BUGGY]  ReadFully(WORD_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  ReadFully(WORD_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(WORD_BUF,  WORD_BUF);	  ReadFully(SWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
356	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  WORD_BUF));	  ReadFully(SWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
357	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
358	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WSORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WSORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WSORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
359	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  WORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  WORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  WORD_BUF,  SHORT_BUF);	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
360	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  LFH_BUF);	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
361	[BUG]  [BUGGY]  pushback(WORD_BUF,  DWORD,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(WORD_BUF,  DWORD,  TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(WORD_BUF,  DWORD,  TWO_EXP_32);	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
362	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD_BUF));	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
363	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD_BUF),  DWORD);	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
364	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  readFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
365	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_DWORD_BUF,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_DWORD_BUF,  LFH_BUF);	  readFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
366	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
367	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Throwable  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Throwable  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(Throwable  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
368	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
369	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
370	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
371	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
372	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
373	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
374	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
375	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
376	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
377	[BUG]  [BUGGY]  readFully(SWORD,  WORD_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  WORD_BUF,  current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  WORD_BUF,  current.entry);	  readFully(SWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
378	[BUG]  [BUGGY]  readFully(SWORD,  WORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  WORD_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  WORD_BUF,  SKIP_BUF);	  readFully(SWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
379	[BUG]  [BUGGY]  ReadFully(SWORD,  WORD_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  WORD_BUF,  current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  WORD_BUF,  current.entry);	  readFully(SWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
380	[BUG]  [BUGGY]  readFully(WORD_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD_BUF,  TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD_BUF,  TWO_EXP_32);	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
381	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  WORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_EXP_32,  WORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_EXP_32,  WORD_BUF,  SHORT_BUF);	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
382	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  WORD_BUF,  csize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_EXP_32,  WORD_BUF,  csize);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_EXP_32,  WORD_BUF,  csize);	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
383	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  WORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_EXP_32,  WORD_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_EXP_32,  WORD_BUF,  SKIP_BUF);	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
384	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  LFH_LEN);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
385	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  LFH_LEN);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
386	[BUG]  [BUGGY]  readFully(WORD,  LFH_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD,  LFH_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD,  LFH_BUF,  SHORT_BUF);	  readFully(WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
387	[BUG]  [BUGGY]  readFully(DD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(DD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(DD,  WORD_BUF);	  readFully(WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
388	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WS));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
389	[BUG]  [BUGGY]  readFully(SWT_SHORT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(SWT_SHORT_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWT_SHORT_BUF,  WORD_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
390	[BUG]  [BUGGY]  readFully(SWT_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(SWT_SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWT_SHORT_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
391	[BUG]  [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.append(ZipLong.getValue(TWO_EXP_32));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
392	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
393	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  WORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  WORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
394	[BUG]  [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32),  WORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.append(ZipLong.getValue(TWO_EXP_32),  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.append(ZipLong.getValue(TWO_EXP_32),  WORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
395	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
396	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
397	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
398	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
399	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
400	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
401	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
402	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
403	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
404	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
405	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
406	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
407	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
408	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WS));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
409	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
410	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DB));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DB));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DB));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
411	[BUG]  [BUGGY]  ||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  ||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	||  current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
412	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  0),  0));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
413	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
414	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
415	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  WORD_BUF),  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  WORD_BUF),  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  WORD_BUF),  SHORT_BUF);	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
416	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
417	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
418	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  0));	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
419	[BUG]  [BUGGY]  readFully(current.entry,  WORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(current.entry,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(current.entry,  WORD);	  readFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
420	[BUG]  [BUGGY]  readFully(current.entry,  val);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(current.entry,  val);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(current.entry,  val);	  readFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
421	[BUG]  [BUGGY]  ReadFully(current.entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  ReadFully(current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(current.entry);	  readFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
422	[BUG]  [BUGGY]  readFully(current.entry,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  readFully(current.entry,  true);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(current.entry,  true);	  readFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
423	[BUG]  [BUGGY]  ReadFully(SWORD,  TWO_DWORD_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  TWO_DWORD_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  TWO_DWORD_BUF,  WORD_BUF);	  ReadFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
424	[BUG]  [BUGGY]  ReadFully(WORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  ReadFully(WORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(WORD,  WORD_BUF);	  ReadFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
425	[BUG]  [BUGGY]  readFully(TWO_WORD_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_WORD_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_WORD_BUF,  WORD_BUF);	  readFully(WORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
426	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  0);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
427	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  wORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  wORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  wORD);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
428	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  0,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  0,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  0,  0);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
429	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0),  WORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  0),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
430	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DD,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  DD,  DWORD);	  pushback(TWO_DWORD_BUF,    DD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
431	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  DD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  DD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF),  DD,  DWORD);	  pushback(TWO_DWORD_BUF,    DD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
432	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF),  0,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF),  0,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF),  0,  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
433	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
434	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
435	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(NumberFormatException  nfe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(NumberFormatException  nfe)  {  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
436	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE,  DEFAULT_SIZE));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE,  DEFAULT_SIZE));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
437	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(IOException  ioe)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(IOException  ioe)  {  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
438	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
439	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  0),  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  0),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  0),  0);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
440	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  WRITE_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  WRITE_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
441	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  FS_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  FS_SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  FS_SHORT_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
442	[BUG]  [BUGGY]  ReadFully(current,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(current,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(current,  WORD_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
443	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
444	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
445	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
446	[BUG]  [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	moveback(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
447	[BUG]  [BUGGY]  AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
448	[BUG]  [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	moveback(ZipLong.getValue(TWO_EXP_32,  0));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
449	[BUG]  [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	moveback(ZipLong.getValue(TWO_EXP_32,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
450	[BUG]  [BUGGY]  AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  NON_SIZE));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  NON_SIZE));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  NON_SIZE));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
451	[BUG]  [BUGGY]  AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning(ZipLong.getValue(TWO_EXP_32,  0));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
452	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  LFH_LEN);	  ReadFully(SWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
453	[BUG]  [BUGGY]  AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
454	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
455	[BUG]  [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
456	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  LFH_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
457	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
458	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF,  DWORD));	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
459	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  LFH_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
460	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));	  readFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
461	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getValue());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getValue());	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
462	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getKey());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getKey());	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
463	[BUG]  [BUGGY]  AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry.getValue());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry.getValue());	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
464	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
465	[BUG]  [BUGGY]  AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry.getKey());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry.getKey());	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
466	[BUG]  [BUGGY]  AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  L>  current  =  new  AssertionError  <  L>(current.entry);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
467	[BUG]  [BUGGY]  ReadFully(SWORD,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  TWO_EXP_32);	  ReadFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
468	[BUG]  [BUGGY]  ReadFully(SWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  LFH_BUF);	  ReadFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
469	[BUG]  [BUGGY]  ReadFully(SWORD,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  WRITE_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  WRITE_BUF);	  ReadFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
470	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
471	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalStateException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalStateException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalStateException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
472	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getKey(),  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getKey(),  current.entry.getValue());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getKey(),  current.entry.getValue());	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
473	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(current.entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError(current.entry);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
474	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(current.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(current.getValue());  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError(current.getValue());	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
475	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
476	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_EXP_32,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_EXP_32,  SHORT_BUF);	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
477	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32),  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32),  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_EXP_32),  WORD_BUF);	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
478	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
479	[BUG]  [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
480	[BUG]  [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  SHORT_BUF);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
481	[BUG]  [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  WORD);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
482	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionErrorImpl(TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionErrorImpl(TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionErrorImpl(TWO_EXP_32,  WORD);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
483	[BUG]  [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  DEFAULT_SIZE);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  DEFAULT_SIZE);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
484	[BUG]  [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  0);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  in  =  new  AssertionError  <  T>(TWO_EXP_32,  0);	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
485	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
486	[BUG]  [BUGGY]  pending  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pending  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pending  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
487	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
488	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
489	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  e)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  e)  {  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
490	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(NumberFormatException  nfe)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(NumberFormatException  nfe)  {  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
491	[BUG]  [BUGGY]  readFully(SWORD_BUF,  WSHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  WSHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  WSHORT_BUF);	  readFully(WORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
492	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
493	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF),  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
494	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
495	[BUG]  [BUGGY]  readFully(SWORD,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  WRITE_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  WRITE_BUF);	  readFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
496	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HELP);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HELP);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  HELP);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
497	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HEIGHT);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HEIGHT);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  HEIGHT);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
498	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
499	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_W  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_W  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_W	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
500	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  WORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_KEY,  WORD,  DWORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
501	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
502	[BUG]  [BUGGY]  pending  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  pending  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pending  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
503	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
504	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  return;  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  return;  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
505	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_KEY,  WORD_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
506	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(WORD_BUF,  WORD_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
507	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  WORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
508	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  DWORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
509	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF),  0);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
510	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  WORD));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
511	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
512	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  0));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  0));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
513	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD  +  1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD  +  1);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
514	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD  -  1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD  -  1);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
515	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  DEFAULT_SIZE);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  DEFAULT_SIZE);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
516	[BUG]  [BUGGY]  readFully(SHORT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(SHORT_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SHORT_BUF,  WORD_BUF);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
517	[BUG]  [BUGGY]  readFully(DD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(DD,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(DD,  SHORT_BUF);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
518	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
519	[BUG]  [BUGGY]  &&  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  &&  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	&&  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
520	[BUG]  [BUGGY]  &&  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  &&  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	&&  current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
521	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  DWORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  DWORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF),  DWORD,  WORD_BUF);	  pushback(TWO_DWORD_BUF,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
522	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD_BUF);	  pushback(TWO_DWORD_BUF,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
523	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  DWORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  DWORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF),  DWORD,  WORD_BUF);	  pushback(TWO_DWORD_BUF,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
524	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HELP);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HELP);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  HELP);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
525	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HEIGHT);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  HEIGHT);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  HEIGHT);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
526	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getValue(),  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getValue(),  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(current.entry.getValue(),  WORD);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
527	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  0);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
528	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
529	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  SKIP_BUF);	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
530	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
531	[BUG]  [BUGGY]  AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
532	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionErrorImpl(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionErrorImpl(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionErrorImpl(ZipLong.getValue(TWO_EXP_32));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
533	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_2));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_2));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_2));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
534	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32),  WORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32),  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32),  WORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
535	[BUG]  [BUGGY]  AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_2));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_2));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_2));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
536	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
537	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  WORD_BUF),  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_BUF,  WORD_BUF),  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_BUF,  WORD_BUF),  SKIP_BUF);	  pushback(ZipLong.getValue(TWO_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
538	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
539	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalArgumentException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalArgumentException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  DWORD);  }  catch(IllegalArgumentException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
540	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
541	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DD,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DD,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    DD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
542	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_SHORT_BUF),  DD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_SHORT_BUF),  DD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_SHORT_BUF),  DD,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    DD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
543	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF,  DWORD));	  try    {    pushback(TWO_DWORD_BUF,    DD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
544	[BUG]  [BUGGY]  readFully(SWORD_BUF,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  0);	  readFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
545	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
546	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
547	[BUG]  [BUGGY]  readFully(current.entry,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(current.entry,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(current.entry,  SHORT_BUF);	  readFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
548	[BUG]  [BUGGY]  readFully(current.entry,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(current.entry,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(current.entry,  WORD_BUF);	  readFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
549	[BUG]  [BUGGY]  readFully(SWORD,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  SKIP_BUF);	  readFully(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
550	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD);	  pushback(TWO_EXP_32,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
551	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));	  pushback(TWO_EXP_32,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
552	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  DWORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
553	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
554	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
555	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_EXP_32,  WORD));	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
556	[BUG]  [BUGGY]  ReadFully(SHORT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SHORT_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SHORT_BUF,  WORD_BUF);	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
557	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_SHORT_BUF),  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_SHORT_BUF),  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_SHORT_BUF),  WORD_BUF);	  ReadFully(TWO_DWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
558	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(4);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(4);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(4);	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
559	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError  <  N,  V>(0);	  AssertionError    <    N,    V>    current    =    new    AssertionError    <    N,    V>();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
560	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WORD,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WORD,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
561	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  SKIP_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  SKIP_BUF,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  SKIP_BUF,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
562	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
563	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(4);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(4);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(4);	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
564	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
565	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
566	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0,  0);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
567	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);  }  catch(NumberFormatException  nfe)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  -1,  -1);  }  catch(NumberFormatException  nfe)  {  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
568	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  SHORT_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
569	[BUG]  [BUGGY]  readFully(SWORD_BUF,  WSHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  WSHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  WSHORT_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
570	[BUG]  [BUGGY]  ReadFully(ZipLong.getValue(TWO_EXP_32),  WORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(ZipLong.getValue(TWO_EXP_32),  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(ZipLong.getValue(TWO_EXP_32),  WORD);	  ReadFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
571	[BUG]  [BUGGY]  pushback(WORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(WORD_BUF,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(WORD_BUF,  LFH_BUF);	  pushback(TWO_DWORD_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
572	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_SIZE);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_SIZE);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
573	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_EXP_32);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_TABLE_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
574	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
575	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  SHORT_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
576	[BUG]  [BUGGY]  pushback(WORD_BUF,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(WORD_BUF,  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(WORD_BUF,  SHORT_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
577	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF),  SHORT_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
578	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_KEY,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
579	[BUG]  [BUGGY]  pushback(TWO_SHORT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_SHORT_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_SHORT_BUF,  WORD_BUF);	  pushback(WORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
580	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  SKIP_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF),  SKIP_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF),  SKIP_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
581	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  WORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
582	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  0),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  0),  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(WORD_BUF,  0),  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
583	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(WORD_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(WORD_BUF,  0));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
584	[BUG]  [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  moveback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	moveback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
585	[BUG]  [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
586	[BUG]  [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD,  0));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
587	[BUG]  [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
588	[BUG]  [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.this.start  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  0));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
589	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
590	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_SIZE);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_SIZE);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_SIZE);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
591	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_NORMAL);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_NORMAL);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_NORMAL);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
592	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  0));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
593	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  MISSING_EXP_32);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  MISSING_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  MISSING_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
594	[BUG]  [BUGGY]  readFully(SWORD_BUF,  SHORT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  SHORT_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  SHORT_BUF,  WORD_BUF);	  readFully(SWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
595	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WHORD,  WHORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  WHORD,  WHORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  WHORD,  WHORD);	  pushback(WORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
596	[BUG]  [BUGGY]  pushback(TWO_SHORT_BUF,  WORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_SHORT_BUF,  WORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_SHORT_BUF,  WORD,  WORD_BUF);	  pushback(WORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
597	[BUG]  [BUGGY]  readFully(DD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(DD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(DD);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
598	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0);  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
599	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WHORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WHORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WHORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
600	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WHORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WHORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WHORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
601	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  e)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(Exception  e)  {  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
602	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSORD));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
603	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  readFully(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(ZipLong.getValue(TWO_EXP_32,  WORD));	  readFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
604	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  WORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_EXP_32,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_EXP_32,  WORD);	  readFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
605	[BUG]  [BUGGY]  readFully(DD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(DD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(DD,  LFH_BUF);	  readFully(WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
606	[BUG]  [BUGGY]  readFully(DFH,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(DFH,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(DFH,  LFH_BUF);	  readFully(WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
607	[BUG]  [BUGGY]  readFully(DFH,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  readFully(DFH,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(DFH,  WORD_BUF);	  readFully(WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
608	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
609	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  0,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( ". ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
610	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  -1,  -1);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( ". ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
611	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValu  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValu	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
612	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DW  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DW  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DW	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
613	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DW  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DW  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DW	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
614	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
615	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  0,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  0,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  0,  0);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
616	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  -1,  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  -1,  -1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  -1,  -1);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
617	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
618	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(WORD,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
619	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  LFH_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
620	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  +  1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  +  1);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
621	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  -  1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD  -  1);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
622	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  DWORD);	  pushback(TWO_EXP_32,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
623	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
624	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  return;  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  return;  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
625	[BUG]  [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
626	[BUG]  [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning( "current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
627	[BUG]  [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning( "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
628	[BUG]  [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
629	[BUG]  [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
630	[BUG]  [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.warning( "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
631	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
632	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  LFH_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
633	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  SHORT_BUF,  LFH_LEN);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
634	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  SHORT_BUF);	  pushback(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
635	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  0);	  pushback(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
636	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
637	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
638	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
639	[BUG]  [BUGGY]  readFully(WORD,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD,  SHORT_BUF,  SKIP_BUF);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
640	[BUG]  [BUGGY]  readFully(STANDARD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(STANDARD,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(STANDARD,  SHORT_BUF);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
641	[BUG]  [BUGGY]  readFully(SHORT_BUF,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(SHORT_BUF,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SHORT_BUF,  WORD);	  readFully(WORD,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
642	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
643	[BUG]  [BUGGY]  pushback(WORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(WORD_BUF,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(WORD_BUF,  DWORD,  DWORD);	  pushback(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
644	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionErrorImpl(current.entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionErrorImpl(current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionErrorImpl(current.entry);	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
645	[BUG]  [BUGGY]  AssertionError  <  T>  current.entry  =  new  AssertionError();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current.entry  =  new  AssertionError();  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current.entry  =  new  AssertionError();	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
646	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
647	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
648	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WSORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WSORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WSORD,  DWORD);	  pushback(ZipLong.getValue(TWO_WORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
649	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD);	  pushback(WORD_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
650	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  DEFAULT_SYNTHETIC);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  DEFAULT_SYNTHETIC);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  DEFAULT_SYNTHETIC);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
651	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
652	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
653	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WHORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WHORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WHORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
654	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SKIP_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
655	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
656	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
657	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
658	[BUG]  [BUGGY]  ((  ZipLong)current.entry).setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  ((  ZipLong)current.entry).setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	((  ZipLong)current.entry).setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
659	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
660	[BUG]  [BUGGY]  ((  ZipLong)current.entry).setSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  ((  ZipLong)current.entry).setSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	((  ZipLong)current.entry).setSize(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
661	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
662	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_BUF);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
663	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( ". ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
664	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
665	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
666	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    WORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
667	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  LFH_BUF);	  pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
668	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
669	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
670	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
671	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
672	[BUG]  [BUGGY]  while(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
673	[BUG]  [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
674	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
675	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
676	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0));  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
677	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
678	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
679	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_EXP_32,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
680	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
681	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
682	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  DD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  DD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  DD);	  pushback(TWO_DWORD_BUF,    DD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
683	[BUG]  [BUGGY]  readFully(WRITE_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  readFully(WRITE_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WRITE_BUF,  SHORT_BUF);	  readFully(SWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
684	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
685	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  wORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  wORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  wORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
686	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
687	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
688	[BUG]  [BUGGY]  readFully(SWORD,  TWO_DWORD_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  TWO_DWORD_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  TWO_DWORD_BUF,  WORD_BUF);	  readFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
689	[BUG]  [BUGGY]  readFully(SWORD,  TWO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD,  TWO_DWORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD,  TWO_DWORD_BUF,  SHORT_BUF);	  readFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
690	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  0);	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
691	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WS));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WS));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WS));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
692	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  NUMBER));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  NUMBER));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  NUMBER));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
693	[BUG]  [BUGGY]  moveback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  moveback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	moveback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
694	[BUG]  [BUGGY]  moveback(TWO_DWORD_BUF,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  moveback(TWO_DWORD_BUF,  DWORD,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	moveback(TWO_DWORD_BUF,  DWORD,  WORD);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
695	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  current.entry);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  NeighborTraversal.traverse(compiler,  current.entry);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	NeighborTraversal.traverse(compiler,  current.entry);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
696	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError();  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError();	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    WORD);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
697	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
698	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
699	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
700	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
701	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  DWORD_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF),    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
702	[BUG]  [BUGGY]  ReadFully(current,  WORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(current,  WORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(current,  WORD);	  ReadFully(TWO_DWORD_BUF,    WORD);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
703	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
704	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  DWORD);  }  catch(Exception  e)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
705	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
706	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  DWORD));  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
707	[BUG]  [BUGGY]  readFully(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  readFully(WRITE_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WRITE_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
708	[BUG]  [BUGGY]  ReadFully(WRITE_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  ReadFully(WRITE_BUF,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(WRITE_BUF,  TWO_DWORD_BUF);	  ReadFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
709	[BUG]  [BUGGY]  ReadFully(SWORD,  TWO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD,  TWO_DWORD_BUF,  SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD,  TWO_DWORD_BUF,  SHORT_BUF);	  ReadFully(SWORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
710	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
711	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  -1,  -1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  -1,  -1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  -1,  -1);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
712	[BUG]  [BUGGY]  ReadFully(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  ReadFully(WRITE_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(WRITE_BUF);	  ReadFully(SWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
713	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_EXP_32));	  AssertionError    <    T>    current    =    new    AssertionError    <    T>();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
714	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  WORD_BUF);	  pushback(TWO_DWORD_BUF,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
715	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  KEY_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  KEY_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  KEY_BUF);	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
716	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  SLASH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  SLASH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  SLASH_BUF);	  pushback(TWO_EXP_32,    DWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
717	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
718	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
719	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
720	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  LFH_BUF);	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
721	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  0);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
722	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0),  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0),  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  0),  DWORD,  0);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
723	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
724	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
725	[BUG]  [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	final  ZipLong  current  =  new  ZipLong(ZipLong.getValue(TWO_EXP_32,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
726	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
727	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalStateException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalStateException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalStateException  ioe)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
728	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    catch(IOException    ioe)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
729	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
730	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
731	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
732	[BUG]  [BUGGY]  while(current.entry  ==  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  while(current.entry  ==  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry  ==  null)  {  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
733	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  TWO_DWORD_BUF);	  pushback(WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
734	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  TWO_DWORD_BUF);	  pushback(WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
735	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  LFH_LEN);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
736	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD,  0);  }  catch(Exception  e)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    WORD,    DWORD);    }    catch(Exception    e)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
737	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
738	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  WHORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_EXP_32,  DWORD,  WHORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_EXP_32,  DWORD,  WHORD);	  pushback(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
739	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD),  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
740	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
741	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  readFully(STANDARD_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(STANDARD_BUF,  WORD_BUF);	  readFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
742	[BUG]  [BUGGY]  readFully(SWORD_BUF,  FS_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  readFully(SWORD_BUF,  FS_SHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(SWORD_BUF,  FS_SHORT_BUF);	  readFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
743	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WSORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WSORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WSORD));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
744	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  b,  DWORD));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  b,  DWORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  b,  DWORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
745	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  -1,  -1));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  -1,  -1));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  -1,  -1));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
746	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
747	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  b));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  b));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  b));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
748	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
749	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  wORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  wORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  wORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
750	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
751	[BUG]  [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  T>  current  =  new  AssertionError  <  T>(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
752	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  0);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
753	[BUG]  [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_WORD_BUF,  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_WORD_BUF,  DWORD,  LFH_BUF);	  pushback(TWO_WORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
754	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF),  DWORD,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF),  DWORD,  DWORD);	  pushback(TWO_WORD_BUF,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
755	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
756	[BUG]  [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
757	[BUG]  [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_DWORD_BUF,  DWORD,  LFH_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_DWORD_BUF,  DWORD,  LFH_BUF);	  try    {    pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
758	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  0);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  DWORD,  0);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
759	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
760	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
761	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  +  1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  +  1);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
762	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  LFH_LEN);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  LFH_LEN);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
763	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  -  1);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32  -  1);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
764	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  DEFAULT_TABLE_ERROR);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  DEFAULT_TABLE_ERROR);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  TWO_EXP_32,  DEFAULT_TABLE_ERROR);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
765	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  WRITE_EXP_32);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  WRITE_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TEST_ERROR,  WORD,  WRITE_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TEST_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
766	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  TEXP_32,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  TEXP_32,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  TEXP_32,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
767	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DB,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  pushback(TWO_DWORD_BUF,  DB,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(TWO_DWORD_BUF,  DB,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
768	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32),  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
769	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
770	[BUG]  [BUGGY]  while(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  while(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	while(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32));	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
771	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  }  catch(IllegalArgumentException  iae)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(ZipLong.getValue(TWO_EXP_32));    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
772	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  try    {    pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
773	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
774	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
775	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
776	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
777	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
778	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  DWORD);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    pushback(TWO_EXP_32);    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
779	[BUG]  [BUGGY]  AssertionError.checkState(current.entry!=  null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]                [BUGGY]  AssertionError.checkState(current.entry!=  null);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.checkState(current.entry!=  null);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
780	[BUG]  [BUGGY]  AssertionError.checkState(current.entry  ==  null);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError.checkState(current.entry  ==  null);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError.checkState(current.entry  ==  null);	  if(current.entry    ==    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    else    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
781	[BUG]  [BUGGY]  readFully(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]                [BUGGY]  readFully(WORD_BUF,  SHORT_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(WORD_BUF,  SHORT_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
782	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  readFully(STANDARD_BUF,  WORD_BUF));  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(STANDARD_BUF,  WORD_BUF));	  readFully(SWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
783	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  HARD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  HARD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  HARD);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
784	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  WRITE_EXP_32);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  WRITE_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  WRITE_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
785	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  TEXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  TEXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  WORD,  TEXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR,    WORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
786	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]                [BUGGY]  readFully(TWO_EXP_32,  SKIP_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(TWO_EXP_32,  SKIP_BUF);	  readFully(TWO_EXP_32,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
787	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
788	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
789	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  if(current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry  ==  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  }	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
790	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  }	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
791	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
792	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]                [BUGGY]  if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	if(current.entry!=  null)  {  pushback(TWO_DWORD_BUF,  SHORT_BUF,  DWORD);  }	  if(current.entry!=    null)    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
793	[BUG]  [BUGGY]  ReadFully(SCRIPT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SCRIPT_BUF,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SCRIPT_BUF,  WORD_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
794	[BUG]  [BUGGY]  ReadFully(SWORD_BUF,  WSHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  ReadFully(SWORD_BUF,  WSHORT_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	ReadFully(SWORD_BUF,  WSHORT_BUF);	  ReadFully(SWORD_BUF,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
795	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  STRING_EXP_32);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  STRING_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  STRING_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
796	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_SYNTHETIC);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_SYNTHETIC);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  DEFAULT_SYNTHETIC);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
797	[BUG]  [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  STRING_LITERAL_EXP_32);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]                [BUGGY]  AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  STRING_LITERAL_EXP_32);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	AssertionError  <  N,  V>  current  =  new  AssertionError(SWT.DEFAULT_TABLE_ERROR,  STRING_LITERAL_EXP_32);	  AssertionError    <    N,    V>    current    =    new    AssertionError(SWT.DEFAULT_TABLE_ERROR);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
798	[BUG]  [BUGGY]  readFully(STANDARD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(STANDARD,  WORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(STANDARD,  WORD_BUF);	  readFully(SWORD,    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
799	[BUG]  [BUGGY]  pushback(WORD,  SHORT_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]                [BUGGY]  pushback(WORD,  SHORT_BUF,  TWO_DWORD_BUF);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	pushback(WORD,  SHORT_BUF,  TWO_DWORD_BUF);	  pushback(TWO_DWORD_BUF,    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
800	[BUG]  [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  }  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(TWO_EXP_32,  WORD,  DWORD);  }  catch(IOException  ioe)  {  }	  try    {    pushback(TWO_EXP_32,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
801	[BUG]  [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	try  {  pushback(ZipLong.getValue(TWO_EXP_32,  DWORD,  WSORD);	  try    {    pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
802	[BUG]  [BUGGY]  readFully(current.entry,  encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]                [BUGGY]  readFully(current.entry,  encoding);  [BUGGY]      final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	readFully(current.entry,  encoding);	  readFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
