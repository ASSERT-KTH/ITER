projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_DWORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(TWO_DWORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_DWORD_BUF,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{pushback(TWO_DWORD_BUF,DWORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{pushback(TWO_DWORD_BUF,DWORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{pushback(TWO_DWORD_BUF,DWORD,WORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF),WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_EXP_32,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,0),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,DWORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DWORD,DWORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(TWO_DWORD_BUF,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DWORD,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,WORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32));}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,W
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(isEnabled(Feature.QUOTE_FIELD_NAMES)){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,W
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BU
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(isEnabled(Feature.QUOTE_FIELD_NAMES)){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.make(current.entry,WORD,CFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749aughtExceptionHandler.handleMissingException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.make(current.entry,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>error=newAssertionError("Failedtoreaddatafrom'"+current.getClass().getName()+"'.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>error=newAssertionError("Failedtoreaddatafrom'"+current.getClass().getName()+"'");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>error=newAssertionError("Failedtoparse:"+current.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>error=newAssertionError("Failedtoparse:"+current.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<T>current=newAssertionError<T>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(WORD_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(TWO_EXP_32,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_DWORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_WORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(current.entry,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,LFH_LEN,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,LFH_LEN,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,CFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,0),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,LFH_LEN),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,SHORT_BUF),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(WORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(current.entry,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,b));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,NN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(IOExceptionioe){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(IOExceptionioe){thrownewIllegalArgumentException("".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(IOExceptionioe){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(IOExceptionioe){thrownewIllegalArgumentException("".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,TWO_WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,WORD_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,LFH_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,LFH_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError<N,V>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>(2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>(WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,LFH_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,TWO_DWORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,CFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,WORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,WHORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(IllegalArgumentExceptioniae){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,WORD);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD,CFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD,csize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD,READ_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD,MISSING_WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(IllegalArgumentExceptioniae){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);}catch(IllegalArgumentExceptioniae){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,SHORT_BUF,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD|SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WS));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749||current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749||current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749||current.entry==null){pushback(TWO_DWORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749||current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749||current.entry==null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_LEN,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_LEN,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,CFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,READ_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,MISSING_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,DEFAULT_TABLE_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,WORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,WHORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,WORD);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(IllegalArgumentExceptioniae){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(TWO_EXP_32,SWT.DEFAULT_TABLE_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32+WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_2,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_LEN,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,0),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,WHORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){pushback(ZipLong.getValue(TWO_EXP_32,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){pushback(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_LEN),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,DWORD),WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,LFH_LEN);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,LFH_LEN);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,WORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,0);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,LFH_LEN);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,LFH_LEN);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,LFH_LEN);}catch(IllegalArgumentExceptioniae){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD_BUF),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD_BUF),SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){pushback(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,WS));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WHORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WSORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,WORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){pushback(TWO_EXP_32,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,NUMBER));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,WORD),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<TWO_EXP_32>current=newAssertionErrorImpl(TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<TWO_EXP_32>current=newAssertionErrorImpl(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,WORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WSORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,DWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,WORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_DWORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_WORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,SKIP_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,WORD_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,CFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,CFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(WORD,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(WORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionErrorImpl(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.append(ZipLong.getValue(TWO_EXP_32,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,SHORT));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD)+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError("current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError("current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError("current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError("current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError("current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError("current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,CFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,csize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,DEFAULT_TABLE_ERROR,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,READ_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,MISSING_WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF),SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SKIP_BUF),WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,CFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,READ_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WS));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DEFAULT_SIZE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,0),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,LFH_LEN,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,LFH_LEN,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError("Invalidstartoftype:"+getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>error=newAssertionError("Failedtoparse:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError("Invalidstartoftype:"+fileNameLen);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749aughtExceptionHandler.throwInternal();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError("Invalidstartoftype:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=newAssertionError("Invalidstartoftype:"+getClass());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,LFH_LEN);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,LFH_LEN);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD,CFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749Pushback(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_2,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,LFH_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,WORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,LFH_LEN,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749reader.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO_WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(isEnabled(Feature.QUOTE_FIELD_NAMES)){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<K,V>current=current.entry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalZipLongcurrent=newZipLong(ZipLong.getValue(TWO_DWORD_BUF,WORD,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalZipLongcurrent=newZipLong(ZipLong.getValue(TWO_EXP_32,WORD,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalZipLongcurrent=newZipLong(ZipLong.getValue(TWO_DWORD_BUF,WORD,CFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalZipLongcurrent=newZipLong(ZipLong.getValue(TWO_EXP_32,WORD,CFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalZipLongcurrent=newZipLong(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalZipLongcurrent=newZipLong(ZipLong.getValue(TWO_EXP_32,WORD,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_DWORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,LFH_LEN,LFH_LEN);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(Throwableioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,LFH_LEN,LFH_LEN);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SKIP_BUF),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SHORT_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SHORT_BUF),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,DWORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,WORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(WORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WSORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,WORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,DWORD,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD_BUF),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_DWORD_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(Throwablee){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0);}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD)+1,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,WORD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,WORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,WORD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_EXP_32,WORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_EXP_32,WORD_BUF,csize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_EXP_32,WORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DWORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),DWORD,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD,LFH_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(DD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WS));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWT_SHORT_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWT_SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.append(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.append(ZipLong.getValue(TWO_EXP_32),WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(IllegalArgumentExceptioniae){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,0),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WS));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,DB));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749||current.entry==null){pushback(TWO_DWORD_BUF,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,0),0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,WORD_BUF),SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(current.entry,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(current.entry,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(current.entry,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,TWO_DWORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(WORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_WORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,wORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,0),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF),DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF),0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0));}catch(NumberFormatExceptionnfe){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DEFAULT_SIZE,DEFAULT_SIZE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0));}catch(IOExceptionioe){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,0),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,FS_SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(current,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749moveback(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749moveback(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749moveback(ZipLong.getValue(TWO_EXP_32,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning(ZipLong.getValue(TWO_EXP_32,NON_SIZE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalAssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_WORD_BUF,WORD_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_EXP_32,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<L>current=newAssertionError<L>(current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<L>current=newAssertionError<L>(current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<L>current=newAssertionError<L>(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);}catch(IllegalStateExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(current.entry.getKey(),current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_EXP_32,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_EXP_32,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_EXP_32),WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DEFAULT_NAME));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>in=newAssertionError<T>(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>in=newAssertionError<T>(TWO_EXP_32,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>in=newAssertionError<T>(TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionErrorImpl(TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>in=newAssertionError<T>(TWO_EXP_32,DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>in=newAssertionError<T>(TWO_EXP_32,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setValue(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pendingcurrent.entry.setSize(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,DEFAULT_NAME));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(WORD_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(Exceptione){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(NumberFormatExceptionnfe){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,WSHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF),LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,HELP);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,HEIGHT);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO_W
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_KEY,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pendingcurrent.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}else{return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_KEY,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(WORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF),DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,SHORT_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SHORT_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(DD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0);}catch(IOExceptionioe){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749&&current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749&&current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF),DWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),DWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF),DWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,HELP);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,HEIGHT);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(current.entry.getValue(),WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,-1,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,>current=newAssertionError(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionErrorImpl(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_2));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(ZipLong.getValue(TWO_EXP_32),WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,>current=newAssertionError(ZipLong.getValue(TWO_EXP_2));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_BUF,WORD_BUF),SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),WORD,DWORD);}catch(IllegalArgumentExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_SHORT_BUF),DD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_WORD_BUF,WORD_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(WORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_WORD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(current.entry,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(current.entry,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,LFH_BUF),DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_EXP_32,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SHORT_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_SHORT_BUF),WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>(4);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError<N,V>(0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,SKIP_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF),WORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(4);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,-1,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,-1,-1);}catch(NumberFormatExceptionnfe){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,WSHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(ZipLong.getValue(TWO_EXP_32),WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,DEFAULT_TABLE_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF),SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_KEY,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_SHORT_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF),SKIP_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SKIP_BUF),WORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(WORD_BUF,0),0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(WORD_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749moveback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.start=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.start=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.start=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD,LFH_LEN));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.this.start=newAssertionError(ZipLong.getValue(TWO_EXP_32,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_NORMAL);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,MISSING_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,SHORT_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,WHORD,WHORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_SHORT_BUF,WORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0);}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,WHORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD,WHORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(Exceptione){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WSORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_EXP_32,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(DD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(DFH,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(DFH,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,0,0);}catch(IOExceptionioe){thrownewIllegalStateException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,-1,-1);}catch(IOExceptionioe){thrownewIllegalStateException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(isEnabled(Feature.QUOTE_FIELD_NAMES)){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValu
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DW
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DW
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),-1,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(WORD_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(WORD,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD),LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}else{return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning("current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning("current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning("current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning("current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setSize(ZipLong.getValue(TWO_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning("current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.warning("current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,SHORT_BUF,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,WORD));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD,SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(STANDARD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SHORT_BUF,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionErrorImpl(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current.entry=newAssertionError();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,DWORD,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,WSORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF),WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,DEFAULT_SYNTHETIC);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WSORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WHORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,WORD,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD));}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749((ZipLong)current.entry).setCompressedSize(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD));}catch(IllegalArgumentExceptioniae){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749((ZipLong)current.entry).setSize(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,LFH_LEN);}catch(IOExceptionioe){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,LFH_LEN));}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DWORD,WORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD),LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){current.entry.setSize(ZipLong.getValue(TWO_EXP_32,WORD,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD));}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD));}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0));}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD));}catch(IllegalArgumentExceptioniae){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WRITE_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,WORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,wORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,TWO_DWORD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD,TWO_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,WS));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,NUMBER));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749moveback(TWO_DWORD_BUF,DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749moveback(TWO_DWORD_BUF,DWORD,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749NeighborTraversal.traverse(compiler,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,0);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,DWORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,WORD,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_SHORT_BUF,DWORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(current,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD);}catch(Exceptione){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,DWORD));}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(WRITE_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD,TWO_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,DWORD);}catch(IOExceptionioe){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,-1,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF),DWORD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,KEY_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,SLASH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,0),DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749finalZipLongcurrent=newZipLong(ZipLong.getValue(TWO_EXP_32,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(IllegalArgumentExceptioniae){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(IllegalStateExceptionioe){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(Throwablet){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WSORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry==null){pushback(ZipLong.getValue(TWO_EXP_32,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DWORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,LFH_LEN);}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD,0);}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_EXP_32,DWORD,WHORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD)+1,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(STANDARD_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(SWORD_BUF,FS_SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF,WSORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,b,DWORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_DWORD_BUF,-1,-1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_EXP_32,WS));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,b));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD,WORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,wORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(ZipLong.getValue(TWO_DWORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<T>current=newAssertionError<T>(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32,DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_WORD_BUF,DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_WORD_BUF),DWORD,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,SHORT_BUF,DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_DWORD_BUF,DWORD,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_EXP_32),DWORD,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF,SHORT_BUF),DWORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(ZipLong.getValue(TWO_DWORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32,LFH_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,TWO_EXP_32,DEFAULT_TABLE_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TEST_ERROR,WORD,WRITE_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,TEXP_32,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(TWO_DWORD_BUF,DB,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32),DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749while(current.entry!=null){current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,WORD));}catch(IllegalArgumentExceptioniae){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_WORD_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,W
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}else{current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,DWORD);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.checkState(current.entry!=null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError.checkState(current.entry==null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(WORD_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(STANDARD_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,HARD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,WRITE_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,WORD,TEXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(TWO_EXP_32,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,WORD));}else{current.entry.setSize(ZipLong.getValue(TWO
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry==null){pushback(TWO_DWORD_BUF,DWORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,WORD,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,DWORD,WORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749if(current.entry!=null){pushback(TWO_DWORD_BUF,SHORT_BUF,DWORD);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SCRIPT_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749ReadFully(SWORD_BUF,WSHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,STRING_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,DEFAULT_SYNTHETIC);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749AssertionError<N,V>current=newAssertionError(SWT.DEFAULT_TABLE_ERROR,STRING_LITERAL_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(STANDARD,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749pushback(WORD,SHORT_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(TWO_EXP_32,WORD,DWORD);}catch(IOExceptionioe){}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749try{pushback(ZipLong.getValue(TWO_EXP_32,DWORD,WSORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java749readFully(current.entry,encoding);
