bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getValue()  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.getValue()  +  1);	  val    =    new    ZipLong(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
2	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  current.entry.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  current.entry.getValue());	  val    =    new    ZipLong(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
3	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getKey());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getKey());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.getKey());	  val    =    new    ZipLong(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
4	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val));	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  readFully(val,  SHORT_BUF.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  SHORT_BUF.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  SHORT_BUF.getValue());	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
6	[BUG]  [BUGGY]  readFully(WORD_BUF,  val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(WORD_BUF,  val.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(WORD_BUF,  val.getValue());	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
7	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val.getValue());	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
8	[BUG]  [BUGGY]  readFully(SHORT_BUF,  val.getKey());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF,  val.getKey());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF,  val.getKey());	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
9	[BUG]  [BUGGY]  readFully(SHORT_BUF,  val.getValue(),  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF,  val.getValue(),  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF,  val.getValue(),  SHORT_BUF);	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
10	[BUG]  [BUGGY]  readFully(SHORT_BUF);  val  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF);  val  =  new  ZipLong(SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF);  val  =  new  ZipLong(SHORT_BUF);	  readFully(WORD_BUF);    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
11	[BUG]  [BUGGY]  readFully(STANDARD_BUF);  val  =  new  ZipLong(STANDARD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(STANDARD_BUF);  val  =  new  ZipLong(STANDARD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(STANDARD_BUF);  val  =  new  ZipLong(STANDARD_BUF);	  readFully(WORD_BUF);    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
12	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_BUF);	  readFully(WORD_BUF);    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
13	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val,  current.entry);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val,  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val,  1);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val,  val.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val,  val.getValue());	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val,  true);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val,  true);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  TWO_DWORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  TWO_DWORD_BUF);	  val    =    new    ZipLong(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
19	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  TWO_EXP_32);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF,  TWO_EXP_32);	  val    =    new    ZipLong(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
20	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  WORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF,  WORD_BUF);	  val    =    new    ZipLong(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
21	[BUG]  [BUGGY]  readFully(current.entry,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(current.entry,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(current.entry,  val);	  readFully(val,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  readFully(current,  val.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(current,  val.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(current,  val.entry);	  readFully(val,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
23	[BUG]  [BUGGY]  ReadFully(current.entry,  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(current.entry,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(current.entry,  val);	  readFully(val,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  readFully(val,  current.entry,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  current.entry,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  current.entry,  val);	  readFully(val,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  2);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF  +  2);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
26	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(WORD_BUF  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(WORD_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
27	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  3);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  3);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF  +  3);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
28	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(WRITE_BUF,  SHORT_BUF);	  val    =    new    ZipLong(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  readFully(WORD_BUF,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(WORD_BUF,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(WORD_BUF,  val);	  readFully(SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  readFully(val,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  SHORT_BUF);	  readFully(SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  readFully(SHORT_BUF,  val,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF,  val,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF,  val,  SHORT_BUF);	  readFully(SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  readFully(WRITE_BUF,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(WRITE_BUF,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(WRITE_BUF,  val);	  readFully(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(TWO_EXP_32);	  val    =    new    ZipLong(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
34	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF);	  val    =    new    ZipLong(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
35	[BUG]  [BUGGY]  (ZipLong.DD_SIG,  val.getValue()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG,  val.getValue()));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG,  val.getValue()));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  (ZipLong.DD_SIG.contains(val)));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.contains(val)));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.contains(val)));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  (ZipLong.DD_SIG.startsWith(val)));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.startsWith(val)));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.startsWith(val)));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
38	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
39	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
40	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(val)),  val);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(val)),  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(val)),  val);	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
41	[BUG]  [BUGGY]  val  =  new  ZipLong(DATE_SHORT_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DATE_SHORT_BUF,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DATE_SHORT_BUF,  SHORT_BUF);	  val    =    new    ZipLong(DATE_SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
42	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DATE_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DATE_SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DATE_SHORT_BUF);	  val    =    new    ZipLong(DATE_SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
43	[BUG]  [BUGGY]  val  =  new  ZipLong(DATE_SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DATE_SHORT_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DATE_SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(DATE_SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
44	[BUG]  [BUGGY]  val  =  new  ZipLong(VipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(VipLong.DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(VipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(VipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
45	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val,  SHORT_BUF);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val,  current.entry);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  true);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val,  true);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val,  current.entry.getValue());	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  false);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val,  false);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val,  1);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
52	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
53	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  WORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  WORD_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  readFully(val,  SHORT_BUF.intValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  SHORT_BUF.intValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  SHORT_BUF.intValue());	  readFully(SHORT_BUF,    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
55	[BUG]  [BUGGY]  readFully(WORD_BUF,  val.intValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(WORD_BUF,  val.intValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(WORD_BUF,  val.intValue());	  readFully(SHORT_BUF,    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
56	[BUG]  [BUGGY]  readFully(SHORT_BUF,  val.length());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF,  val.length());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF,  val.length());	  readFully(SHORT_BUF,    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
57	[BUG]  [BUGGY]  (ZipLong.DD_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG,  val.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG,  val.getValue());	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
58	[BUG]  [BUGGY]  (ZipLong.DD_SIG,  val.length()));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG,  val.length()));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG,  val.length()));	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
59	[BUG]  [BUGGY]  (ZipLong.DD_SIG).setValue(val);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG).setValue(val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG).setValue(val);	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  (ZipLong.DD_SIG).equals(val));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG).equals(val));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG).equals(val));	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val  +  1);	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.length);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.length);	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  val  =  new  ZipLong(SWITCH_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SWITCH_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SWITCH_BUF);	  val    =    new    ZipLong(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).setValue(val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).setValue(val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG).setValue(val);	  val    =    new    ZipLong(ZipLong.DD_SIG).getValue();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
65	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SKIP_BUF,  SHORT_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
66	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
67	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val),  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val),  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val),  val);	  readFully(ZipLong.DD_SIG,    val));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
68	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val),  current.entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val),  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val),  current.entry);	  readFully(ZipLong.DD_SIG,    val));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  val.getValue()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val,  val.getValue()));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val,  val.getValue()));	  readFully(ZipLong.DD_SIG,    val));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  current.entry.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  current.entry.getValue());	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val  +  1);	  readFully(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
75	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val  +  1);	  readFully(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
76	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG  +  1,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG  +  1,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG  +  1,  val);	  readFully(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
77	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
78	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  1);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  val  =  new  ZipLong(DSK_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DSK_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DSK_SIG);	  val    =    new    ZipLong(SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
84	[BUG]  [BUGGY]  val  =  new  ZipLong(SDK_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SDK_SIG,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SDK_SIG,  SHORT_BUF);	  val    =    new    ZipLong(SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
85	[BUG]  [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DECEMBER_SIG);	  val    =    new    ZipLong(SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
86	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  2);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  2);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  3);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  3);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  3);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  4);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  4);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  4);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
89	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  10);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  10);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  10);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
90	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  16);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  16);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  16);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
91	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
92	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
93	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG  +  1);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
94	[BUG]  [BUGGY]  readFully(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(current.entry.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(current.entry.getValue());	  readFully(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
95	[BUG]  [BUGGY]  readFully(val,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  current.entry.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  current.entry.getValue());	  readFully(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
96	[BUG]  [BUGGY]  readFully(val.getKey());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val.getKey());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val.getKey());	  readFully(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
97	[BUG]  [BUGGY]  readFully(val.getValue(),  current.entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val.getValue(),  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val.getValue(),  current.entry);	  readFully(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
98	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  2);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  2);	  val    =    new    ZipLong(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
99	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  3);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  3);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  3);	  val    =    new    ZipLong(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
100	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  4);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  4);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  4);	  val    =    new    ZipLong(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
101	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  false);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  false);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
102	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  null);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  null);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
103	[BUG]  [BUGGY]  Value  val  =  new  ZipLong(ZipLong.DD_SIG,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  Value  val  =  new  ZipLong(ZipLong.DD_SIG,  true);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	Value  val  =  new  ZipLong(ZipLong.DD_SIG,  true);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
104	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  true);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  0,  true);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
105	[BUG]  [BUGGY]  val  =  new  ZipLong(DS_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DS_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DS_SIG);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
106	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
107	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
108	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
109	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  1);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
110	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  true);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  true);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
111	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  current.entry.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  current.entry.getValue());	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
112	[BUG]  [BUGGY]  readFully(current.entry,  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(current.entry,  val.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(current.entry,  val.getValue());	  readFully(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
113	[BUG]  [BUGGY]  readFully(val,  val.getValue(),  current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  val.getValue(),  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  val.getValue(),  current.entry);	  readFully(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
114	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
115	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG),  val,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG),  val,  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG),  val,  current.entry);	  readFully(ZipLong.DD_SIG),    val);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
116	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG),  val,  current);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG),  val,  current);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG),  val,  current);	  readFully(ZipLong.DD_SIG),    val);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
117	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG),  val,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG),  val,  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG),  val,  1);	  readFully(ZipLong.DD_SIG),    val);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
118	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  val.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  val.length);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  0,  val.length);	  val    =    new    ZipLong(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
119	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
120	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
121	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
122	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  2;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  2;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
123	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  3;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  3;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
124	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  4;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  4;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
125	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)/  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)/  1;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)/  1;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
126	[BUG]  [BUGGY]  (ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG);	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
127	[BUG]  [BUGGY]  (ZipLong.DD_SIG,  val));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG,  val));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG,  val));	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
128	[BUG]  [BUGGY]  (ZipLong.DD_SIG.startsWith(val));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.startsWith(val));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.startsWith(val));	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
129	[BUG]  [BUGGY]  (ZipLong.DD_SIG).evaluate(val);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG).evaluate(val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG).evaluate(val);	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
130	[BUG]  [BUGGY]  readFully(SHORT_BUF,  val,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF,  val,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF,  val,  0);	  readFully(SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
131	[BUG]  [BUGGY]  val  =  new  ZipLong(DATE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DATE_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DATE_BUF);	  val    =    new    ZipLong(DATE_SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
132	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  5;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  5;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  5;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
133	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val),  this);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val),  this);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val),  this);	  readFully(ZipLong.DD_SIG,    val));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
134	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val),  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val),  false);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val),  false);	  readFully(ZipLong.DD_SIG,    val));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
135	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SKIP_BUF  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SKIP_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
136	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  4);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  4);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF  +  4);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
137	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.toString());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.toString());	  val    =    new    ZipLong(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
138	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
140	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  0);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
141	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  TWO_DWORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SKIP_BUF,  TWO_DWORD_BUF);	  val    =    new    ZipLong(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
142	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.intValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val.intValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val.intValue());	  readFully(SHORT_BUF,    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
143	[BUG]  [BUGGY]  readFully(WRITE_BUF,  val.intValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(WRITE_BUF,  val.intValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(WRITE_BUF,  val.intValue());	  readFully(SHORT_BUF,    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
144	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  DATE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  DATE_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  DATE_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
145	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  df);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  df);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  df);	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
146	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  32);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  32);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
147	[BUG]  [BUGGY]  readFully(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val.getValue(),  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val.getValue(),  0);	  readFully(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
148	[BUG]  [BUGGY]  readFully(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val.getValue()  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val.getValue()  +  1);	  readFully(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
149	[BUG]  [BUGGY]  (ZipLong.DD_SIG).setValue(val));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG).setValue(val));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG).setValue(val));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
150	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(val))  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(val))  &&  hasUTF8Flag;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(val))  &&  hasUTF8Flag;	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
151	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  1,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  1,  true);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  1,  true);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
152	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).readValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).readValue();  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG).readValue();	  val    =    new    ZipLong(ZipLong.DD_SIG).getValue();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
153	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).reset();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).reset();  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG).reset();	  val    =    new    ZipLong(ZipLong.DD_SIG).getValue();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
154	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val,  0);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
155	[BUG]  [BUGGY]  val  =  new  ZipLong(SDK_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SDK_SIG  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SDK_SIG  +  1);	  val    =    new    ZipLong(SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
156	[BUG]  [BUGGY]  readFully(SKIP_BUF);  val  =  new  ZipLong(SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SKIP_BUF);  val  =  new  ZipLong(SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SKIP_BUF);  val  =  new  ZipLong(SKIP_BUF);	  readFully(WORD_BUF);    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
157	[BUG]  [BUGGY]  readFully(WRITE_BUF,  val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(WRITE_BUF,  val.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(WRITE_BUF,  val.getValue());	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
158	[BUG]  [BUGGY]  readFully(SHORT_BUF,  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF,  val.getValue()  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF,  val.getValue()  +  1);	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
159	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val,  0);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
160	[BUG]  [BUGGY]  readFully(ZipLong.LP);  val  =  new  ZipLong(VipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.LP);  val  =  new  ZipLong(VipLong.DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.LP);  val  =  new  ZipLong(VipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(VipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
161	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DOUBLE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DOUBLE);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DOUBLE);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
162	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DECEMBER);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DECEMBER);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
163	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
164	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DECEMBER,  val.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DECEMBER,  val.getValue());	  readFully(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
165	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  -1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  -1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  -1);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
166	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
167	[BUG]  [BUGGY]  val  =  new  ZipLong(DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DD_SIG  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DD_SIG  +  1);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
168	[BUG]  [BUGGY]  val  =  new  ZipLong(DD_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DD_SIG,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DD_SIG,  SHORT_BUF);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
169	[BUG]  [BUGGY]  val  =  new  ZipLong(DD_SIG,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(DD_SIG,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(DD_SIG,  0);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
170	[BUG]  [BUGGY]  val  =  new  ZipLong(LFH_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(LFH_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(LFH_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
171	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  LFH_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SHORT_BUF,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
172	[BUG]  [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SLASH_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
173	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  0);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
174	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  DD_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  DD_SIG);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
175	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  current.entry);	  readFully(val,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
176	[BUG]  [BUGGY]  readFully(SHORT_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(SHORT_BUF,  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(SHORT_BUF,  current.entry);	  readFully(val,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
177	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG),  val,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG),  val,  false);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG),  val,  false);	  readFully(ZipLong.DD_SIG),    val);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
178	[BUG]  [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SLASH_BUF,  SHORT_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
179	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  WRITE_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  WRITE_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
180	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SLASH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SLASH_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SLASH_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
181	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
182	[BUG]  [BUGGY]  readFully(ZipLong.LP);  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.LP);  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.LP);  val  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
183	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
184	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG),  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG),  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG),  val);	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
185	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG  +  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG  +  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG  +  val);	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
186	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(WRITE_BUF,  SKIP_BUF);	  val    =    new    ZipLong(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
187	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  0);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  0);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
188	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  1;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
189	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHARP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHARP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SHARP_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
190	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  ZERO_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  ZERO_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  ZERO_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
191	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG,  val);	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
192	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG)+  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG)+  1;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD_SIG)+  1;	  ZipLong    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
193	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(WORD_BUF,  TWO_DWORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(WORD_BUF,  TWO_DWORD_BUF);	  val    =    new    ZipLong(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
194	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(WORD_BUF);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(VipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
195	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
196	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(WORD_BUF,  SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(WORD_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
197	[BUG]  [BUGGY]  readFully(val.getShortValue());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val.getShortValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val.getShortValue());	  readFully(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
198	[BUG]  [BUGGY]  readFully(val,  WRITE_BUF.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  WRITE_BUF.getValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  WRITE_BUF.getValue());	  readFully(SHORT_BUF,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
199	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
200	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue()));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue()));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(ZipLong.DD_SIG,  val.getValue()));	  readFully(ZipLong.DD_SIG,    val));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
201	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val)+  1;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val)+  1;	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
202	[BUG]  [BUGGY]  val  =  new  ZipLong(SWORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(SWORD_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(SWORD_BUF);	  val    =    new    ZipLong(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
203	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getDescriptor());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getDescriptor());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.getDescriptor());	  val    =    new    ZipLong(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
204	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF  +  1);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
205	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG);	  readFully(WORD_BUF);    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
206	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).restrictByNotNullOrUndefined();  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG).restrictByNotNullOrUndefined();	  val    =    new    ZipLong(ZipLong.DD_SIG).getValue();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
207	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).getKey();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG).getKey();  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG).getKey();	  val    =    new    ZipLong(ZipLong.DD_SIG).getValue();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
208	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(WORD_BUF,  SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(WORD_BUF,  SHORT_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
209	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  ZipLong.NaN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  ZipLong.NaN));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  ZipLong.NaN));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
210	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(current.entry)));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(current.entry)));  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(current.entry)));	  (ZipLong.DD_SIG.equals(val)));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
211	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val),  val);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
212	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  current.entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  current.entry);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	ReadFully(ZipLong.DD_SIG,  val),  current.entry);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
213	[BUG]  [BUGGY]  readFully(val,  val.getShortValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  val.getShortValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  val.getShortValue());	  readFully(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
214	[BUG]  [BUGGY]  readFully(val,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  current.entry.getKey());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  current.entry.getKey());	  readFully(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
215	[BUG]  [BUGGY]  readFully(val,  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  ZipLong.DD_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  ZipLong.DD_SIG);	  readFully(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
216	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true,  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true,  val);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  true,  val);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
217	[BUG]  [BUGGY]  readFully(val,  LFH_BUF.intValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  LFH_BUF.intValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  LFH_BUF.intValue());	  readFully(SHORT_BUF,    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
218	[BUG]  [BUGGY]  readFully(val,  SV_SIG.intValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  readFully(val,  SV_SIG.intValue());  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	readFully(val,  SV_SIG.intValue());	  readFully(SHORT_BUF,    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
219	[BUG]  [BUGGY]  val  =  new  ZipLong(ZERO_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZERO_SHORT_BUF);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZERO_SHORT_BUF);	  val    =    new    ZipLong(DATE_SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
220	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(val)||  val.getValue()!=  null);	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
221	[BUG]  [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  (ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	(ZipLong.DD_SIG.equals(val)||  val.getValue()  ==  null);	  (ZipLong.DD_SIG.equals(val));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
222	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  12);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  12);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  12);	  val    =    new    ZipLong(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
223	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG);  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
224	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {        [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  1;  [BUGGY]      val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  1;	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
