bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(str.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(str.equals(ZipLong.CFH_SIG)&&  str.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.CFH_SIG)&&  str.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.CFH_SIG)&&  str.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  if(str.equals(ZipLong.LFH_SIG)||  str.equals(ZipLong.CFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.LFH_SIG)||  str.equals(ZipLong.CFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.LFH_SIG)||  str.equals(ZipLong.CFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if(str.equals(ZipLong.FLOAT_SIG)||  str.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.FLOAT_SIG)||  str.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.FLOAT_SIG)||  str.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  if(str.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  if(str.equals(ZipLong.FOR)||  str.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.FOR)||  str.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.FOR)||  str.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	nextEntry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(possibleSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  if(propertySig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(propertySig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(propertySig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  if(spotentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(spotentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(spotentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  possibleSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  possibleSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  possibleSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  if(potentialSig  ==  null  ||  possibleSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(potentialSig  ==  null  ||  possibleSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(potentialSig  ==  null  ||  possibleSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  if(possibleSig!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig!=    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  if(pojo!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pojo!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pojo!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig!=    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  if(possibleSig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(possibleSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  if(possibleSig.equals(ZipLong.CFH_SIG)||  possibleSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig.equals(ZipLong.CFH_SIG)||  possibleSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig.equals(ZipLong.CFH_SIG)||  possibleSig.equals(ZipLong.LFH_SIG))  {	  if(possibleSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  if(possibleSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {	  if(possibleSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  if(possibleSig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {	  if(possibleSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(pojo.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pojo.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pojo.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(propertySig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  if(propertySig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(propertySig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(propertySig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(propertySig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  if(propertySig.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(propertySig.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(propertySig.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(propertySig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  if(strategy.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(strategy.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(strategy.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(strategy.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  if(strategy.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(strategy.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(strategy.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(strategy.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  if(strategy.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(strategy.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(strategy.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {	  if(strategy.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  if(strategy.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(strategy.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(strategy.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {	  if(strategy.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  if(strategy.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(strategy.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(strategy.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(strategy.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  if(pojo.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pojo.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pojo.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig.equals(ZipLong.CFH_SIG)&&    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  if(peek.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(peek.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(peek.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(peek.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  if(peek.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(peek.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(peek.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {	  if(peek.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  if(peek.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(peek.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(peek.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(peek.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  if(pos.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pos.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pos.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  if(p.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(p.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(p.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  if(pos.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pos.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pos.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.FLOAT_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  if(propertySig.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(propertySig.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(propertySig.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(propertySig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  if(propertySig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(propertySig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(propertySig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {	  if(propertySig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.FLOAT_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_BUF)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_BUF)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_BUF)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(potentialSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig    ==    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  if(str.equals(ZipLong.FLOAT)||  str.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.FLOAT)||  str.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.FLOAT)||  str.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  if(str.equals(ZipLong.LEN)||  str.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.LEN)||  str.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.LEN)||  str.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  if(possibleSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  if(possibleSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  if(possibleSig.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(possibleSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  if(peek!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(peek!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(peek!=  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(peek.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  if(peek  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(peek  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(peek  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(peek.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  if(pos.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pos.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pos.equals(ZipLong.LFH_SIG)||  potentialSig.equals(ZipLong.CFH_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  if(pos.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pos.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pos.equals(ZipLong.FLOAT)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  if(pos.equals(ZipLong.CFH)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pos.equals(ZipLong.CFH)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pos.equals(ZipLong.CFH)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  if(pos.equals(ZipLong.FOR)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(pos.equals(ZipLong.FOR)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(pos.equals(ZipLong.FOR)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  if(strategy.equals(ZipLong.DEFAULT_SIG)||  potentialSig.equals(ZipLong.DEFAULT_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(strategy.equals(ZipLong.DEFAULT_SIG)||  potentialSig.equals(ZipLong.DEFAULT_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(strategy.equals(ZipLong.DEFAULT_SIG)||  potentialSig.equals(ZipLong.DEFAULT_SIG))  {	  if(strategy.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  potentialSig.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  potentialSig.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  potentialSig.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  potentialSig.append(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  potentialSig.append(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	potentialSig.append(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  if(p.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(p.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(p.equals(ZipLong.CFH_SIG)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(pos.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  if(possibleSig!=  null  &&  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(possibleSig!=  null  &&  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(possibleSig!=  null  &&  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(possibleSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
70	[BUG]  [BUGGY]  if(strategy.equals(ZipLong.CFH)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(strategy.equals(ZipLong.CFH)&&  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(strategy.equals(ZipLong.CFH)&&  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(strategy.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  if(str.equals(ZipLong.CFH_SIG)||  key.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.CFH_SIG)||  key.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.CFH_SIG)||  key.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  if(str.startsWith(ZipLong.CFH_SIG)||  str.startsWith(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.startsWith(ZipLong.CFH_SIG)||  str.startsWith(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.startsWith(ZipLong.CFH_SIG)||  str.startsWith(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  if(str.equals(ZipLong.CFH)&&  str.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(str.equals(ZipLong.CFH)&&  str.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(str.equals(ZipLong.CFH)&&  str.equals(ZipLong.LFH_SIG))  {	  if(str.equals(ZipLong.CFH_SIG)||    str.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  if(potentialSig!=  null  &&  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(potentialSig!=  null  &&  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(potentialSig!=  null  &&  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig!=    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  if(paddingSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);    [BUGGY]  if(paddingSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	if(paddingSig  ==  null  ||  potentialSig.equals(ZipLong.CFH_SIG)||  potentialSig.equals(ZipLong.LFH_SIG))  {	  if(potentialSig!=    null    ||    potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
