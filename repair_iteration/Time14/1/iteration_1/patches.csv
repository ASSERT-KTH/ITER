bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)+  1;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)+  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)+  1;	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
2	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)-  1;  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)-  1;	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd));  [CE]  ';'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd));  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd));	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  ';'  expected	25	None	replace
4	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldsIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  thisYear);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  thisYear);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  thisYear);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
6	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  thisYear,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  thisYear,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  thisYear,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
7	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  dayOfMonth);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  dayOfMonth);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  dayOfMonth);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
8	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  ==  null  ||  values.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
9	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values!=  null  ||  values.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values!=  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values!=  null  ||  values.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  ==  null  ||  values.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  ==  null  ||  values.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
12	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  >=  null  ||  values.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  >=  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  >=  null  ||  values.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
13	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  If(values  ==  null  ||  values.length  ==  0)  {  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  If(values  ==  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    If(values  ==  null  ||  values.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
14	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  {  null  ||  values.length  ==  0)  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  {  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  {  null  ||  values.length  ==  0)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
15	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  >>  0)  {  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  >>  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  ==  null  ||  values.length  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
16	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  >>  null  ||  values.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  >>  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  >>  null  ||  values.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
17	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
18	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  fields,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  fields,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  fields,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
19	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values.length);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values.length);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values.length);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  variables,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  variables,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  variables,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
21	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  null,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  null,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  null,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
22	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd));  [CE]  ';'  expected  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd));  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  ';'  expected	19	None	replace
23	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd.length  ==  0)  {  [CE]  int  cannot  be  dereferenced  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  valueToAdd.length  ==  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
24	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length!=  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd.length!=  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
25	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  ==  1)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd.length  ==  1)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
26	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  >=  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd.length  >=  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
27	[BUG]  [BUGGY]  if(valueToAdd!=  null  ||  valueToAdd.length  ==  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd!=  null  ||  valueToAdd.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd!=  null  ||  valueToAdd.length  ==  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
28	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  values.length  ==  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  values.length  ==  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
29	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  valueToAdd.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  valueToAdd.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  ==  valueToAdd.length)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
30	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  ==  2)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  ==  2)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd.length  ==  2)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
31	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  ==  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
32	[BUG]  [BUGGY]  if(values  ==  0  ||  fieldIndex  ==  getMonthOfYear())  {  [CE]  incomparable  types:  int[]  and  int  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  0  ||  fieldIndex  ==  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  0  ||  fieldIndex  ==  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  incomparable  types:  int[]  and  int	29	None	replace
33	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getDayOfMonth())  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getDayOfMonth())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getDayOfMonth())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
34	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getFieldIndex())  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getFieldIndex())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getFieldIndex())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
35	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getYear())  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
36	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getMillisOfYear())  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getMillisOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getMillisOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
37	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getMonthOfYearValue())  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getMonthOfYearValue())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getMonthOfYearValue())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
38	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getWeekOfYear())  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getWeekOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getWeekOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	34	15	replace
40	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  values.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	34	15	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  fieldIndex!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	34	15	replace
42	[BUG]  [BUGGY]  if(values  ==  null  ||  fieldIndex!=  values.length)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fieldIndex!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	34	15	replace
43	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  fields.length)  {  [CE]  cannot  find  symbol  fields  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd!=  fields.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	non-compiled	[CE]  cannot  find  symbol  fields	34	None	replace
44	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  null  ||  valueToAdd!=  values.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  null  ||  valueToAdd!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd!=  null  ||  valueToAdd!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
45	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex!=  values.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
46	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  fields.length)  {  [CE]  cannot  find  symbol  fields  [FE]              AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >=  fields.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	non-compiled	[CE]  cannot  find  symbol  fields	34	None	replace
47	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonthValue(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonthValue(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDayOfMonthValue(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
49	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex),  values);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	24	None	replace
51	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYearValue(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYearValue(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDaysInYearValue(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
52	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex  +  1);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
53	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
54	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd,  values);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
55	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  partial.getValues(),  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  partial.getValues(),  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  partial.getValues(),  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
56	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd  -  1);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd  -  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd  -  1);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
57	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  parameters,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  parameters,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  parameters,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
58	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd)+  1;  [CE]  illegal  start  of  type  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd)+  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd)+  1;	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  partial,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  partial,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
61	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
62	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
63	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex  >=  values.length)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd!=  0  ||  fieldIndex  >=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
64	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [Delete]  values.length)  {  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [Delete]  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  [Delete]  values.length)  {	  	non-compiled	[CE]  ')'  expected	31	None	add
65	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex  >=  values.length)  {  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  >=  0  ||  fieldIndex  >=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
66	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [BUGGY]  values.length)  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [BUGGY]  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  [BUGGY]  values.length)  {	  	non-compiled	[CE]  ')'  expected	31	None	add
67	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    If(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
68	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  fields.length)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >=  fields.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
69	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    getValues(fieldIndex,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
70	[BUG]  [BUGGY]  int[]  values  =  getValues(param,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(param,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(param,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    getValues(fieldIndex,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
71	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
72	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd!=  0)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
73	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd!=  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd!=  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd!=  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
74	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
75	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  >=  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  >=  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  >=  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
76	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  If(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  If(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    If(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
77	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  {  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  {  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  {  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ')'  expected	43	None	add
78	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  >>  0)  {  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  >>  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
79	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  >>  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  >>  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  >>  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
80	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  ==  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
81	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values!=  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
82	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd!=  0)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  ==  null  ||  valueToAdd!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
83	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  ==  null  ||  valueToAdd  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
84	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  >=  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  >=  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  >=  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
85	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  If(values  ==  null  ||  valueToAdd  ==  0)  {  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  If(values  ==  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    If(values  ==  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
86	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  {  null  ||  valueToAdd  ==  0)  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  {  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  {  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
87	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  >>  0)  {  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  >>  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  ==  null  ||  valueToAdd  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
88	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  >>  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  >>  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  >>  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
89	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1,  valueToAdd);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex  -  1,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
90	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex  -  1);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	compilable	  [FE]  AssertionFailedError  	36	15	replace
92	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	compilable	  [FE]  AssertionFailedError  	36	15	replace
93	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  fields.length)  {  [CE]  cannot  find  symbol  fields  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  fields.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	non-compiled	[CE]  cannot  find  symbol  fields	36	None	replace
94	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  fieldIndex  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	36	8	replace
95	[BUG]  [BUGGY]  if(values  ==  null  ||  fieldIndex  ==  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fieldIndex  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	36	8	replace
96	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  null  ||  valueToAdd  ==  values.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  null  ||  valueToAdd  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  ==  null  ||  valueToAdd  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	36	None	replace
97	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  fields.length)  {  [CE]  cannot  find  symbol  fields  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  ==  fields.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	non-compiled	[CE]  cannot  find  symbol  fields	36	None	replace
98	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  values.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	36	None	replace
99	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values[0].length)  {  [CE]  int  cannot  be  dereferenced  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values[0].length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  values[0].length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
100	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  <  =  valueToAdd)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  <  =  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  <  =  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
101	[BUG]  [BUGGY]  if(values  ==  null  ||  fieldIndex  <  =  valueToAdd)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  <  =  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fieldIndex  <  =  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
102	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  ||  fieldIndex  <  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	41	13	replace
103	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  valueToAdd)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	41	13	replace
104	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  <  =  thisYear)  {  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  <  =  thisYear)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  <  =  thisYear)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  ||  fieldIndex  >=  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	compilable	  [FE]  AssertionFailedError  	41	10	replace
106	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  valueToAdd)  {  [FE]  AssertionFailedError  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >=  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	compilable	  [FE]  AssertionFailedError  	41	10	replace
107	[BUG]  [BUGGY]  if(values  ==  0  ||  fieldIndex  <  =  valueToAdd)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  0  ||  fieldIndex  <  =  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  0  ||  fieldIndex  <  =  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
108	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  valueToAdd.length)  {  [CE]  illegal  start  of  expression  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  valueToAdd.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  =  valueToAdd.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
109	[BUG]  [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  <  =  valueToAdd)  {  [CE]  illegal  start  of  expression  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  <  =  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  >=  0  ||  valueToAdd  <  =  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
110	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  value);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  value);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  value);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
111	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  true);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  true);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  true);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
112	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
113	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().get(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().get(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().get(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
114	[BUG]  [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(iChronology);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(iChronology);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.dayOfMonth().get(iChronology);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
115	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
116	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
117	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
118	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
119	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
120	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().get(partial,  fieldsIndex);  [CE]  illegal  start  of  type  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().get(partial,  fieldsIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().get(partial,  fieldsIndex);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
121	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
122	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex  >  values.length)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd!=  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
123	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex  >  values.length)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd  >=  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
124	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    If(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
125	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  {  0  ||  fieldIndex  >  values.length)  {  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  {  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd  {  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  ')'  expected	39	None	add
126	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  >>  0  ||  fieldIndex  >  values.length)  {  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  >>  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd  >>  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
127	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  [BUGGY]  0  ||  fieldIndex  >  values.length)  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  [BUGGY]  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd  [BUGGY]  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  ')'  expected	39	None	add
128	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  [Delete]  0  ||  fieldIndex  >  values.length)  {  [CE]  ')'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  [Delete]  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd  [Delete]  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  ')'  expected	39	None	add
129	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  fields.length)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >  fields.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
130	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
131	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
132	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
133	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
134	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	46	None	replace
135	[BUG]  [BUGGY]  int[]  values  =  getFieldValues();  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getFieldValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getFieldValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
136	[BUG]  [BUGGY]  int[]  values  =  getValues(),  fieldIndex);  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(),  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(),  fieldIndex);	      int[]    values    =    getValues();    	non-compiled	[CE]  ';'  expected	11	None	replace
137	[BUG]  [BUGGY]  int[]  values  =  getValues(partial);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
138	[BUG]  [BUGGY]  int[]  values  =  getDayOfMonth();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getDayOfMonth();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getDayOfMonth();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
139	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(values);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues().toArray(values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues().toArray(values);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
140	[BUG]  [BUGGY]  int[]  values  =  getFields();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getFields();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getFields();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
141	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
142	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  fields,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  fields,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  fields,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
143	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  parameters,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  parameters,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  parameters,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
144	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  variables,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  variables,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  variables,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
145	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  types,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  types,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  types,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
146	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  parameters);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  parameters);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  parameters);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
147	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
148	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
149	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  fields,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  fields,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  fields,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
150	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
151	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
152	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
153	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInMonth(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysInMonth(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysInMonth(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
154	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
155	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
156	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	15	None	replace
157	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInMonth(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysInMonth(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysInMonth(partial,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
158	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYear(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysInYear(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysInYear(partial,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
159	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values!=  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
160	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values  ==  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
161	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  >=  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  >=  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values  >=  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
162	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  >>  null  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  >>  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values  >>  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
163	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values!=  null  ||  valueToAdd  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
164	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  [BUGGY]  null  ||  valueToAdd  ==  0)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  [BUGGY]  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values  [BUGGY]  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
165	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values  ==  null  ||  valueToAdd!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
166	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  [Delete]  null  ||  valueToAdd  ==  0)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values  [Delete]  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values  [Delete]  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
167	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  If(values!=  null  ||  valueToAdd  ==  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  If(values!=  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    If(values!=  null  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  fieldIndex  ==  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	2	15	replace
169	[BUG]  [BUGGY]  if(values  ==  null  ||  fieldIndex  ==  0)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fieldIndex  ==  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	2	15	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  valueToAdd!=  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	2	15	replace
171	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd!=  0)  {  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  valueToAdd!=  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	2	15	replace
172	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(partial  ==  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(partial  ==  null  ||  valueToAdd  ==  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	8	replace
173	[BUG]  [BUGGY]  if(partial  ==  null  ||  valueToAdd  ==  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(partial  ==  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(partial  ==  null  ||  valueToAdd  ==  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	8	replace
174	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  valueToAdd  >=  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	13	replace
175	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  >=  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  valueToAdd  >=  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	13	replace
176	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  <  =  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  valueToAdd  <  =  0)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
177	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(i).getFields();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getFieldType(i).getFields();  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getFieldType(i).getFields();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
178	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd!=  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd!=  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
179	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  29)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  ==  29)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
180	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  1)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  ==  1)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
181	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  ==  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
182	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  <  =  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  <  =  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
183	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  >=  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  >=  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
184	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  iChronology);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  iChronology);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
185	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
186	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	14	None	replace
187	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
188	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	21	None	replace
189	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)-  1;  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)-  1;	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
190	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
191	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
192	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)+  1;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)+  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)+  1;	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
193	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (values  ==  null  ||  valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if  (values  ==  null  ||  valueToAdd  ==  1)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	11	replace
194	[BUG]  [BUGGY]  if  (values  ==  null  ||  valueToAdd  ==  1)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (values  ==  null  ||  valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if  (values  ==  null  ||  valueToAdd  ==  1)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	11	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
196	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
197	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  fields.length  ||  valueToAdd  ==  0)  {  [CE]  cannot  find  symbol  fields  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  fields.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >  fields.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  fields	44	None	replace
198	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
199	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length  ||  valueToAdd  ==  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
200	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
201	[BUG]  [BUGGY]  if(values  ==  null  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
202	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  fields.length  ||  valueToAdd  ==  0)  {  [CE]  cannot  find  symbol  fields  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  fields.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  fields.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  fields	44	None	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  fieldIndex  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd  >  fieldIndex  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
204	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  fieldIndex  ||  valueToAdd  ==  0)  {  [FE]  AssertionFailedError  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  fieldIndex  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >  fieldIndex  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
205	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  values.length  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  =  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  >=  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
207	[BUG]  [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [FE]  AssertionFailedError  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  >=  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
208	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.getYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
209	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex),  values);	      int    valueToAdd    =    iChronology.getYear(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	20	None	replace
210	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex  +  1);	      int    valueToAdd    =    iChronology.getYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
211	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYear(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYear(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDaysInYear(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.getYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
212	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null)  {	  if(valueToAdd    ==    null)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	replace
213	[BUG]  [BUGGY]  if(values  ==  null)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null)  {	  if(valueToAdd    ==    null)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	replace
214	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  <  2)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  <  2)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd.length  <  2)  {	  if(valueToAdd    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
215	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  <  1)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  <  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd.length  <  1)  {	  if(valueToAdd    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
216	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  null)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  valueToAdd  ==  null)  {	  if(valueToAdd    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
217	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
218	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
219	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
220	[BUG]  [BUGGY]  int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
221	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYearValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
222	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
223	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDays(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDays(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDays(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
224	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex,  valueToAdd);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
225	[BUG]  [BUGGY]  int[]  values  =  iChronology.get(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.get(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.get(partial,  fieldIndex);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
226	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(fieldIndex);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
227	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex,  values);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
228	[BUG]  [BUGGY]  int[]  values  =  partial.get(iChronology);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(iChronology);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(iChronology);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
229	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex  -  1);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex  -  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex  -  1);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
230	[BUG]  [BUGGY]  int[]  values  =  partial.get(iChronology,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(iChronology,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(iChronology,  fieldIndex);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
231	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getFieldValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
232	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValuesInYear();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
233	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValues()  /  2;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
234	[BUG]  [BUGGY]  int[]  values  =(int[])partial.clone();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.clone();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.clone();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
235	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValues()  -  1;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
236	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getAllValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
237	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
238	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
239	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
240	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex  ==  values.length)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd!=  0  ||  fieldIndex  ==  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
241	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex  ==  values.length)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  >=  0  ||  fieldIndex  ==  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
242	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    If(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
243	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
244	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  {  0  ||  fieldIndex  ==  values.length)  {  [CE]  ')'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  {  0  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  {  0  ||  fieldIndex  ==  values.length)  {	  	non-compiled	[CE]  ')'  expected	35	None	add
245	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  ==  fields.length)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  ==  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  ==  fields.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
246	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
247	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
248	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  >>  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
249	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [BUGGY]  values.length)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [BUGGY]  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  [BUGGY]  values.length)  {	  	non-compiled	[CE]  ')'  expected	33	None	add
250	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [Delete]  values.length)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [Delete]  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  [Delete]  values.length)  {	  	non-compiled	[CE]  ')'  expected	33	None	add
251	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex!=  values.length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  >=  0  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  >=  0  ||  fieldIndex!=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
252	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex!=  values.length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd!=  0  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd!=  0  ||  fieldIndex!=  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
253	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  fields.length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex!=  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex!=  fields.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
254	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
255	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd!=  1)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd!=  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    if  (valueToAdd!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
256	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  ==  2)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  ==  2)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    if  (valueToAdd  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
257	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  >=  1)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  >=  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    if  (valueToAdd  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
258	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  If  (valueToAdd  ==  1)  {  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  If  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    If  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
259	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  >>  1)  {  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  >>  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    if  (valueToAdd  >>  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
260	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  [BUGGY]  1)  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  if  (valueToAdd  [BUGGY]  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    if  (valueToAdd  [BUGGY]  1)  {	  	non-compiled	[CE]  ')'  expected	37	None	add
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  values.length!=  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	7	15	replace
262	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length!=  0)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  values.length!=  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	7	15	replace
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values!=  null  ||  values.length  ==  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	7	15	replace
264	[BUG]  [BUGGY]  if(values!=  null  ||  values.length  ==  0)  {  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=  null  ||  values.length  ==  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	7	15	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  values.length  >=  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	7	15	replace
266	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  >=  0)  {  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  >=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  values.length  >=  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	7	15	replace
267	[BUG]  [BUGGY]  if(values  ==  null  ||  fields.length  ==  0)  {  [CE]  cannot  find  symbol  fields  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fields.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fields.length  ==  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  fields	7	None	replace
268	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(partial  ==  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(partial  ==  null  ||  values.length  ==  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	7	8	replace
269	[BUG]  [BUGGY]  if(partial  ==  null  ||  values.length  ==  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(partial  ==  null  ||  values.length  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(partial  ==  null  ||  values.length  ==  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	7	8	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
271	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  values.length)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
273	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
274	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  fieldIndex  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	8	replace
275	[BUG]  [BUGGY]  if(values  ==  null  ||  fieldIndex  >  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fieldIndex  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	8	replace
276	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  fields.length)  {  [CE]  cannot  find  symbol  fields  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >  fields.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	non-compiled	[CE]  cannot  find  symbol  fields	40	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd  >  29)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
278	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  29)  {  [FE]  AssertionFailedError  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >  29)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
279	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  fields.length)  {  [CE]  cannot  find  symbol  fields  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  fields.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	non-compiled	[CE]  cannot  find  symbol  fields	40	None	replace
280	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  valueToAdd  ==  29)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
281	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  29)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  valueToAdd  ==  29)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values!=  null  ||  valueToAdd  ==  29)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
283	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  29)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=  null  ||  valueToAdd  ==  29)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values!=  null  ||  fieldIndex  ==  0)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
285	[BUG]  [BUGGY]  if(values!=  null  ||  fieldIndex  ==  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=  null  ||  fieldIndex  ==  0)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd!=  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  valueToAdd!=  29)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
287	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd!=  29)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd!=  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  valueToAdd!=  29)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
288	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	22	None	replace
289	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
290	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)-  1;  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)-  1;	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
291	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
292	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)+  1;  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)+  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)+  1;	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
293	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1,  values);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1,  values);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
294	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getFieldType(iChronology).getValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
295	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  fieldIndex);  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(),  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(),  fieldIndex);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  ';'  expected	10	None	replace
296	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  fieldIndex;  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(),  fieldIndex;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(),  fieldIndex;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
297	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getFieldValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getFieldValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
298	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(),  valueToAdd;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
299	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
300	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  values);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
301	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getValueToAdd(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getValueToAdd(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getValueToAdd(partial,  fieldIndex);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
302	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  -  1);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  -  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  -  1);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
303	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  -  1,  values);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  -  1,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  -  1,  values);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
304	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex),  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex),  values);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	23	None	replace
305	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  values.length);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  values.length);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  values.length);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
306	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex)-  1;  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex)-  1;	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd  >=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
308	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >=  values.length)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
309	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(values  ==  null  ||  fieldIndex  >=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	32	8	replace
310	[BUG]  [BUGGY]  if(values  ==  null  ||  fieldIndex  >=  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  fieldIndex  >=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	32	8	replace
311	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  >=  values.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  >=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
312	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  fields.length)  {  [CE]  cannot  find  symbol  fields  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  fields.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex!=  fields.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	non-compiled	[CE]  cannot  find  symbol  fields	32	None	replace
313	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd!=  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd!=  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
314	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >=  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >=  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >=  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
315	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex!=  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
316	[BUG]  [BUGGY]  if(values  ==  0  ||  fieldIndex  >=  getMonthOfYear())  {  [CE]  incomparable  types:  int[]  and  int  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  0  ||  fieldIndex  >=  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  0  ||  fieldIndex  >=  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  incomparable  types:  int[]  and  int	30	None	replace
317	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >>  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  >>  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  >>  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
318	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  getDayOfMonth())  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  getDayOfMonth())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >=  getDayOfMonth())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
319	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  getYear())  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  getYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >=  getYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
320	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  getFieldIndex())  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  getFieldIndex())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >=  getFieldIndex())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
321	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  thisYear,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  thisYear,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  thisYear,  valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
322	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd)+  1;  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd)+  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd)+  1;	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
323	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  dayOfMonth);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  dayOfMonth);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  dayOfMonth);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
324	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldsIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
325	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd)-  1;  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd)-  1;	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
326	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfYear().add(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfYear().add(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfYear().add(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
327	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  thisYear);  [CE]  illegal  start  of  type  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  thisYear);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  thisYear);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
328	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
329	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
330	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
331	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
332	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getFieldValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
333	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  int  valueToAdd  =  0  ||  fieldIndex  ==  values.length)  {  [CE]  ';'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  int  valueToAdd  =  0  ||  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    int  valueToAdd  =  0  ||  fieldIndex  ==  values.length)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
334	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex  -  1,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex  -  1,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex  -  1,  values);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
335	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex  +  1);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
336	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex)+  1;  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex)+  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex)+  1;	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
337	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth(fieldIndex);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getDayOfMonth(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getDayOfMonth(fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
338	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  int  valueToAdd  {  0  ||  fieldIndex  >  values.length)  {  [CE]  ';'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  int  valueToAdd  {  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    int  valueToAdd  {  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
339	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  int  valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  [CE]  ';'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  int  valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    int  valueToAdd  ==  0  ||  fieldIndex  >  values.length)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
340	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(fieldIndex,  values);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
341	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  fieldIndex,  values;  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(),  fieldIndex,  values;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(),  fieldIndex,  values;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
342	[BUG]  [BUGGY]  int[]  values  =  partial.getValues()  -  fieldIndex;  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues()  -  fieldIndex;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues()  -  fieldIndex;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
343	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(1);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValues(1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValues(1);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
344	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int  valueToAdd  =  0;  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int  valueToAdd  =  0;  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int  valueToAdd  =  0;	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
345	[BUG]  [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(value);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(value);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.dayOfMonth().get(value);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
346	[BUG]  [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(fieldIndex);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.dayOfMonth().get(fieldIndex);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
347	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().set(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
348	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValues(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValues(fieldIndex);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
349	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValues(1);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
350	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValuesArray();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValuesArray();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValuesArray();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
351	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValues(2);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
352	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(fieldIndex,  values);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
353	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYearValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
354	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
355	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getFieldValues(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getFieldValues(fieldIndex,  values);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
356	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getFieldValues(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getFieldValues(fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
357	[BUG]  [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  ==  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  ==  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  &&  fieldIndex  ==  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
358	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getFieldOfYear())  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getFieldOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getFieldOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
359	[BUG]  [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >=  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >=  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  &&  fieldIndex  >=  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
360	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values  -  1);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values  -  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values  -  1);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
361	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1,  values);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex  -  1,  values);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
362	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getYearValue(fieldIndex);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getYearValue(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getYearValue(fieldIndex);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
363	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getYearValue(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getYearValue(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getYearValue(fieldIndex,  values);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
364	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex  +  1,  values);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex  +  1,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex  +  1,  values);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
365	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex),  values;  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex),  values;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex),  values;	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
366	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  &&  fieldIndex  >=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	32	8	replace
367	[BUG]  [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >=  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  &&  fieldIndex  >=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	32	8	replace
368	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getYear(fieldIndex);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getYear(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getYear(fieldIndex);	      int    valueToAdd    =    iChronology.getYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
369	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex  +  1,  values);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex  +  1,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex  +  1,  values);	      int    valueToAdd    =    iChronology.getYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
370	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex)-  1;  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYear(partial,  fieldIndex)-  1;	      int    valueToAdd    =    iChronology.getYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
371	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  &&  fieldIndex  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	36	8	replace
372	[BUG]  [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  ==  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  &&  fieldIndex  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	36	8	replace
373	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd.length)  {  [CE]  int  cannot  be  dereferenced  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
374	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  -1)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  ==  -1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  ==  -1)  {	  if(values    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
375	[BUG]  [BUGGY]  Integer  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  Integer  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	Integer  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
376	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd  +  1);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd  +  1);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
377	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYearOfYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYearOfYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYearOfYear(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
378	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex,  valueToAdd);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
379	[BUG]  [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  getValueToAdd(partial,  fieldIndex  +  1);	      int    valueToAdd    =    getValueToAdd(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
380	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  [BUGGY]  0)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  if(values  ==  null  ||  values.length  [BUGGY]  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    values.length    ==    0)    {    if(values  ==  null  ||  values.length  [BUGGY]  0)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
381	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
382	[BUG]  [BUGGY]  Integer  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  Integer  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	Integer  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
383	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values[valueToAdd]);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values[valueToAdd]);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values[valueToAdd]);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
384	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fields[fieldIndex].equals(valueToAdd))  {  [CE]  incomparable  types:  int  and  <null>  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fields[fieldIndex].equals(valueToAdd))  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fields[fieldIndex].equals(valueToAdd))  {	  if(valueToAdd    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if  (valueToAdd!=  0)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	38	15	replace
386	[BUG]  [BUGGY]  if  (valueToAdd!=  0)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd!=  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if  (valueToAdd!=  0)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	38	15	replace
387	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  0  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if  (valueToAdd  ==  0  ||  valueToAdd  ==  0)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	8	replace
388	[BUG]  [BUGGY]  if  (valueToAdd  ==  0  ||  valueToAdd  ==  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  0  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if  (valueToAdd  ==  0  ||  valueToAdd  ==  0)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	8	replace
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if  (valueToAdd  ==  1  ||  fieldIndex  ==  0)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	38	15	replace
390	[BUG]  [BUGGY]  if  (valueToAdd  ==  1  ||  fieldIndex  ==  0)  {  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if  (valueToAdd  ==  1  ||  fieldIndex  ==  0)  {	  if    (valueToAdd    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	38	15	replace
391	[BUG]  [BUGGY]  int[]  values  =  getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(fieldIndex);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
392	[BUG]  [BUGGY]  int[]  values  =  getValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(fieldIndex,  values);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
393	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues().toArray(valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
394	[BUG]  [BUGGY]  int[]  values  =  getImmediatePartialValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getImmediatePartialValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getImmediatePartialValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
395	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
396	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
397	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
398	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex);  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(fieldIndex);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
399	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex,  valueToAdd);  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(fieldIndex,  valueToAdd);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
400	[BUG]  [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  {  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values!=  null  ||  valueToAdd  ==  0)  {  if(values!=  null  ||  valueToAdd  {  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values!=    null    ||    valueToAdd    ==    0)    {    if(values!=  null  ||  valueToAdd  {  0)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
401	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getMonthOfYear(fieldIndex);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
402	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
403	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  <  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd.length  <  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd.length  <  0)  {	  if(valueToAdd    ==    null    ||    valueToAdd.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
404	[BUG]  [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  {  0)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  valueToAdd  ==  0)  {  if(values  ==  null  ||  valueToAdd  {  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values    ==    null    ||    valueToAdd    ==    0)    {    if(values  ==  null  ||  valueToAdd  {  0)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
405	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd  +  1);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd  +  1);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
406	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  0,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  0,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  0,  valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
407	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  keyToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  keyToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  keyToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  ||  fieldIndex  <  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
409	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length  ||  valueToAdd  ==  0)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
410	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  <  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  <  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	9	replace
411	[BUG]  [BUGGY]  if(fieldIndex  <  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  <  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  <  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	9	replace
412	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
413	[BUG]  [BUGGY]  if(fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
414	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  {  0)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  {  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  {  0)  {	  	non-compiled	[CE]  ')'  expected	43	None	add
415	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  int  valueToAdd  =  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  ';'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  int  valueToAdd  =  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    int  valueToAdd  =  0  ||  fieldIndex  >  values.length  ||  valueToAdd  ==  0)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
416	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  &&  fieldIndex!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	34	8	replace
417	[BUG]  [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex!=  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  &&  fieldIndex!=  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	34	8	replace
418	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    getValues(fieldIndex,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
419	[BUG]  [BUGGY]  int[]  values  =  getValues(fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(fieldIndex,  values,  valueToAdd);	      int[]    values    =    getValues(fieldIndex,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
420	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  &&  fieldIndex  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	8	replace
421	[BUG]  [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  &&  fieldIndex  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	8	replace
422	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  values.length)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  =  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  >=  0  ||  valueToAdd  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
424	[BUG]  [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  >  values.length)  {  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  >=  0  ||  valueToAdd  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  AssertionFailedError  	40	15	replace
425	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd.length);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd.length);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd.length);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
426	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd  +  1);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd  +  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd  +  1);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
427	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd)-  1;  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd)-  1;	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
428	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  iMax);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  iMax);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  iMax);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
429	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd  -  1);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd  -  1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd  -  1);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
430	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getYearValues(fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
431	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
432	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
433	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
434	[BUG]  [BUGGY]  if(valueToAdd!=  null  ||  valueToAdd  ==  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd!=  null  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd!=  null  ||  valueToAdd  ==  0)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
435	[BUG]  [BUGGY]  if(valueToAdd!=  null  ||  fieldIndex  ==  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd!=  null  ||  fieldIndex  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd!=  null  ||  fieldIndex  ==  0)  {	  if(values!=    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
436	[BUG]  [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  <  =  valueToAdd)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  &&  fieldIndex  <  =  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  &&  fieldIndex  <  =  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
437	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	41	8	replace
438	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	41	8	replace
439	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  <  =  fieldIndex)  {  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  <  =  fieldIndex)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  <  =  fieldIndex)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
440	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth(fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getDayOfMonth(fieldIndex);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
441	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth();  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getDayOfMonth();	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
442	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
443	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
444	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
445	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  If(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    If(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
446	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(values  ==  null  ||  values.length  <  =  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(values  ==  null  ||  values.length  <  =  0)  {	  if(values    ==    null    ||    values.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
447	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  0);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  0);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  0);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
448	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  thisYear);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  thisYear);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  thisYear);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
449	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  iChronology);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  iChronology);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  iChronology);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
450	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  null);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  null);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  null);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
451	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  -1);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  -1);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  valueToAdd,  -1);	      int[]    values    =    getValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
452	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values;  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values;	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  ')'  expected	46	None	replace
453	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
454	[BUG]  [BUGGY]  int[]  values  =  partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.getValuesInYear();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.getValuesInYear();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
455	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).getValues();  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).getValues();  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.getFieldType(fieldIndex).getValues();  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
456	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.getValues();  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
457	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.get(fieldIndex).getValues();  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.get(fieldIndex).getValues();  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.get(fieldIndex).getValues();  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
458	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).split( ": ");  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).split( ": ");  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.getFieldType(fieldIndex).split( ": ");  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
459	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).split( "n ");  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).split( "n ");  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.getFieldType(fieldIndex).split( "n ");  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
460	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.get(fieldIndex);  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.get(fieldIndex);  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.get(fieldIndex);  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
461	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex);  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex);  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.getFieldType(fieldIndex);  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
462	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.get(fieldIndex).toIntArray();  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.get(fieldIndex).toIntArray();  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.get(fieldIndex).toIntArray();  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
463	[BUG]  [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).split( "u000 ");  if  (valueToAdd  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if  (valueToAdd  ==  1)  {  int[]  values  =  partial.getFieldType(fieldIndex).split( "u000 ");  if  (valueToAdd  ==  1)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if    (valueToAdd    ==    1)    {    int[]  values  =  partial.getFieldType(fieldIndex).split( "u000 ");  if  (valueToAdd  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
464	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  iChronology);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values,  iChronology);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values,  iChronology);	      int[]    values    =    getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
465	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues().toArray(valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getValues().toArray(valueToAdd);  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getValues().toArray(valueToAdd);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
466	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [BUG]  values.length)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex!=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  [BUG]  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  [BUG]  values.length)  {	  	non-compiled	[CE]  ')'  expected	33	None	add
467	[BUG]  [BUGGY]  int[]  values  =  getMeanValues();  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getMeanValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getMeanValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
468	[BUG]  [BUGGY]  int[]  values  =  findValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  findValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  findValues(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    getValues(fieldIndex,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
469	[BUG]  [BUGGY]  int[]  values  =(int[])partial.cloneTree();  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.cloneTree();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.cloneTree();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
470	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =(int[])partial.getPartialValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
471	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
472	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getValueOfYear())  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  getValueOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  getValueOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    ==    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
473	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Integer.MIN_VALUE)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Integer.MIN_VALUE)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  ==  Integer.MIN_VALUE)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
474	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Token.NAME)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Token.NAME)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  ==  Token.NAME)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
475	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Integer.MAX_VALUE)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Integer.MAX_VALUE)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  ==  Integer.MAX_VALUE)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
476	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Token.VALUE_NULL)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  valueToAdd  ==  Token.VALUE_NULL)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  valueToAdd  ==  Token.VALUE_NULL)  {	  if(valueToAdd    ==    null    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
477	[BUG]  [BUGGY]  if(valueToAdd  ==  thisYear)  {  [CE]  cannot  find  symbol  thisYear  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  thisYear)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  thisYear)  {	  if    (valueToAdd    ==    1)    {    	non-compiled	[CE]  cannot  find  symbol  thisYear	38	None	replace
478	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
479	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(valueToAdd  ==  0  ||  fieldIndex  ==  29)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	34	8	replace
480	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  29)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  ==  29)  {	  if(valueToAdd    ==    0    ||    fieldIndex!=    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	34	8	replace
481	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values;  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values;	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  ')'  expected	14	None	replace
482	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
483	[BUG]  [BUGGY]  if(fieldIndex  <  =  valueToAdd)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  <  =  valueToAdd)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  <  =  valueToAdd)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
484	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  29)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  29)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  =  29)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
485	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  thisYear)  {  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  thisYear)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  =  thisYear)  {	  if(valueToAdd    ==    0    ||    fieldIndex    <    =    valueToAdd)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
486	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
487	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd,  0);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd,  0);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.dayOfMonth().add(partial,  fieldIndex,  values,  valueToAdd,  0);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
488	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.monthOfYear().add(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.monthOfYear().add(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.monthOfYear().add(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
489	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.monthOfMonth().add(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.monthOfMonth().add(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.monthOfMonth().add(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
490	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getYearValue(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.getYearValue(fieldIndex,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.getYearValue(fieldIndex,  valueToAdd);	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
491	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex)-  1;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getYearValue(partial,  fieldIndex)-  1;	      int    valueToAdd    =    iChronology.getYearValue(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
492	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >=  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  <  values.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
493	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
495	[BUG]  [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length)  {  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    values.length)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
496	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex)-  1;  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex)-  1;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex)-  1;	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
497	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex  -  1,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex  -  1,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex  -  1,  valueToAdd);	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
498	[BUG]  [BUGGY]  int[]  values  =  partial.get(fieldIndex).intValue();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  partial.get(fieldIndex).intValue();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  partial.get(fieldIndex).intValue();	      int[]    values    =    partial.get(fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
499	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
500	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >>  getMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  >>  getMonthOfYear())  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  >>  getMonthOfYear())  {	  if(valueToAdd    ==    0    ||    fieldIndex    >=    getMonthOfYear())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
501	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeAdd(valueToAdd));  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeAdd(valueToAdd));  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeAdd(valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
502	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeNegate(valueToAdd));  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeNegate(valueToAdd));  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeNegate(valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
503	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeMultiply(valueToAdd));  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeMultiply(valueToAdd));  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeMultiply(valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
504	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  >  values.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
505	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  <  0  ||  valueToAdd  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  <  0  ||  valueToAdd  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	9	replace
506	[BUG]  [BUGGY]  if(fieldIndex  <  0  ||  valueToAdd  >  values.length)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  <  0  ||  valueToAdd  >  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  <  0  ||  valueToAdd  >  values.length)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	9	replace
507	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  valueToAdd.length  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  <  =  valueToAdd.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  0  ||  fieldIndex  <  =  valueToAdd.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
509	[BUG]  [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {  [FE]  AssertionFailedError  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  ==  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
511	[BUG]  [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  >=  0  ||  valueToAdd  ==  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	44	15	replace
512	[BUG]  [BUGGY]  if(fieldIndex  <  =  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(fieldIndex  <  =  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(fieldIndex  <  =  0  ||  valueToAdd  >  values.length  ||  valueToAdd  ==  0)  {	  if(valueToAdd    ==    0    ||    fieldIndex    >    values.length    ||    valueToAdd    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
513	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMONTHOFYEAR(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMONTHOFYEAR(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMONTHOFYEAR(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
514	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
515	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMONTHOFYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMONTHOFYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMONTHOFYear(partial,  fieldIndex,  values,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
516	[BUG]  [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  {  values.length)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  0  ||  fieldIndex  ==  values.length)  {  if(valueToAdd  ==  0  ||  fieldIndex  {  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd    ==    0    ||    fieldIndex    ==    values.length)    {    if(valueToAdd  ==  0  ||  fieldIndex  {  values.length)  {	  	non-compiled	[CE]  ')'  expected	35	None	add
517	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values;  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values;  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values;	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  ')'  expected	47	None	replace
518	[BUG]  [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  partial.dayOfMonth().get(valueToAdd);  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  partial.dayOfMonth().get(valueToAdd);	      int    valueToAdd    =    iChronology.dayOfMonth().get(partial);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
519	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  <  =  valueToAdd.length)  {  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  <  =  valueToAdd.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  <  =  valueToAdd.length)  {	  if(valueToAdd    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
520	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  <  values.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  <  values.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  <  values.length)  {	  if(valueToAdd    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
521	[BUG]  [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  >  valueToAdd.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  if(valueToAdd  ==  null  ||  fieldIndex  >  valueToAdd.length)  {  [BUGGY]    return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	if(valueToAdd  ==  null  ||  fieldIndex  >  valueToAdd.length)  {	  if(valueToAdd    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
522	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd).intValue();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {      [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd).intValue();  [BUGGY]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd).intValue();	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
