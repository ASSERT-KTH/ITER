bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology.get(partial,  instant  +  valueToAdd);  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology.get(partial,  instant  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    iChronology.get(partial,  instant  +  valueToAdd);	  	non-compiled	[CE]  unreachable  statement	30	None	add
2	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  iChronology.get(partial,  instant  +  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  iChronology.get(partial,  instant  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    iChronology  =  iChronology.get(partial,  instant  +  valueToAdd);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	add
3	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology.set(partial,  instant  +  valueToAdd);  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology.set(partial,  instant  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    iChronology.set(partial,  instant  +  valueToAdd);	  	non-compiled	[CE]  unreachable  statement	30	None	add
4	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  int[]  values  =  iChronology.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  int[]  values  =  iChronology.getValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    int[]  values  =  iChronology.getValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	30	None	add
5	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  int[]  values  =  iChronology.get(partial,  instant  +  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  int[]  values  =  iChronology.get(partial,  instant  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    int[]  values  =  iChronology.get(partial,  instant  +  valueToAdd);	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	30	None	add
6	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	add
7	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    iChronology  =  DateTimeUtils.getInstance(partial,  instant);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	add
8	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  int  valueToAdd  =  iChronology.get(partial,  instant  +  valueToAdd);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  int  valueToAdd  =  iChronology.get(partial,  instant  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    int  valueToAdd  =  iChronology.get(partial,  instant  +  valueToAdd);	  	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	30	None	add
9	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  valueToAdd);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	add
10	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [CE]  not  a  statement  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(instant  >=  0)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }	  	non-compiled	[CE]  not  a  statement	30	None	add
11	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  instant);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
12	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
13	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
14	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldIndex,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
15	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(partial,  instant);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
16	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldsIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldsIndex,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  fieldsIndex,  values);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
17	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  null,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  null,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  null,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
18	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldsIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  fieldsIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  fieldsIndex);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
19	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  index);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  index);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  index);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
20	[BUG]  [BUGGY]  return  super.add(partial,  instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  add(ReadablePartial,long,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  instant,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  instant,  values,  valueToAdd);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,long,int[],int)	33	None	replace
21	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  instant);  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  fieldIndex,  values,  instant);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	33	None	replace
22	[BUG]  [BUGGY]  return  super.add(instant,  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  add(long,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(instant,  fieldIndex,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(instant,  fieldIndex,  values,  valueToAdd);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(long,int,int[],int)	33	None	replace
23	[BUG]  [BUGGY]  return  super.add(partial,  valueToAdd,  fieldIndex,  values,  instant);  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int,int[],long)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  valueToAdd,  fieldIndex,  values,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  valueToAdd,  fieldIndex,  values,  instant);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int,int[],long)	33	None	replace
24	[BUG]  [BUGGY]  if(instant!=  null)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  incomparable  types:  long  and  <null>  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  null)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  null)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	33	None	replace
25	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	33	None	replace
26	[BUG]  [BUGGY]  if(instant!=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	33	None	replace
27	[BUG]  [BUGGY]  if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	33	None	replace
28	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  valueToAdd,  values[i]);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  valueToAdd,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  valueToAdd,  values[i]);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	33	None	replace
29	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  valueToAdd);	  return    iChronology.get(partial,    instant    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int)	15	None	replace
30	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1L);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  instant  +  1L);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
31	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1L);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1L);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1L);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
32	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	9	replace
33	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	9	replace
34	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values[i]);  [CE]  cannot  find  symbol  i  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values[i]);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values[i]);	  return    iChronology.get(partial,    instant    +    1);    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
35	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  >=  -1)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	9	replace
36	[BUG]  [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  -1)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	9	replace
37	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  cannot  find  symbol  i  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  return    iChronology.get(partial,    instant    +    1);    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
38	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    iChronology.get(partial,    instant    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	15	None	replace
39	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd,  instant);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,long)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  valueToAdd,  instant);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,long)	31	None	replace
40	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	10	replace
41	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	10	replace
42	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values,  valueToAdd);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)	31	None	replace
43	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  missing  return  statement  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  missing  return  statement	31	None	replace
44	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[])  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  valueToAdd,  values);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[])	31	None	replace
45	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  cannot  find  symbol  i  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  i	31	None	replace
46	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  0,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  0,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  0,  valueToAdd);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int)	31	None	replace
47	[BUG]  [BUGGY]  return  iChronology.set(partial,  instant,  values);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[])  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  instant,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  instant,  values);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[])	34	None	replace
48	[BUG]  [BUGGY]  return  iChronology.set(partial,  instant,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  instant,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  instant,  valueToAdd);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int)	34	None	replace
49	[BUG]  [BUGGY]  return  iChronology.set(instant,  partial);  [CE]  no  suitable  method  found  for  set(long,ReadablePartial)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(instant,  partial);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(instant,  partial);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,ReadablePartial)	34	None	replace
50	[BUG]  [BUGGY]  return  iChronology.set(instant,  initial);  [CE]  cannot  find  symbol  initial  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(instant,  initial);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(instant,  initial);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  cannot  find  symbol  initial	34	None	replace
51	[BUG]  [BUGGY]  return  iChronology.add(partial,  instant);  [CE]  no  suitable  method  found  for  add(ReadablePartial,long)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.add(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.add(partial,  instant);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,long)	34	None	replace
52	[BUG]  [BUGGY]  return  iChronology.set(partial,  instant  +  1);  [CE]  incompatible  types  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  instant  +  1);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  incompatible  types	34	None	replace
53	[BUG]  [BUGGY]  return  iChronology.set(partial,  instant,  null);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,<null>)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  instant,  null);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  instant,  null);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,<null>)	34	None	replace
54	[BUG]  [BUGGY]  return  iChronology.set(partial,  instant,  true);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,boolean)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  instant,  true);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  instant,  true);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,boolean)	34	None	replace
55	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(instant,  instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValues(instant,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValues(instant,  instant);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
56	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(instant,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValues(instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValues(instant,  valueToAdd);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
57	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValues(partial,  instant);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
58	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getValues(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getValues(instant);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
59	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(instant,  null);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValues(instant,  null);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValues(instant,  null);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
60	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(instant,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValues(instant,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValues(instant,  fieldIndex);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
61	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  instant);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],long)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values,  instant);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],long)	27	None	replace
62	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  valueToAdd,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  valueToAdd,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  valueToAdd,  values);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])	27	None	replace
63	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  instant,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,long,int[])  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  instant,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  instant,  values);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,long,int[])	27	None	replace
64	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  fields,  valueToAdd);  [CE]  cannot  find  symbol  fields  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  fields,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  fields,  valueToAdd);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  cannot  find  symbol  fields	27	None	replace
65	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  valueToAdd,  instant);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,long)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  valueToAdd,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  valueToAdd,  instant);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,long)	27	None	replace
66	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  fieldIndex,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  fieldIndex,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  fieldIndex,  values);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])	27	None	replace
67	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
68	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
69	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
70	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
71	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  partial);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  partial);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
72	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  initial);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  initial);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  initial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
73	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getMonthOfYear(partial,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
74	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)+  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)+  1;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)+  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
75	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values,  instant);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],long)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values,  instant);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],long)	11	None	replace
76	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values,  valueToAdd);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)	11	None	replace
77	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values,  fieldIndex);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values,  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values,  fieldIndex);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)	11	None	replace
78	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fields,  valueToAdd);  [CE]  cannot  find  symbol  fields  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fields,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fields,  valueToAdd);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  cannot  find  symbol  fields	11	None	replace
79	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values,  isize);  [CE]  cannot  find  symbol  isize  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values,  isize);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values,  isize);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  cannot  find  symbol  isize	11	None	replace
80	[BUG]  [BUGGY]  return  iChronology.get(partial,  fieldIndex,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[])  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  fieldIndex,  values);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[])	11	None	replace
81	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values,  dayOfMonth);  [CE]  cannot  find  symbol  dayOfMonth  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values,  dayOfMonth);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values,  dayOfMonth);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  cannot  find  symbol  dayOfMonth	11	None	replace
82	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values[i]);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values[i]);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
83	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  partial.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  partial.getValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  partial.getValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
84	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  iChronology.getValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
85	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  ==  null)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [CE]  not  a  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  ==  null)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  ==  null)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }	  	non-compiled	[CE]  not  a  statement	32	None	add
86	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant!=  null)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [CE]  not  a  statement  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant!=  null)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant!=  null)  {  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }	  	non-compiled	[CE]  not  a  statement	32	None	add
87	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  getValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  getValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
88	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  [CE]  not  a  statement  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    Value  29  for  dayOfMonth  must  be  in  the  range  [1];	  	non-compiled	[CE]  not  a  statement	32	None	add
89	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Integer  valueToAdd  =  iChronology.getIntValue(instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Integer  valueToAdd  =  iChronology.getIntValue(instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    Integer  valueToAdd  =  iChronology.getIntValue(instant);	  	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
90	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Integer  valueToAdd  =  DateTimeUtils.getValue(instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Integer  valueToAdd  =  DateTimeUtils.getValue(instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    Integer  valueToAdd  =  DateTimeUtils.getValue(instant);	  	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
91	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Value  29  for  dayOfMonth  must  be  in  the  range  [1]  [CE]  not  a  statement  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  Value  29  for  dayOfMonth  must  be  in  the  range  [1]  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    Value  29  for  dayOfMonth  must  be  in  the  range  [1]	  	non-compiled	[CE]  not  a  statement	32	None	add
92	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getDays();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getDays();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  iChronology.getDays();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
93	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	29	None	replace
94	[BUG]  [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	29	None	replace
95	[BUG]  [BUGGY]  if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	29	None	replace
96	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
97	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
98	[BUG]  [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	29	None	replace
99	[BUG]  [BUGGY]  if(instant!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  incomparable  types:  long  and  <null>  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	29	None	replace
100	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
101	[BUG]  [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
102	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	8	replace
103	[BUG]  [BUGGY]  if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  ==  0)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	8	replace
104	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	36	None	replace
105	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	36	None	replace
106	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	36	None	replace
107	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  dayOfMonth);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  dayOfMonth);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  dayOfMonth);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	36	None	replace
108	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  isize);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  isize);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  isize);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	36	None	replace
109	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fields);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fields);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fields);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	36	None	replace
110	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.get(partial,  valueToAdd);  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.get(partial,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology.get(partial,  valueToAdd);	  	non-compiled	[CE]  unreachable  statement	28	None	add
111	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.set(partial,  valueToAdd);  [CE]  unreachable  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.set(partial,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology.set(partial,  valueToAdd);	  	non-compiled	[CE]  unreachable  statement	28	None	add
112	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.set(partial,  instant);  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.set(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology.set(partial,  instant);	  	non-compiled	[CE]  unreachable  statement	28	None	add
113	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.get(partial,  instant);  [CE]  unreachable  statement  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.get(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology.get(partial,  instant);	  	non-compiled	[CE]  unreachable  statement	28	None	add
114	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	28	None	add
115	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology  =  DateTimeUtils.getInstance(partial,  instant);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	28	None	add
116	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  int  valueToAdd  =  iChronology.get(partial,  instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  int  valueToAdd  =  iChronology.get(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    int  valueToAdd  =  iChronology.get(partial,  instant);	  	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	28	None	add
117	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  int[]  values  =  iChronology.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  int[]  values  =  iChronology.getValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    int[]  values  =  iChronology.getValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	28	None	add
118	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.put(partial,  valueToAdd);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.put(partial,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology.put(partial,  valueToAdd);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
119	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.put(partial,  instant);  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology.put(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology.put(partial,  instant);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
120	[BUG]  [BUGGY]  iChronology.set(partial,  fieldIndex,  values,  instant,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,int,int[],long,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  fieldIndex,  values,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  fieldIndex,  values,  instant,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,int,int[],long,int)	21	None	replace
121	[BUG]  [BUGGY]  iChronology.set(instant,  values,  fieldIndex,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  values,  fieldIndex,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  values,  fieldIndex,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int,int)	21	None	replace
122	[BUG]  [BUGGY]  iChronology.set(partial,  valueToAdd,  values,  fieldIndex);  [CE]  no  suitable  method  found  for  set(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  valueToAdd,  values,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  valueToAdd,  values,  fieldIndex);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,int,int[],int)	21	None	replace
123	[BUG]  [BUGGY]  iChronology.set(instant,  fieldIndex,  values,  instant,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int,int[],long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  fieldIndex,  values,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  fieldIndex,  values,  instant,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int[],long,int)	21	None	replace
124	[BUG]  [BUGGY]  iChronology.set(instant,  valueToAdd,  values,  fieldIndex);  [CE]  no  suitable  method  found  for  set(long,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  valueToAdd,  values,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  valueToAdd,  values,  fieldIndex);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int[],int)	21	None	replace
125	[BUG]  [BUGGY]  iChronology.set(instant,  values,  fieldIndex,  instant,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int,long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  values,  fieldIndex,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  values,  fieldIndex,  instant,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int,long,int)	21	None	replace
126	[BUG]  [BUGGY]  iChronology.set(partial,  instant,  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  instant,  fieldIndex,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  instant,  fieldIndex,  values,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int,int[],int)	21	None	replace
127	[BUG]  [BUGGY]  iChronology.set(instant,  fieldsIndex,  values,  instant,  valueToAdd);  [CE]  cannot  find  symbol  fieldsIndex  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  fieldsIndex,  values,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  fieldsIndex,  values,  instant,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	21	None	replace
128	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getFieldValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
129	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDays();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDays();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDays();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
130	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getFieldValues(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getFieldValues(instant);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
131	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYear();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValuesInYear();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValuesInYear();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
132	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDayOfMonth();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
133	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	38	None	replace
134	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fields[i]);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fields[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fields[i]);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	38	None	replace
135	[BUG]  [BUGGY]  return  partial.get(instant,  iChronology);  [CE]  method  get  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  partial.get(instant,  iChronology);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  partial.get(instant,  iChronology);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  method  get  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	12	None	replace
136	[BUG]  [BUGGY]  return  iChronology.remove(partial,  instant);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.remove(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.remove(partial,  instant);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
137	[BUG]  [BUGGY]  return  iChronology.getInstance(partial,  instant);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.getInstance(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.getInstance(partial,  instant);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
138	[BUG]  [BUGGY]  return  iChronology.convert(partial,  instant);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.convert(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.convert(partial,  instant);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
139	[BUG]  [BUGGY]  return  iChronology.get(param,  instant);  [CE]  cannot  find  symbol  param  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(param,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(param,  instant);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol  param	12	None	replace
140	[BUG]  [BUGGY]  return  iChronology.get(partial,  moment);  [CE]  cannot  find  symbol  moment  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  moment);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  moment);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol  moment	12	None	replace
141	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	22	None	replace
142	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getMonthOfYear(instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
143	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant  +  1,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant  +  1,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant  +  1,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	22	None	replace
144	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);  [CE]  cannot  find  symbol  i  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
145	[BUG]  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int)	39	None	replace
146	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  fields,  valueToAdd);  [CE]  cannot  find  symbol  fields  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  fields,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  fields,  valueToAdd);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fields	39	None	replace
147	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
148	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
149	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
150	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i])+  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i])+  1;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i])+  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
151	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]  -  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]  -  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]  -  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
152	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i])-  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i])-  1;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i])-  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
153	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]),  valueToAdd);  [CE]  ';'  expected  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]),  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]),  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  ';'  expected	7	None	replace
154	[BUG]  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).add(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).add(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(0).getField(iChronology).add(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
155	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i],  valueToAdd);  [CE]  cannot  find  symbol  i  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i],  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i],  valueToAdd);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
156	[BUG]  [BUGGY]  instant  =  iChronology.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  iChronology.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  iChronology.getFieldType(i).getField(iChronology).add(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
157	[BUG]  [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology).add(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology).add(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(1).getField(iChronology).add(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
158	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).add(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).add(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(chronology).add(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
159	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	23	None	replace
160	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	23	None	replace
161	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	23	None	replace
162	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
163	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  instant,  valueToAdd);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	4	None	replace
164	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  instant,  values);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	4	None	replace
165	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  1);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	4	None	replace
166	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(instant,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(instant,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(instant,  instant);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	4	None	replace
167	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getInstance(partial,  instant);  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getInstance(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getInstance(partial,  instant);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
168	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(instant,  partial);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(instant,  partial);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(instant,  partial);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	4	None	replace
169	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant,  null);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant,  null);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  instant,  null);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	4	None	replace
170	[BUG]  [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  not  a  statement  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
171	[BUG]  [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  not  a  statement  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
172	[BUG]  [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  not  a  statement  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
173	[BUG]  [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  not  a  statement  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >>  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
174	[BUG]  [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  not  a  statement  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
175	[BUG]  [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int[],long)	19	None	replace
176	[BUG]  [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  [CE]  not  a  statement  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
177	[BUG]  [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  not  a  statement  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >>  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
178	[BUG]  [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  not  a  statement  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
179	[BUG]  [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  not  a  statement  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
180	[BUG]  [BUGGY]  parent!=  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  illegal  start  of  expression  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  parent!=  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	parent!=  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
181	[BUG]  [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  cannot  find  symbol  i  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	20	None	replace
182	[BUG]  [BUGGY]  yearToUse  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  not  a  statement  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  yearToUse  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	yearToUse  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
183	[BUG]  [BUGGY]  while(instant  >=  0)  {  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  'else'  without  'if'  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  while(instant  >=  0)  {  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	while(instant  >=  0)  {  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
184	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[1]);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int)  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[1]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[1]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int)	20	None	replace
185	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDayOfMonth(instant,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
186	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDayOfMonth(instant,  instant);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
187	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDaysInYearMonth(instant);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
188	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getDayOfMonth(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getDayOfMonth(instant);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
189	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(instant,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDaysInYearMonth(instant,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
190	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYear(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDaysInYear(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDaysInYear(instant);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
191	[BUG]  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
192	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
193	[BUG]  [BUGGY]  instant  =  iChronology.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  iChronology.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  iChronology.getFieldType(i).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
194	[BUG]  [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology).set(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(1).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
195	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i],  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i],  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i],  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	6	None	replace
196	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	6	None	replace
197	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i])+  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i])+  1;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i])+  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	6	None	replace
198	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]),  instant);  [CE]  ';'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]),  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]),  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
199	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i])-  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i])-  1;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i])-  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	6	None	replace
200	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  -  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  -  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  -  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	6	None	replace
201	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	17	8	replace
202	[BUG]  [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	17	8	replace
203	[BUG]  [BUGGY]  instant  =  iChronology.get(partial,  instant);  [CE]  incompatible  types  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  iChronology.get(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  iChronology.get(partial,  instant);	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  incompatible  types	17	None	replace
204	[BUG]  [BUGGY]  instant  +=  iChronology.getDayOfMonth(instant);  [CE]  missing  return  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  +=  iChronology.getDayOfMonth(instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  +=  iChronology.getDayOfMonth(instant);	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  missing  return  statement	17	None	replace
205	[BUG]  [BUGGY]  instant  +=  iChronology.get(partial,  instant);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  +=  iChronology.get(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  +=  iChronology.get(partial,  instant);	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
206	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  [CE]  missing  return  statement  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  missing  return  statement	17	None	replace
207	[BUG]  [BUGGY]  instant  +=  iChronology.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  +=  iChronology.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  +=  iChronology.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
208	[BUG]  [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  [CE]  missing  return  statement  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  missing  return  statement	17	None	replace
209	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	16	None	add
210	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  incompatible  types  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  incompatible  types	16	None	add
211	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant!=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	16	None	add
212	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  ==  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  ==  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  ==  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	16	None	add
213	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  [Delete]  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  [Delete]  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  [Delete]  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  ')'  expected	16	None	add
214	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  fields,  valueToAdd);  }  [CE]  cannot  find  symbol  fields  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  fields,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  fields,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  fields	16	None	add
215	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
216	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  no  suitable  method  found  for  get(ReadablePartial)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial)	16	None	add
217	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  instant);  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getValues(),  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getValues(),  instant);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  ';'  expected	2	None	replace
218	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(i).getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getFieldType(i).getValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getFieldType(i).getValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
219	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getFieldValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getFieldValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
220	[BUG]  [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getValues()  -  1;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
221	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	5	None	replace
222	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
223	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
224	[BUG]  [BUGGY]  iChronology.set(partial,  instant,  values,  fieldIndex);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  instant,  values,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  instant,  values,  fieldIndex);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[],int)	26	None	replace
225	[BUG]  [BUGGY]  iChronology.set(partial,  valueToAdd,  fieldIndex,  values,  instant);  [CE]  no  suitable  method  found  for  set(ReadablePartial,int,int,int[],long)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  valueToAdd,  fieldIndex,  values,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  valueToAdd,  fieldIndex,  values,  instant);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,int,int,int[],long)	26	None	replace
226	[BUG]  [BUGGY]  iChronology.set(partial,  valueToAdd,  fieldsIndex,  values,  fieldIndex);  [CE]  cannot  find  symbol  fieldsIndex  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  valueToAdd,  fieldsIndex,  values,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  valueToAdd,  fieldsIndex,  values,  fieldIndex);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	26	None	replace
227	[BUG]  [BUGGY]  iChronology.set(partial,  instant,  fieldsIndex,  values,  valueToAdd);  [CE]  cannot  find  symbol  fieldsIndex  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  instant,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  instant,  fieldsIndex,  values,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	26	None	replace
228	[BUG]  [BUGGY]  iChronology.set(partial,  instant,  values,  fieldIndex,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[],int,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  instant,  values,  fieldIndex,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  instant,  values,  fieldIndex,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[],int,int)	26	None	replace
229	[BUG]  [BUGGY]  iChronology.set(partial,  values,  fieldIndex,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,int[],int,int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  values,  fieldIndex,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  values,  fieldIndex,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,int[],int,int)	26	None	replace
230	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.get(partial,  instant  +  1);  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.get(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology.get(partial,  instant  +  1);	  	non-compiled	[CE]  unreachable  statement	14	None	add
231	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  int[]  values  =  iChronology.get(partial,  instant  +  1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  int[]  values  =  iChronology.get(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    int[]  values  =  iChronology.get(partial,  instant  +  1);	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	14	None	add
232	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.set(partial,  instant  +  1);  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.set(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology.set(partial,  instant  +  1);	  	non-compiled	[CE]  unreachable  statement	14	None	add
233	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.get(partial,  instant  +  1);  return  iChronology.get(partial,  instant  +  1);  [CE]  unreachable  statement  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.get(partial,  instant  +  1);  return  iChronology.get(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology.get(partial,  instant  +  1);  return  iChronology.get(partial,  instant  +  1);	  	non-compiled	[CE]  unreachable  statement	14	None	add
234	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology  =  DateTimeUtils.getInstance(partial,  instant);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	14	None	add
235	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology  =  DateTimeUtils.getInstance(partial,  instant  +  1);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	14	None	add
236	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  int[]  values  =  iChronology.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  int[]  values  =  iChronology.getValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    int[]  values  =  iChronology.getValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	14	None	add
237	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  int[]  values  =  partial.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  int[]  values  =  partial.getValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    int[]  values  =  partial.getValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	14	None	add
238	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.reset(partial,  instant  +  1);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology.reset(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology.reset(partial,  instant  +  1);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
239	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  DateTimeUtils.getInstance(partial,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  DateTimeUtils.getInstance(partial,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology  =  DateTimeUtils.getInstance(partial,  valueToAdd);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	14	None	add
240	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  partial);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  partial);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(instant,  partial);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
241	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(instant,  instant);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
242	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  initial);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  initial);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(instant,  initial);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
243	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  valueToAdd);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
244	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant  +  1);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
245	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  values);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
246	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getDayOfMonth(partial,  instant);  [CE]  cannot  find  symbol  [FE]                                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getDayOfMonth(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getDayOfMonth(partial,  instant);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
247	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  dayOfMonth);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant,  dayOfMonth);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(instant,  dayOfMonth);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
248	[BUG]  [BUGGY]  return  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[],int)	13	None	replace
249	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd,  instant);  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,long)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  valueToAdd,  instant);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,long)	13	None	replace
250	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  valueToAdd,  instant);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,long)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  valueToAdd,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  valueToAdd,  instant);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,long)	13	None	replace
251	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fields[i],  valueToAdd);  [CE]  cannot  find  symbol  fields  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fields[i],  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fields[i],  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fields	13	None	replace
252	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fieldIndex,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fieldIndex,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fieldIndex,  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int)	13	None	replace
253	[BUG]  [BUGGY]  return  iChronology.get(partial,  fieldIndex,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  fieldIndex,  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,int)	13	None	replace
254	[BUG]  [BUGGY]  return  iChronology.get(partial,  fieldIndex,  instant,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex,  instant,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  fieldIndex,  instant,  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,long,int)	13	None	replace
255	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	24	None	replace
256	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getInstance(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getInstance(partial,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getInstance(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
257	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  values);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	24	None	replace
258	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
259	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  instant);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	24	None	replace
260	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex,  valueToAdd);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	24	None	replace
261	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(instant,  fieldIndex);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(instant,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(instant,  fieldIndex);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	24	None	replace
262	[BUG]  [BUGGY]  int[]  values  =  getValues(),  instant);  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues(),  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues(),  instant);	      int[]    values    =    getValues();    	non-compiled	[CE]  ';'  expected	37	None	replace
263	[BUG]  [BUGGY]  int[]  values  =  getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getFieldValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getFieldValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
264	[BUG]  [BUGGY]  int[]  values  =  getValues().length;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues().length;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues().length;	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
265	[BUG]  [BUGGY]  int[]  values  =  getValues(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues(instant);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
266	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues().toArray(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues().toArray(instant);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
267	[BUG]  [BUGGY]  int[]  values  =  getValues()  /  2;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues()  /  2;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues()  /  2;	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
268	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues().toArray(values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues().toArray(values);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
269	[BUG]  [BUGGY]  return  iChronology.get(params,  instant);  [CE]  cannot  find  symbol  params  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(params,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(params,  instant);	  return    iChronology.get(instant,    instant);    	non-compiled	[CE]  cannot  find  symbol  params	18	None	replace
270	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
271	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  unreachable  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
272	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
273	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex  +  valueToAdd);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex  +  valueToAdd);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex  +  valueToAdd);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
274	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
275	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
276	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex  +  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex  +  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
277	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  }  [CE]  unreachable  statement  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
278	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  valueToAdd,  values);  [CE]  cannot  find  symbol  i  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  valueToAdd,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  valueToAdd,  values);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
279	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  fieldIndex);	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
280	[BUG]  [BUGGY]  return  iChronology.get(partial,  fieldIndex);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  fieldIndex);	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
281	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
282	[BUG]  [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
283	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant!=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
284	[BUG]  [BUGGY]  if(instant!=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant!=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant!=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
285	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  [CE]  missing  return  statement  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  missing  return  statement	29	None	replace
286	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
287	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	29	15	replace
288	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  values);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	24	None	replace
289	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex  +  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex  +  1);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	24	None	replace
290	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldsIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  fieldsIndex  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldsIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldsIndex,  values,  valueToAdd);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	17	None	replace
291	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(param,  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  param  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(param,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(param,  fieldIndex,  values,  valueToAdd);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  cannot  find  symbol  param	17	None	replace
292	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  i);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  i);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  i);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	38	None	replace
293	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	38	None	replace
294	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  iMax);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  iMax);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  iMax);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	38	None	replace
295	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
296	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getMonthOfYearValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
297	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getMonthOfYear();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
298	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(instant,  index);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValues(instant,  index);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValues(instant,  index);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
299	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValues(partial,  valueToAdd);	      int[]    values    =    iChronology.getValues(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
300	[BUG]  [BUGGY]  iChronology.set(partial,  values,  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,int[],int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  values,  fieldIndex,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  values,  fieldIndex,  values,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,int[],int,int[],int)	26	None	replace
301	[BUG]  [BUGGY]  iChronology.set(partial,  initial,  values,  fieldIndex,  valueToAdd);  [CE]  cannot  find  symbol  initial  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  initial,  values,  fieldIndex,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  initial,  values,  fieldIndex,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  initial	26	None	replace
302	[BUG]  [BUGGY]  iChronology.set(partial,  null,  values,  fieldIndex,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,<null>,int[],int,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  null,  values,  fieldIndex,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  null,  values,  fieldIndex,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,<null>,int[],int,int)	26	None	replace
303	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valuesToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valuesToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valuesToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	22	None	replace
304	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  +  instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  +  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]  +  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	6	None	replace
305	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i],  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i],  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i],  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	6	None	replace
306	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  valueToAdd  +  1);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	15	replace
307	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  1);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  valueToAdd  +  1);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	15	replace
308	[BUG]  [BUGGY]  return  iChronology.get(partial,  values[instant  +  1]);  [CE]  possible  loss  of  precision  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  values[instant  +  1]);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  values[instant  +  1]);	  return    iChronology.get(partial,    instant    +    1);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
309	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  2);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  instant  +  2);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
310	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  2);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  2);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  2);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
311	[BUG]  [BUGGY]  return  iChronology.get(partial,  values  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  values  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  values  +  1);	  return    iChronology.get(partial,    instant    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
312	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  *  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  instant  *  1);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
313	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  *  1);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  *  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  *  1);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
314	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i),  partial.getField(iChronology).add(instant,  values[i]);  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i),  partial.getField(iChronology).add(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i),  partial.getField(iChronology).add(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  ';'  expected	40	None	replace
315	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i)getField(iChronology).add(instant,  values[i]);  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i)getField(iChronology).add(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i)getField(iChronology).add(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  ';'  expected	40	None	replace
316	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(instant);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
317	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CE]  not  a  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1	  	non-compiled	[CE]  not  a  statement	32	None	add
318	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  }  [CE]  not  a  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  }	  	non-compiled	[CE]  not  a  statement	32	None	add
319	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [CE]  not  a  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1];  }	  	non-compiled	[CE]  not  a  statement	32	None	add
320	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getYearValues(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getYearValues(instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  iChronology.getYearValues(instant);	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
321	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getMonthOfYear(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getMonthOfYear(instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  iChronology.getMonthOfYear(instant);	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
322	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getYears();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getYears();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  iChronology.getYears();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
323	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1]  [CE]  not  a  statement  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1]  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1]	  	non-compiled	[CE]  not  a  statement	32	None	add
324	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [Delete]  [CE]  not  a  statement  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [Delete]  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [Delete]	  	non-compiled	[CE]  not  a  statement	32	None	add
325	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getYearValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  int[]  values  =  iChronology.getYearValues();  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    int[]  values  =  iChronology.getYearValues();	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
326	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getMonthOfYear(instant);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
327	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDayOfMonth(instant,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
328	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(instant,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getMonthOfYear(instant,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
329	[BUG]  [BUGGY]  instant  <  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  <  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  <  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
330	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[],long)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  fieldIndex,  values,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[],long)	19	None	replace
331	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[])  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  else  {  return  super.add(partial,  fieldIndex,  values,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[])	19	None	replace
332	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant)+  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial,  instant)+  1;  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getInstance(partial,  instant)+  1;	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	4	None	replace
333	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getInstance(partial,  valueToAdd);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getInstance(partial,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getInstance(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
334	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i),  partial.getField(iChronology).set(instant,  values[i]);  [CE]  ';'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i),  partial.getField(iChronology).set(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i),  partial.getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  ';'  expected	35	None	replace
335	[BUG]  [BUGGY]  Instant  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  Instant  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	Instant  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
336	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(instant,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getValues(instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getValues(instant,  valueToAdd);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
337	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getValues(1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getValues(1);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
338	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fieldsIndex,  valueToAdd);  [CE]  cannot  find  symbol  fieldsIndex  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fieldsIndex,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fieldsIndex,  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	13	None	replace
339	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  valueToAdd,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  valueToAdd,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  valueToAdd,  values);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])	13	None	replace
340	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values,  offset);  [CE]  cannot  find  symbol  offset  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values,  offset);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values,  offset);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  cannot  find  symbol  offset	11	None	replace
341	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fields,  values);  [CE]  cannot  find  symbol  fields  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fields,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fields,  values);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  cannot  find  symbol  fields	11	None	replace
342	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  valueToAdd,  values,  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  super.add(partial,  valueToAdd,  values,  fieldIndex);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	33	15	replace
343	[BUG]  [BUGGY]  return  super.add(partial,  valueToAdd,  values,  fieldIndex);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  valueToAdd,  values,  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  valueToAdd,  values,  fieldIndex);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	33	15	replace
344	[BUG]  [BUGGY]  return  super.add(partial,  iChronology,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  add(ReadablePartial,BasicChronology,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  iChronology,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  iChronology,  values,  valueToAdd);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,BasicChronology,int[],int)	33	None	replace
345	[BUG]  [BUGGY]  return  super.add(partial,  fieldsIndex,  values,  instant);  [CE]  cannot  find  symbol  fieldsIndex  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldsIndex,  values,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  fieldsIndex,  values,  instant);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	33	None	replace
346	[BUG]  [BUGGY]  return  super.add(partial,  valueIndex,  values,  instant);  [CE]  cannot  find  symbol  valueIndex  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  valueIndex,  values,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  valueIndex,  values,  instant);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  valueIndex	33	None	replace
347	[BUG]  [BUGGY]  return  super.add(partial,  null,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  add(ReadablePartial,<null>,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  null,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  null,  values,  valueToAdd);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,<null>,int[],int)	33	None	replace
348	[BUG]  [BUGGY]  return  super.add(partial,  offset,  values,  valueToAdd);  [CE]  cannot  find  symbol  offset  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  offset,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  super.add(partial,  offset,  values,  valueToAdd);	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  offset	33	None	replace
349	[BUG]  [BUGGY]  return  iChronology.get(partial,  fieldIndex  +  1,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[])  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex  +  1,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  fieldIndex  +  1,  values);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[])	27	None	replace
350	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  fieldIndex);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values,  fieldIndex);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int[],int)	27	None	replace
351	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueIndex  +  1,  values);  [CE]  cannot  find  symbol  valueIndex  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueIndex  +  1,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  valueIndex  +  1,  values);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  cannot  find  symbol  valueIndex	27	None	replace
352	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  1,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[])  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  1,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  valueToAdd  +  1,  values);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,int,int[])	27	None	replace
353	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  timePart);  [CE]  cannot  find  symbol  timePart  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  timePart);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values,  timePart);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  cannot  find  symbol  timePart	27	None	replace
354	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant,  values);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getMonthOfYear(instant,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
355	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
356	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
357	[BUG]  [BUGGY]  return  partial.get(instant);  [CE]  method  get  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  partial.get(instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  partial.get(instant);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  method  get  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	12	None	replace
358	[BUG]  [BUGGY]  return  iChronology.get(partial,  initial);  [CE]  cannot  find  symbol  initial  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  initial);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  initial);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol  initial	12	None	replace
359	[BUG]  [BUGGY]  return  iChronology.find(partial,  instant);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.find(partial,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.find(partial,  instant);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
360	[BUG]  [BUGGY]  iChronology.set(instant,  values,  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  values,  fieldIndex,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  values,  fieldIndex,  values,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int,int[],int)	21	None	replace
361	[BUG]  [BUGGY]  iChronology.set(instant,  fieldIndex,  values,  valueToAdd,  instant);  [CE]  no  suitable  method  found  for  set(long,int,int[],int,long)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  fieldIndex,  values,  valueToAdd,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  fieldIndex,  values,  valueToAdd,  instant);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int[],int,long)	21	None	replace
362	[BUG]  [BUGGY]  iChronology.set(instant,  fieldsIndex,  values,  valueToAdd,  instant);  [CE]  cannot  find  symbol  fieldsIndex  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  fieldsIndex,  values,  valueToAdd,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  fieldsIndex,  values,  valueToAdd,  instant);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	21	None	replace
363	[BUG]  [BUGGY]  iChronology.set(instant,  fieldIndex,  values,  valueToAdd,  isize);  [CE]  cannot  find  symbol  isize  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(instant,  fieldIndex,  values,  valueToAdd,  isize);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(instant,  fieldIndex,  values,  valueToAdd,  isize);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  isize	21	None	replace
364	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[valueToAdd]);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[valueToAdd]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[valueToAdd]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int)	20	None	replace
365	[BUG]  [BUGGY]  if(instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [CE]  incompatible  types  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >>  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[i]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  incompatible  types	20	None	replace
366	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[0]);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[0]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[0]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int)	20	None	replace
367	[BUG]  [BUGGY]  return  iChronology.set(partial,  valueToAdd,  instant);  [CE]  no  suitable  method  found  for  set(ReadablePartial,int,long)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  valueToAdd,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  valueToAdd,  instant);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,int,long)	34	None	replace
368	[BUG]  [BUGGY]  return  iChronology.set(partial,  valueToAdd);  [CE]  incompatible  types  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  valueToAdd);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  incompatible  types	34	None	replace
369	[BUG]  [BUGGY]  return  iChronology.set(partial,  instant  +  1,  values);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[])  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  instant  +  1,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  instant  +  1,  values);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[])	34	None	replace
370	[BUG]  [BUGGY]  return  iChronology.set(partial,  values,  instant);  [CE]  no  suitable  method  found  for  set(ReadablePartial,int[],long)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.set(partial,  values,  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.set(partial,  values,  instant);	  return    iChronology.set(partial,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,int[],long)	34	None	replace
371	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(iChronology.get(partial,  instant  +  1)!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
372	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)  ==  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)  ==  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(iChronology.get(partial,  instant  +  1)  ==  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
373	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(iChronology.get(partial,  instant  +  1)!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
374	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  ')'  expected	14	None	add
375	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
376	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)  ==  null)  {  return  iChronology.get(partial,  instant  +  1);  }  [CE]  unreachable  statement  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology.get(partial,  instant  +  1)  ==  null)  {  return  iChronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(iChronology.get(partial,  instant  +  1)  ==  null)  {  return  iChronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
377	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
378	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  if(diagram!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [CE]  ')'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  if(diagram!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(instant  >=  0)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  if(diagram!=  null)  {  return  chronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  ')'  expected	14	None	add
379	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  getBase();  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  BasicChronology  chronology  =  getBase();  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(instant  >=  0)  {  BasicChronology  chronology  =  getBase();  if(chronology!=  null)  {  return  chronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
380	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues().toArray(valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
381	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  fieldIndex  +  valueToAdd);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	15	replace
382	[BUG]  [BUGGY]  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  fieldIndex  +  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  fieldIndex  +  valueToAdd);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	15	replace
383	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  valueToAdd  +  instant);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	10	replace
384	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  instant);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd  +  instant);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  valueToAdd  +  instant);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	10	replace
385	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  i);  [CE]  cannot  find  symbol  i  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  i);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  i);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  i	31	None	replace
386	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  values[i]);  [CE]  cannot  find  symbol  i  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  values[i]);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  values[i]);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  i	31	None	replace
387	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  dataArea,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  dataArea,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  dataArea,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
388	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  null);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  null);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(instant,  null);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
389	[BUG]  [BUGGY]  valueToAdd  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  valueToAdd  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	valueToAdd  =  DateTimeUtils.getMonthOfYear(partial,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
390	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
391	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology.get(partial,  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
392	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  thisYear);  }  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  thisYear);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  thisYear);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
393	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
394	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  BasicChronology  chronology  =  DateTimeUtils.getInstance(partial.getChronology());  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
395	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex);  }  [CE]  unreachable  statement  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology.get(partial,  valueToAdd)!=  null)  {  return  iChronology.get(partial,  fieldIndex);  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
396	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  instant);  }  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial);  if(chronology!=  null)  {  return  chronology.get(partial,  fieldIndex,  values,  instant);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
397	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  BasicChronology  chronology  =  iChronology.get(partial,  fieldIndex);  if(chronology!=  null)  {  return  chronology.get(partial,  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
398	[BUG]  [BUGGY]  return  iChronology.get(instant,  values);  [CE]  no  suitable  method  found  for  get(long,int[])  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(instant,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(instant,  values);	  return    iChronology.get(instant,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  get(long,int[])	18	None	replace
399	[BUG]  [BUGGY]  return  iChronology.get(instant,  fieldIndex);  [CE]  no  suitable  method  found  for  get(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(instant,  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(instant,  fieldIndex);	  return    iChronology.get(instant,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  get(long,int)	18	None	replace
400	[BUG]  [BUGGY]  return  iChronology.get(instant,  valueToAdd);  [CE]  no  suitable  method  found  for  get(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(instant,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(instant,  valueToAdd);	  return    iChronology.get(instant,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  get(long,int)	18	None	replace
401	[BUG]  [BUGGY]  return  iChronology.get(instant,  fields[i]);  [CE]  cannot  find  symbol  fields  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(instant,  fields[i]);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(instant,  fields[i]);	  return    iChronology.get(instant,    instant);    	non-compiled	[CE]  cannot  find  symbol  fields	18	None	replace
402	[BUG]  [BUGGY]  return  iChronology.get(instant,  fields[i],  values);  [CE]  cannot  find  symbol  fields  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(instant,  fields[i],  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(instant,  fields[i],  values);	  return    iChronology.get(instant,    instant);    	non-compiled	[CE]  cannot  find  symbol  fields	18	None	replace
403	[BUG]  [BUGGY]  return  iChronology.get(instant,  null);  [CE]  no  suitable  method  found  for  get(long,<null>)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(instant,  null);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(instant,  null);	  return    iChronology.get(instant,    instant);    	non-compiled	[CE]  no  suitable  method  found  for  get(long,<null>)	18	None	replace
404	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldsIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  fieldsIndex  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldsIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldsIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	16	None	add
405	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  null);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  no  suitable  method  found  for  get(ReadablePartial,<null>)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  null);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  null);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,<null>)	16	None	add
406	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  initial);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  initial  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  initial);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  initial);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  initial	16	None	add
407	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  null);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  null);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  null);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
408	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  isize);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  isize);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  isize);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	3	None	replace
409	[BUG]  [BUGGY]  iChronology.set(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  cannot  find  symbol  fieldsIndex  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  fieldsIndex,  values,  valueToAdd);	      iChronology.set(instant,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	21	None	replace
410	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fieldIndex,  values);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fieldIndex,  values);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fieldIndex,  values);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[])	11	None	replace
411	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  values,  datePart);  [CE]  cannot  find  symbol  datePart  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  values,  datePart);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  values,  datePart);	  return    iChronology.get(partial,    instant,    values);    	non-compiled	[CE]  cannot  find  symbol  datePart	11	None	replace
412	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fieldIndex,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fieldIndex,  values,  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,long,int,int[],int)	13	None	replace
413	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant,  fieldsIndex,  values,  valueToAdd);  [CE]  cannot  find  symbol  fieldsIndex  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant,  fieldsIndex,  values,  valueToAdd);	  return    iChronology.get(partial,    instant,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fieldsIndex	13	None	replace
414	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYear(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValuesInYear(instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValuesInYear(instant);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
415	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYearMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getValuesInYearMonth();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getValuesInYearMonth();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
416	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getDayOfMonth();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getDayOfMonth();	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
417	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  thisYear);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  thisYear);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDayOfMonth(instant,  thisYear);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
418	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  isize);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(instant,  isize);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getDayOfMonth(instant,  isize);	      int[]    values    =    iChronology.getDayOfMonth(instant);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
419	[BUG]  [BUGGY]  return  iChronology.get(partial,  InstantType.DAY_OF_MONTH);  [CE]  cannot  find  symbol  InstantType  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  InstantType.DAY_OF_MONTH);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  InstantType.DAY_OF_MONTH);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol  InstantType	12	None	replace
420	[BUG]  [BUGGY]  return  iChronology.get(partial,  isize);  [CE]  cannot  find  symbol  isize  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  isize);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  isize);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol  isize	12	None	replace
421	[BUG]  [BUGGY]  return  iChronology.get(partial,  null);  [CE]  no  suitable  method  found  for  get(ReadablePartial,<null>)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  null);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  null);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReadablePartial,<null>)	12	None	replace
422	[BUG]  [BUGGY]  return  iChronology.get(partial,  InstantType.MILLIS_PER_SECOND);  [CE]  cannot  find  symbol  InstantType  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  InstantType.MILLIS_PER_SECOND);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  InstantType.MILLIS_PER_SECOND);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol  InstantType	12	None	replace
423	[BUG]  [BUGGY]  return  iChronology.get(partial,  InstantType.MILLIS_PER_DAY);  [CE]  cannot  find  symbol  InstantType  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  InstantType.MILLIS_PER_DAY);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  InstantType.MILLIS_PER_DAY);	  return    iChronology.get(instant,    partial);    	non-compiled	[CE]  cannot  find  symbol  InstantType	12	None	replace
424	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[i]);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
425	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  DateTimeUtils.getMonthOfYear(partial,  values[i]);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
426	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,long)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,long)	17	None	replace
427	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  missing  return  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  missing  return  statement	17	None	replace
428	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  fields,  valueToAdd);  }  [CE]  cannot  find  symbol  fields  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  fields,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  fields,  valueToAdd);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    	non-compiled	[CE]  cannot  find  symbol  fields	17	None	replace
429	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  isize);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  isize);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  isize);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	38	None	replace
430	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  thisYear);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  thisYear);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd,  thisYear);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    valueToAdd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	38	None	replace
431	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(instant,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	replace
432	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  fieldIndex,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	23	None	replace
433	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  iMax);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  iMax);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getDayOfMonth(partial,  instant,  iMax);	      iChronology    =    DateTimeUtils.getDayOfMonth(partial,    instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	replace
434	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(new  int[valueToAdd]);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getValues().toArray(new  int[valueToAdd]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getValues().toArray(new  int[valueToAdd]);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
435	[BUG]  [BUGGY]  int[]  values  =  getImmediatePartialValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getImmediatePartialValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getImmediatePartialValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
436	[BUG]  [BUGGY]  int[]  values  =  getDayOfMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getDayOfMonth();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getDayOfMonth();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
437	[BUG]  [BUGGY]  int[]  values  =  getMeanValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  getMeanValues();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  getMeanValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
438	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]  -  1);  [CE]  cannot  find  symbol  i  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]  -  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]  -  1);	      instant    =    partial.getFieldType(i).getField(iChronology).add(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
439	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  Instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  Instant  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  Instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  Instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  Instant	16	None	add
440	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd;  }  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd;  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    valueToAdd);    }    if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd;  }	  	non-compiled	[CE]  ')'  expected	16	None	add
441	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  isize);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  isize);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  isize);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	22	None	replace
442	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  isize);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  isize);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  isize);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
443	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  thisYear);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  thisYear);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i],  thisYear);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values[i]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	7	None	replace
444	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)  >=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)  >=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd)  >=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	30	None	add
445	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  unreachable  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology!=  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
446	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
447	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)  ==  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  incomparable  types:  int[]  and  int  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd)  ==  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd)  ==  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  incomparable  types:  int[]  and  int	30	None	add
448	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
449	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  unreachable  statement  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	30	None	add
450	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  valueToAdd);  if(iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    valueToAdd);    if(iChronology.get(partial,  instant  +  valueToAdd);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  valueToAdd);  }	  	non-compiled	[CE]  ')'  expected	30	None	add
451	[BUG]  [BUGGY]  int[]  values  =  partial.getValuesInYear();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int[]  values  =  partial.getValuesInYear();  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int[]  values  =  partial.getValuesInYear();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
452	[BUG]  [BUGGY]  if(instant  >=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	29	None	replace
453	[BUG]  [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  [CE]  missing  return  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  -1)  {  return  iChronology.get(partial,  valueToAdd);  }	  return    iChronology.get(partial,    valueToAdd);    	non-compiled	[CE]  missing  return  statement	29	None	replace
454	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  new  BasicMonthOfYearDateTimeField(instant,  fieldIndex,  values,  valueToAdd);  }  [CE]  constructor  BasicMonthOfYearDateTimeField  in  class  BasicMonthOfYearDateTimeField  cannot  be  applied  to  given  types;  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  new  BasicMonthOfYearDateTimeField(instant,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  new  BasicMonthOfYearDateTimeField(instant,  fieldIndex,  values,  valueToAdd);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  constructor  BasicMonthOfYearDateTimeField  in  class  BasicMonthOfYearDateTimeField  cannot  be  applied  to  given  types;	33	None	replace
455	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	33	8	replace
456	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	33	8	replace
457	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  0,  values[0],  values[1]);  }  [CE]  no  suitable  method  found  for  add(ReadablePartial,int,int,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  0,  values[0],  values[1]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  0,  values[0],  values[1]);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  add(ReadablePartial,int,int,int)	33	None	replace
458	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fields[fieldIndex],  values,  valueToAdd);  }  [CE]  cannot  find  symbol  fields  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fields[fieldIndex],  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fields[fieldIndex],  values,  valueToAdd);  }	  return    super.add(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  fields	33	None	replace
459	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	32	None	add
460	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	32	None	add
461	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	32	None	add
462	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
463	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  ==  0)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	32	None	add
464	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  ++i)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  ++i)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  ++i)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
465	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  int[]  values  =  partial.getValues();  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
466	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
467	[BUG]  [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    super.add(partial,    fieldIndex,    values,    valueToAdd);    if(instant  >=  0)  {  int[]  values  =  partial.getValues();  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	add
468	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  [CE]  unreachable  statement  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
469	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology  =  iChronology.get(partial,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  iChronology  =  iChronology.get(partial,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    iChronology  =  iChronology.get(partial,  valueToAdd);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	28	None	add
470	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology!=  null)  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
471	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  fieldIndex);  }  [CE]  unreachable  statement  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  fieldIndex);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology.get(partial,  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  fieldIndex);  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
472	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.get(partial,  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology.get(partial,  valueToAdd)  ==  null)  {  return  iChronology.get(partial,  fieldIndex);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
473	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.isYear(partial))  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.isYear(partial))  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology.isYear(partial))  {  return  iChronology.get(partial,  valueToAdd);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
474	[BUG]  [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.isYear(partial))  {  return  iChronology.get(partial,  valueToAdd);  }  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  valueToAdd);  if(iChronology.isYear(partial))  {  return  iChronology.get(partial,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    valueToAdd);    if(iChronology.isYear(partial))  {  return  iChronology.get(partial,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
475	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  valueToAdd,  values[i]);  [CE]  cannot  find  symbol  i  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  valueToAdd,  values[i]);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  valueToAdd,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
476	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  3);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  instant  +  3);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
477	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  3);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  3);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  3);	  return    iChronology.get(partial,    instant    +    1);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	replace
478	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	return  iChronology.get(partial,  instant  +  fieldIndex);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	8	replace
479	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  fieldIndex);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  fieldIndex);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  fieldIndex);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	31	8	replace
480	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  thisYear,  valueToAdd);  [CE]  cannot  find  symbol  thisYear  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  thisYear,  valueToAdd);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  thisYear,  valueToAdd);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  thisYear	31	None	replace
481	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  isize);  [CE]  cannot  find  symbol  isize  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  isize);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  isize);	  return    iChronology.get(partial,    instant    +    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  isize	31	None	replace
482	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  iChronology.get(partial,  instant  +  1))  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  iChronology.get(partial,  instant  +  1))  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(instant  >=  iChronology.get(partial,  instant  +  1))  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	add
483	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  iChronology.get(partial,  instant  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  iChronology  =  iChronology.get(partial,  instant  +  1);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    iChronology  =  iChronology.get(partial,  instant  +  1);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	14	None	add
484	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(instant  >=  0)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
485	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  iChronology.get(partial,  instant  +  1))  {  return  iChronology.get(partial,  instant  +  1);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(instant  >=  iChronology.get(partial,  instant  +  1))  {  return  iChronology.get(partial,  instant  +  1);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(instant  >=  iChronology.get(partial,  instant  +  1))  {  return  iChronology.get(partial,  instant  +  1);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	add
486	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  unreachable  statement  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1);  if(iChronology!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return    iChronology.get(partial,    instant    +    1);    if(iChronology!=  null)  {  return  iChronology.get(partial,  instant  +  1);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  unreachable  statement	14	None	add
487	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  int  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	int  iChronology  =  DateTimeUtils.getInstance(partial,  instant);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
488	[BUG]  [BUGGY]  Integer  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  Integer  iChronology  =  DateTimeUtils.getInstance(partial,  instant);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	Integer  iChronology  =  DateTimeUtils.getInstance(partial,  instant);	      iChronology    =    DateTimeUtils.getInstance(partial,    instant);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
489	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);  [CE]  cannot  find  symbol  i  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
490	[BUG]  [BUGGY]  Integer  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  Integer  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	Integer  iChronology  =  DateTimeUtils.getInstance(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getInstance(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
491	[BUG]  [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  [CE]  not  a  statement  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >=  0)  {  return  iChronology.get(partial,  instant,  values);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
492	[BUG]  [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant,  values);  }  [CE]  not  a  statement  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >>  0)  {  return  iChronology.get(partial,  instant,  values);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >>  0)  {  return  iChronology.get(partial,  instant,  values);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
493	[BUG]  [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  [CE]  not  a  statement  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	instant  >=  0)  {  return  iChronology.get(partial,  instant);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values,    instant);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
494	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[index]);  }  [CE]  cannot  find  symbol  index  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[index]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[index]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  cannot  find  symbol  index	20	None	replace
495	[BUG]  [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[it]);  }  [CE]  cannot  find  symbol  it  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[it]);  }  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	if(instant  >=  0)  {  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values[it]);  }	  if(instant    >=    0)    {    return    iChronology.get(partial,    instant);    }    else    {    return    super.add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  cannot  find  symbol  it	20	None	replace
496	[BUG]  [BUGGY]  iChronology.set(partial,  instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  instant,  values,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  instant,  values,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int[],int)	26	None	replace
497	[BUG]  [BUGGY]  iChronology.set(partial,  methodIndex,  values,  instant,  valueToAdd);  [CE]  cannot  find  symbol  methodIndex  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  methodIndex,  values,  instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  methodIndex,  values,  instant,  valueToAdd);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  methodIndex	26	None	replace
498	[BUG]  [BUGGY]  iChronology.set(partial,  instant,  valueToAdd,  values);  [CE]  no  suitable  method  found  for  set(ReadablePartial,long,int,int[])  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology.set(partial,  instant,  valueToAdd,  values);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology.set(partial,  instant,  valueToAdd,  values);	      iChronology.set(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  no  suitable  method  found  for  set(ReadablePartial,long,int,int[])	26	None	replace
499	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  isize);  [CE]  cannot  find  symbol  isize  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  isize);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values,  isize);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  cannot  find  symbol  isize	27	None	replace
500	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  datePart);  [CE]  cannot  find  symbol  datePart  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  datePart);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values,  datePart);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  cannot  find  symbol  datePart	27	None	replace
501	[BUG]  [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  index);  [CE]  cannot  find  symbol  index  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  return  iChronology.get(partial,  instant  +  1,  values,  index);  [BUGGY]    }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	return  iChronology.get(partial,  instant  +  1,  values,  index);	  return    iChronology.get(partial,    instant    +    1,    values);    	non-compiled	[CE]  cannot  find  symbol  index	27	None	replace
502	[BUG]  [BUGGY]  partial  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  partial  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	partial  =  DateTimeUtils.getMonthOfYear(instant,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
503	[BUG]  [BUGGY]  thisYear  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  cannot  find  symbol  thisYear  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  thisYear  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	thisYear  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  cannot  find  symbol  thisYear	5	None	replace
504	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  thisYear);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  thisYear);  [BUGGY]    return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values,  thisYear);	      iChronology    =    DateTimeUtils.getMonthOfYear(instant,    values);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	36	None	replace
