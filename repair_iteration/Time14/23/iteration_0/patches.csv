bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd,  iMax);  [CE]  no  suitable  method  found  for  add(long,int,int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd,  iMax);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd,  iMax);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  no  suitable  method  found  for  add(long,int,int)	45	None	replace
2	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  fieldIndex);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	add	instant  =  add(instant,  fieldIndex);	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
3	[BUG]  [BUGGY]  instant  =  add(instant,  fieldIndex);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  fieldIndex);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  fieldIndex);	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
4	[BUG]  [BUGGY]  instant  =  add(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  values[i]);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  values[i]);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  cannot  find  symbol  i	45	None	replace
5	[BUG]  [BUGGY]  instant  =  iChronology.add(instant,  valueToAdd);  [CE]  no  suitable  method  found  for  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  iChronology.add(instant,  valueToAdd);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  iChronology.add(instant,  valueToAdd);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  no  suitable  method  found  for  add(long,int)	45	None	replace
6	[BUG]  [BUGGY]  instant  =  add(instant,  fields[i]);  [CE]  cannot  find  symbol  fields  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  fields[i]);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  fields[i]);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  cannot  find  symbol  fields	45	None	replace
7	[BUG]  [BUGGY]  instant  =  iChronology.add(instant,  values);  [CE]  no  suitable  method  found  for  add(long,int[])  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  iChronology.add(instant,  values);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  iChronology.add(instant,  values);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  no  suitable  method  found  for  add(long,int[])	45	None	replace
8	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd,  i);  [CE]  cannot  find  symbol  i  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd,  i);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd,  i);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  cannot  find  symbol  i	45	None	replace
9	[BUG]  [BUGGY]  instant  =  add(instant,  fields[i],  valueToAdd);  [CE]  cannot  find  symbol  fields  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  fields[i],  valueToAdd);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  fields[i],  valueToAdd);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  cannot  find  symbol  fields	45	None	replace
10	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd,  iChronology);  [CE]  no  suitable  method  found  for  add(long,int,BasicChronology)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd,  iChronology);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd,  iChronology);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  no  suitable  method  found  for  add(long,int,BasicChronology)	45	None	replace
11	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	add	  	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
12	[BUG]  [BUGGY]    [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	  	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
13	[BUG]  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);		non-compiled	[CE]  cannot  find  symbol  i	46	None	add
14	[BUG]  [BUGGY]    int[]  values  =  iChronology.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int[]  values  =  iChronology.getValues();  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int[]  values  =  iChronology.getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
15	[BUG]  [BUGGY]    int[]  values  =  partial.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int[]  values  =  partial.getValues();  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int[]  values  =  partial.getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
16	[BUG]  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  cannot  find  symbol  i  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);		non-compiled	[CE]  cannot  find  symbol  i	46	None	add
17	[BUG]  [BUGGY]    int  valueToAdd  =  iChronology.getDayOfMonth(instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  iChronology.getDayOfMonth(instant);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  iChronology.getDayOfMonth(instant);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
18	[BUG]  [BUGGY]    int[]  values  =  iChronology.getValues(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int[]  values  =  iChronology.getValues(instant);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int[]  values  =  iChronology.getValues(instant);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
19	[BUG]  [BUGGY]    int[]  values  =  iChronology.getDayOfMonth(instant);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int[]  values  =  iChronology.getDayOfMonth(instant);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int[]  values  =  iChronology.getDayOfMonth(instant);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
20	[BUG]  [BUGGY]    int[]  values  =  iChronology.dayOfMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int[]  values  =  iChronology.dayOfMonth();  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int[]  values  =  iChronology.dayOfMonth();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
21	[BUG]  [BUGGY]    int[]  valueToAdd  =  iChronology.getValues();  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int[]  valueToAdd  =  iChronology.getValues();  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int[]  valueToAdd  =  iChronology.getValues();		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
22	[BUG]  [BUGGY]    int  valueToAdd  =  iChronology.getDayOfMonth(instant,  values[i]);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  iChronology.getDayOfMonth(instant,  values[i]);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  iChronology.getDayOfMonth(instant,  values[i]);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
23	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd  -  1);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	add	instant  =  add(instant,  valueToAdd  -  1);	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
24	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd  -  1);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd  -  1);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd  -  1);	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
25	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd,  iLeapMonth);  [CE]  no  suitable  method  found  for  add(long,int,int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd,  iLeapMonth);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd,  iLeapMonth);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  no  suitable  method  found  for  add(long,int,int)	45	None	replace
26	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd,  iHeapMonth);  [CE]  cannot  find  symbol  iHeapMonth  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd,  iHeapMonth);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd,  iHeapMonth);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  cannot  find  symbol  iHeapMonth	45	None	replace
27	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd  +  1);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	add	instant  =  add(instant,  valueToAdd  +  1);	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
28	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd  +  1);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd  +  1);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd  +  1);	instant  =  add(instant,  valueToAdd);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	45	15	replace
29	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd,  fieldIndex);  [CE]  no  suitable  method  found  for  add(long,int,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd,  fieldIndex);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd,  fieldIndex);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  no  suitable  method  found  for  add(long,int,int)	45	None	replace
30	[BUG]  [BUGGY]    int  valueToAdd  =  iChronology.getYear(instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  iChronology.getYear(instant);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  iChronology.getYear(instant);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
31	[BUG]  [BUGGY]    int  valueToAdd  =  iChronology.getMonthOfYear(instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  iChronology.getMonthOfYear(instant);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  iChronology.getMonthOfYear(instant);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
32	[BUG]  [BUGGY]    int  valueToAdd  =  iChronology.getDayOfMonth(instant,  fieldIndex);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  iChronology.getDayOfMonth(instant,  fieldIndex);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  iChronology.getDayOfMonth(instant,  fieldIndex);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
33	[BUG]  [BUGGY]    int  valueToAdd  =  partial.getValue(i);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  partial.getValue(i);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  partial.getValue(i);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
34	[BUG]  [BUGGY]    int  valueToAdd  =  iChronology.dayOfMonth().get(instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  iChronology.dayOfMonth().get(instant);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  iChronology.dayOfMonth().get(instant);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
35	[BUG]  [BUGGY]    int  valueToAdd  =  getValue(instant);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  getValue(instant);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  getValue(instant);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
36	[BUG]  [BUGGY]  instant  =  add(instant,  valueToAdd,  thisYear);  [CE]  cannot  find  symbol  thisYear  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]  instant  =  add(instant,  valueToAdd,  thisYear);  [BUGGY]  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	instant  =  add(instant,  valueToAdd,  thisYear);	instant  =  add(instant,  valueToAdd);  	non-compiled	[CE]  cannot  find  symbol  thisYear	45	None	replace
37	[BUG]  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [CE]  cannot  find  symbol  i  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);		non-compiled	[CE]  cannot  find  symbol  i	46	None	add
38	[BUG]  [BUGGY]    int  valueToAdd  =  iChronology.getMonthOfYear(instant,  values[i]);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int  valueToAdd  =  iChronology.getMonthOfYear(instant,  values[i]);  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int  valueToAdd  =  iChronology.getMonthOfYear(instant,  values[i]);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
39	[BUG]  [BUGGY]    int[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    int[]  values  =  getValues();  [BUGGY]  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	    int[]  values  =  getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	46	None	add
