bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
2	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
3	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
4	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisLeapMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisLeapMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisLeapMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
5	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
6	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
7	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
8	[BUG]  [BUGGY]      iChronology.setYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.setYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.setYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
9	[BUG]  [BUGGY]      thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  possible  loss  of  precision	17	None	add
10	[BUG]  [BUGGY]      iChronology.setDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.setDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.setDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
11	[BUG]  [BUGGY]      iChronology.addDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.addDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.addDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
12	[BUG]  [BUGGY]      iChronology.setYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.setYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.setYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
13	[BUG]  [BUGGY]      iChronology.setDaysInYearMonth(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.setDaysInYearMonth(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.setDaysInYearMonth(yearToUse,  monthToUse,  maxDay);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
14	[BUG]  [BUGGY]      int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	17	None	add
15	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  thisYear,  thisMonth);  [CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  months,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)	36	None	replace
16	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	36	9	replace
17	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisMonth);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	36	9	replace
18	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth,  maxDay);  [CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth,  maxDay);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)	36	None	replace
19	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  maxDay);  [timeout]  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  maxDay);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[timeout]	36	None	replace
20	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  thisMonth);  [timeout]  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[timeout]	36	None	replace
21	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisLeapMonth,  thisMonth);  [CE]  cannot  find  symbol  thisLeapMonth  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisLeapMonth,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisLeapMonth,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  cannot  find  symbol  thisLeapMonth	36	None	replace
22	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  days,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  days  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  days,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  days,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  cannot  find  symbol  days	36	None	replace
23	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  hours,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  hours  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  hours,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  hours,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  cannot  find  symbol  hours	36	None	replace
24	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  dayToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    MIN;    dayToUse  =  MIN;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	add
25	[BUG]  [BUGGY]  dayToUse  =  MIN;  dayToUse  =  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  dayToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    dayToUse  =  MIN;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	add
26	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	8	None	add
27	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
28	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
29	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	8	None	add
30	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [CE]  cannot  find  symbol  datePart  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	8	None	add
31	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [CE]  cannot  find  symbol  datePart  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	8	None	add
32	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	add
33	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	add
34	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
35	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
36	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
37	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
38	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  timePart  +  1;  }  [CE]  cannot  find  symbol  datePart  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  timePart  +  1;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  timePart  +  1;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	8	None	add
39	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	41	None	replace
40	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
41	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	41	None	replace
42	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse);  [CE]  cannot  find  symbol  month  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  cannot  find  symbol  month	41	None	replace
43	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysMonthDayMillis(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysMonthDayMillis(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysMonthDayMillis(yearToUse,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
44	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iLeapMonth;    dayToUse  =  iLeapMonth;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	1	8	add
45	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iLeapMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    dayToUse  =  iLeapMonth;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	1	8	add
46	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  weekToUse  =  iLeapMonth;  [CE]  cannot  find  symbol  weekToUse  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  weekToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    weekToUse  =  iLeapMonth;	  	non-compiled	[CE]  cannot  find  symbol  weekToUse	1	None	add
47	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  monthToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iLeapMonth;    monthToUse  =  iLeapMonth;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	1	12	add
48	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  monthToUse  =  iLeapMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  monthToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    monthToUse  =  iLeapMonth;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	1	12	add
49	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iHeapMonth;  [CE]  cannot  find  symbol  iHeapMonth  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iHeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    dayToUse  =  iHeapMonth;	  	non-compiled	[CE]  cannot  find  symbol  iHeapMonth	1	None	add
50	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  DayToUse  =  iLeapMonth;  [CE]  cannot  find  symbol  DayToUse  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  DayToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    DayToUse  =  iLeapMonth;	  	non-compiled	[CE]  cannot  find  symbol  DayToUse	1	None	add
51	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  minuteToUse  =  iLeapMonth;  [CE]  cannot  find  symbol  minuteToUse  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  minuteToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    minuteToUse  =  iLeapMonth;	  	non-compiled	[CE]  cannot  find  symbol  minuteToUse	1	None	add
52	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  yearToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iLeapMonth;    yearToUse  =  iLeapMonth;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	1	8	add
53	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  yearToUse  =  iLeapMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  yearToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    yearToUse  =  iLeapMonth;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	1	8	add
54	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iLaapMonth;  [CE]  cannot  find  symbol  iLaapMonth  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iLaapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    dayToUse  =  iLaapMonth;	  	non-compiled	[CE]  cannot  find  symbol  iLaapMonth	1	None	add
55	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  hourToUse  =  iLeapMonth;  [CE]  cannot  find  symbol  hourToUse  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  hourToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    hourToUse  =  iLeapMonth;	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	1	None	add
56	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1L;  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1L;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  1L;	  dayToUse    =    maxDay    -    1;    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
57	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  /  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  /  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	8	replace
58	[BUG]  [BUGGY]  dayToUse  =  maxDay  /  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  /  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  /  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	8	replace
59	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  2;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  -  2;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
60	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  2;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  2;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  2;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
61	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  -  1  +  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	8	replace
62	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  1  +  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	8	replace
63	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  -  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
64	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  -  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  -  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
65	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  3;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  -  3;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
66	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  3;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  3;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  3;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
67	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iMax  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iMax  -  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
68	[BUG]  [BUGGY]  dayToUse  =  iMax  -  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iMax  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iMax  -  1;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
69	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	37	8	add
70	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	37	8	add
71	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [timeout]  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	non-compiled	[timeout]	37	None	add
72	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  weekToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [timeout]  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  weekToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    weekToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	non-compiled	[timeout]	37	None	add
73	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  DayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  DayToUse  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  DayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    DayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol  DayToUse	37	None	add
74	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  yearToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    yearToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	37	8	add
75	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  yearToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  yearToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    yearToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	37	8	add
76	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	37	8	add
77	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	37	8	add
78	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getYearMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getYearMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
79	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
80	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
81	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
82	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
83	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
84	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [CE]  cannot  find  symbol  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
85	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [CE]  cannot  find  symbol  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
86	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [CE]  cannot  find  symbol  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
87	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iDayOfMonth  :  iDayOfMonth;  [CE]  incompatible  types  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iDayOfMonth  :  iDayOfMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iDayOfMonth  :  iDayOfMonth;	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  incompatible  types	14	None	replace
88	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iDayOfMonth  :  iLeapMonth;  [CE]  incompatible  types  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iDayOfMonth  :  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iDayOfMonth  :  iLeapMonth;	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  incompatible  types	14	None	replace
89	[BUG]  [BUGGY]  dayToUse  =  minDay;  [CE]  cannot  find  symbol  minDay  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  minDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  minDay;	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  cannot  find  symbol  minDay	14	None	replace
90	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iDayOfMonth  :  iDayOfYear;  [CE]  incompatible  types  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iDayOfMonth  :  iDayOfYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iDayOfMonth  :  iDayOfYear;	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  incompatible  types	14	None	replace
91	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iDayOfYear  :  iDayOfMonth;  [CE]  incompatible  types  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iDayOfYear  :  iDayOfMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iDayOfYear  :  iDayOfMonth;	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  incompatible  types	14	None	replace
92	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
93	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  months,  thisYear,  thisMonth);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  months,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  months,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
94	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  thisYear,  thisMonth);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
95	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  days);  [CE]  cannot  find  symbol  days  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  days);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  days);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  cannot  find  symbol  days	50	None	replace
96	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  monthToUse,  thisMonth);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  monthToUse,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  monthToUse,  thisMonth);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
97	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  maxDay,  thisMonth);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  maxDay,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  maxDay,  thisMonth);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
98	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  monthToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  monthToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
99	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
100	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  maxDay,  thisYear,  thisMonth);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  maxDay,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  maxDay,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
101	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  dayToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    -=    maxDay;    dayToUse  -=  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	8	add
102	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  dayToUse  -=  maxDay;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  dayToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    dayToUse  -=  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	8	add
103	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
104	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	12	add
105	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	12	add
106	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
107	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
108	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [CE]  cannot  find  symbol  datePart  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
109	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [CE]  cannot  find  symbol  datePart  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
110	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	12	add
111	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  yearToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	12	add
112	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  }  [CE]  cannot  find  symbol  datePart  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
113	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
114	[BUG]  [BUGGY]  dayToUse  =  maxDay?  MIN  :  MIN;  [CE]  incompatible  types  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  MIN  :  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  MIN  :  MIN;	  dayToUse    =    MIN;    	non-compiled	[CE]  incompatible  types	9	None	replace
115	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  MIN;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	12	replace
116	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  MIN;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	12	replace
117	[BUG]  [BUGGY]  dayToUse  =  maxDay?  MIN  :  min;  [CE]  incompatible  types  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  MIN  :  min;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  MIN  :  min;	  dayToUse    =    MIN;    	non-compiled	[CE]  incompatible  types	9	None	replace
118	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  MIN;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	8	replace
119	[BUG]  [BUGGY]  dayToUse  -=  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  MIN;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	8	replace
120	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  /  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  /  MIN;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	8	replace
121	[BUG]  [BUGGY]  dayToUse  =  maxDay  /  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  /  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  /  MIN;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	8	replace
122	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  yearToUse,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  yearToUse,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
123	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
124	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
125	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
126	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  yearToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  yearToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  yearToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
127	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
128	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(thisYear,  yearToUse,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(thisYear,  yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(thisYear,  yearToUse,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
129	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months,  dayToUse,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
130	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(timePart,  yearToUse,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(timePart,  yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(timePart,  yearToUse,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
131	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	52	None	replace
132	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  yearToUse,  monthToUse,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  yearToUse,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	52	None	replace
133	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	52	None	replace
134	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay,  thisYear);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay,  thisYear);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay,  thisYear);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	52	None	replace
135	[BUG]  [BUGGY]  weekToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  cannot  find  symbol  weekToUse  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  weekToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	weekToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  weekToUse	52	None	replace
136	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(hourToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  hourToUse  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(hourToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(hourToUse,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  hourToUse	52	None	replace
137	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayOUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  dayOUse  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayOUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(dayOUse,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  dayOUse	52	None	replace
138	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iLeapMonth  :  iLeapMonth;  [CE]  incompatible  types  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iLeapMonth  :  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iLeapMonth  :  iLeapMonth;	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  incompatible  types	7	None	replace
139	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iMax;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iMax;	  dayToUse    =    iLeapMonthDayMillis;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	7	12	replace
140	[BUG]  [BUGGY]  dayToUse  =  iMax;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iMax;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iMax;	  dayToUse    =    iLeapMonthDayMillis;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	7	12	replace
141	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonth;  [CE]  incompatible  types  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonth;	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  incompatible  types	7	None	replace
142	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  -  iLeapMonth;	  dayToUse    =    iLeapMonthDayMillis;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	7	12	replace
143	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  iLeapMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  iLeapMonth;	  dayToUse    =    iLeapMonthDayMillis;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	7	12	replace
144	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonthDayMillis;  [CE]  incompatible  types  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonthDayMillis;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonthDayMillis;	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  incompatible  types	7	None	replace
145	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonthDay;  [CE]  incompatible  types  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonthDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iLeapMonthDayMillis  :  iLeapMonthDay;	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  incompatible  types	7	None	replace
146	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
147	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
148	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	51	None	replace
149	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
150	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
151	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  dayToUse);  [CE]  cannot  find  symbol  month  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  month	51	None	replace
152	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse);  [CE]  cannot  find  symbol  days  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  days	51	None	replace
153	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
154	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  maxDay  +  1;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
155	[BUG]  [BUGGY]  dayToUse  -=  maxDay  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  maxDay  +  1;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
156	[BUG]  [BUGGY]  dayToUse  -=  minDay;  [CE]  cannot  find  symbol  minDay  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  minDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  minDay;	  dayToUse    -=    maxDay;    	non-compiled	[CE]  cannot  find  symbol  minDay	11	None	replace
157	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  thisYear;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
158	[BUG]  [BUGGY]  dayToUse  -=  thisYear;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  thisYear;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
159	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  monthToUse;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  monthToUse;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
160	[BUG]  [BUGGY]  dayToUse  -=  monthToUse;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  monthToUse;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  monthToUse;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
161	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  1;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
162	[BUG]  [BUGGY]  dayToUse  -=  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  1;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
163	[BUG]  [BUGGY]  dayToUse  -=  maxDay,  monthToUse);  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  maxDay,  monthToUse);	  dayToUse    -=    maxDay;    	non-compiled	[CE]  ';'  expected	11	None	replace
164	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  maxDay  -  1;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
165	[BUG]  [BUGGY]  dayToUse  -=  maxDay  -  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  maxDay  -  1;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
166	[BUG]  [BUGGY]  dayToUse  -=  maxDay,  monthToUse;  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay,  monthToUse;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  maxDay,  monthToUse;	  dayToUse    -=    maxDay;    	non-compiled	[CE]  ';'  expected	11	None	replace
167	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
168	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
169	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  monthToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [timeout]  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  monthToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    monthToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	non-compiled	[timeout]	35	None	add
170	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  weekToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [timeout]  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  weekToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    weekToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	non-compiled	[timeout]	35	None	add
171	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  DayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  DayToUse  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  DayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    DayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	non-compiled	[CE]  cannot  find  symbol  DayToUse	35	None	add
172	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  yearToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    yearToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
173	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  yearToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  yearToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    yearToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
174	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  hourToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  hourToUse  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  hourToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    hourToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	35	None	add
175	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  minuteToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  minuteToUse  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  minuteToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    minuteToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	non-compiled	[CE]  cannot  find  symbol  minuteToUse	35	None	add
176	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  daysToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  daysToUse  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  daysToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    daysToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);	  	non-compiled	[CE]  cannot  find  symbol  daysToUse	35	None	add
177	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  iLeapMonth;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
178	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  iLeapMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  iLeapMonth;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
179	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  +  MIN;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
180	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  MIN;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
181	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  *  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  *  maxDay;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
182	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  *  maxDay;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  *  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  *  maxDay;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
183	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  +  thisYear;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
184	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  thisYear;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  thisYear;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
185	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  iMax;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  +  iMax;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
186	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  iMax;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  iMax;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  iMax;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
187	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  +  1;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
188	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  1;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
189	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iMax  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iMax  +  maxDay;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
190	[BUG]  [BUGGY]  dayToUse  =  iMax  +  maxDay;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iMax  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iMax  +  maxDay;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
191	[BUG]  [BUGGY]  dayToUse  =  iMin  +  maxDay;  [CE]  cannot  find  symbol  iMin  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iMin  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iMin  +  maxDay;	  dayToUse    =    iLeapMonth    +    maxDay;    	non-compiled	[CE]  cannot  find  symbol  iMin	13	None	replace
192	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
193	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
194	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	24	None	replace
195	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	24	None	replace
196	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	24	None	replace
197	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
198	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [CE]  cannot  find  symbol  days  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  days	24	None	replace
199	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)	49	None	replace
200	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  yearToUse,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(monthToUse,  yearToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)	49	None	replace
201	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(instant,  yearToUse,  monthToUse,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(long,int,int,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(instant,  yearToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(instant,  yearToUse,  monthToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(long,int,int,int)	49	None	replace
202	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)	49	None	replace
203	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  thisYear);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  thisYear);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)	49	None	replace
204	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  dayToUse,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(monthToUse,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)	49	None	replace
205	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  thisYear,  monthToUse,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  thisYear,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(monthToUse,  thisYear,  monthToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)	49	None	replace
206	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(dayToUse,  monthToUse,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(dayToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(dayToUse,  monthToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)	49	None	replace
207	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  days,  maxDay);  [CE]  cannot  find  symbol  days  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  days,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  days,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  days	49	None	replace
208	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	21	None	replace
209	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	21	None	replace
210	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	21	None	replace
211	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  thisYear,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  thisYear,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  thisYear,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	21	None	replace
212	[BUG]  [BUGGY]  weekToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  weekToUse  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  weekToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	weekToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  weekToUse	30	None	replace
213	[BUG]  [BUGGY]  minuteToUse  =  iChronology.getYearMonthDayMillis(minuteToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  minuteToUse  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  minuteToUse  =  iChronology.getYearMonthDayMillis(minuteToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	minuteToUse  =  iChronology.getYearMonthDayMillis(minuteToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  minuteToUse	30	None	replace
214	[BUG]  [BUGGY]  minuteToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [CE]  cannot  find  symbol  minuteToUse  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  minuteToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	minuteToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  minuteToUse	30	None	replace
215	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  months,  thisYear,  thisMonth);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  months,  thisYear,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  months,  thisYear,  thisMonth);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
216	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  months);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  months);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  months);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
217	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
218	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisLeapMonth);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisLeapMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisLeapMonth);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
219	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  dayToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  dayToUse);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
220	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  days);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  days);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
221	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisDay,  thisMonth);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisDay,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisDay,  thisMonth);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
222	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  year);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  year);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  year);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
223	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
224	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
225	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
226	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
227	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
228	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
229	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
230	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	20	None	replace
231	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	20	None	replace
232	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	20	None	replace
233	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	20	None	replace
234	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	20	None	replace
235	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	20	None	replace
236	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	8	replace
237	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	8	replace
238	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse);  [timeout]  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  yearToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[timeout]	38	None	replace
239	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(month,  yearToUse);  [timeout]  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(month,  yearToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(month,  yearToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[timeout]	38	None	replace
240	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  year);  [CE]  cannot  find  symbol  year  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  year);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(monthToUse,  year);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[CE]  cannot  find  symbol  year	38	None	replace
241	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  monthToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	38	None	replace
242	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  monthToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  monthToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	38	None	replace
243	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
244	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
245	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
246	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	26	None	replace
247	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  days  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse,  maxDay);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  days	26	None	replace
248	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	26	None	replace
249	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	26	None	replace
250	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
251	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
252	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  months,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  months,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  months,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
253	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
254	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(instant,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(instant,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(instant,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
255	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
256	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(thisYear,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(thisYear,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
257	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
258	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
259	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
260	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
261	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  maxDay);  [CE]  cannot  find  symbol  month  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  month	29	None	replace
262	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	29	None	replace
263	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1L;  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1L;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  1L;	  dayToUse    =    maxDay    +    1;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
264	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  2;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  2;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
265	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  2;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  2;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  2;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
266	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  3;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  3;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
267	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  3;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  3;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  3;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
268	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  1  -  1;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
269	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1  -  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  1  -  1;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
270	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  *  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  *  1;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
271	[BUG]  [BUGGY]  dayToUse  =  maxDay  *  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  *  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  *  1;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
272	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  dayToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    thisYear;    dayToUse  =  thisYear;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	add
273	[BUG]  [BUGGY]  dayToUse  =  thisYear;  dayToUse  =  thisYear;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  dayToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    dayToUse  =  thisYear;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	add
274	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [CE]  cannot  find  symbol  datePart  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
275	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [CE]  cannot  find  symbol  datePart  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
276	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	12	add
277	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	12	add
278	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	12	add
279	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	12	add
280	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
281	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }  [CE]  cannot  find  symbol  datePart  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
282	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  thisMonth);  }  [CE]  cannot  find  symbol  datePart  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  thisMonth);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
283	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	12	add
284	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	12	add
285	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  }  [CE]  cannot  find  symbol  datePart  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  >  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
286	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  dayToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    maxDay    +    1;    dayToUse  =  maxDay  +  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	3	8	add
287	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  dayToUse  =  maxDay  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  dayToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    dayToUse  =  maxDay  +  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	3	8	add
288	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  weekToUse  =  maxDay  +  1;  [CE]  cannot  find  symbol  weekToUse  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  weekToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    weekToUse  =  maxDay  +  1;	  	non-compiled	[CE]  cannot  find  symbol  weekToUse	3	None	add
289	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  DayToUse  =  maxDay  +  1;  [CE]  cannot  find  symbol  DayToUse  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  DayToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    DayToUse  =  maxDay  +  1;	  	non-compiled	[CE]  cannot  find  symbol  DayToUse	3	None	add
290	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  maxDay  +  1;  [timeout]  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    monthToUse  =  maxDay  +  1;	  	non-compiled	[timeout]	3	None	add
291	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  minuteToUse  =  maxDay  +  1;  [timeout]  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  minuteToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    minuteToUse  =  maxDay  +  1;	  	non-compiled	[timeout]	3	None	add
292	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  yearToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    maxDay    +    1;    yearToUse  =  maxDay  +  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	3	8	add
293	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  yearToUse  =  maxDay  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  yearToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    yearToUse  =  maxDay  +  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	3	8	add
294	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  dayToUse  =  minDay  +  1;  [CE]  cannot  find  symbol  minDay  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  dayToUse  =  minDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    dayToUse  =  minDay  +  1;	  	non-compiled	[CE]  cannot  find  symbol  minDay	3	None	add
295	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  hourToUse  =  maxDay  +  1;  [CE]  cannot  find  symbol  hourToUse  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  hourToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    hourToUse  =  maxDay  +  1;	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	3	None	add
296	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  dayToUse);  [timeout]  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[timeout]	40	None	replace
297	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse,  maxDay);  [timeout]  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[timeout]	40	None	replace
298	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [timeout]  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [timeout]  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  [timeout]	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
299	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  maxDay);  [timeout]  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  months,  maxDay);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[timeout]	40	None	replace
300	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse);  [timeout]  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[timeout]	40	None	replace
301	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  dayToUse,  maxDay);  [CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  months,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)	40	None	replace
302	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  dayToUse);  [timeout]  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    months,    dayToUse);    [timeout]    	non-compiled	[timeout]	42	None	replace
303	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  thisYear,  dayToUse);  [timeout]  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  months,  thisYear,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  months,  thisYear,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    months,    dayToUse);    [timeout]    	non-compiled	[timeout]	42	None	replace
304	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  dayToUse);  [timeout]  [CE]  illegal  start  of  expression  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  dayToUse);  [timeout]  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  dayToUse);  [timeout]	  dayToUse    =    iChronology.getDayOfMonth(instant,    months,    dayToUse);    [timeout]    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
305	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  year);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  year);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  year);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	22	None	replace
306	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	22	None	replace
307	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	22	None	replace
308	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
309	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	31	None	replace
310	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  dayToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
311	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
312	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
313	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	31	None	replace
314	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
315	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	48	None	replace
316	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iLeapMonth    +    maxDay;    dayToUse  =  iLeapMonth  +  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	12	8	add
317	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iLeapMonth  +  maxDay;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    dayToUse  =  iLeapMonth  +  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	12	8	add
318	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  weekToUse  =  iLeapMonth  +  maxDay;  [CE]  cannot  find  symbol  weekToUse  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  weekToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    weekToUse  =  iLeapMonth  +  maxDay;	  	non-compiled	[CE]  cannot  find  symbol  weekToUse	12	None	add
319	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  DayToUse  =  iLeapMonth  +  maxDay;  [CE]  cannot  find  symbol  DayToUse  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  DayToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    DayToUse  =  iLeapMonth  +  maxDay;	  	non-compiled	[CE]  cannot  find  symbol  DayToUse	12	None	add
320	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iLeapMonth  +  minDay;  [CE]  cannot  find  symbol  minDay  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iLeapMonth  +  minDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    dayToUse  =  iLeapMonth  +  minDay;	  	non-compiled	[CE]  cannot  find  symbol  minDay	12	None	add
321	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  monthToUse  =  iLeapMonth  +  maxDay;  [timeout]  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  monthToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    monthToUse  =  iLeapMonth  +  maxDay;	  	non-compiled	[timeout]	12	None	add
322	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iHeapMonth  +  maxDay;  [timeout]  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iHeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    dayToUse  =  iHeapMonth  +  maxDay;	  	non-compiled	[timeout]	12	None	add
323	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iLeapMonth  +  maxDay);  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  dayToUse  =  iLeapMonth  +  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    dayToUse  =  iLeapMonth  +  maxDay);	  	non-compiled	[CE]  ';'  expected	12	None	add
324	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  yearToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iLeapMonth    +    maxDay;    yearToUse  =  iLeapMonth  +  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	12	8	add
325	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  yearToUse  =  iLeapMonth  +  maxDay;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  yearToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    yearToUse  =  iLeapMonth  +  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	12	8	add
326	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  maxDay,  monthToUse);  [CE]  possible  loss  of  precision  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  maxDay,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  maxDay,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
327	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	39	None	replace
328	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
329	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  thisYear,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  thisYear,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  thisYear,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
330	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  1,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  1,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  1,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
331	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  yearToUse,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  yearToUse,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
332	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  months,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  months,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  months,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
333	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  dayToUse);  [CE]  cannot  find  symbol  month  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(month,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  cannot  find  symbol  month	39	None	replace
334	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	23	None	replace
335	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  monthToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
336	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  dayToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
337	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	23	None	replace
338	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
339	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [CE]  possible  loss  of  precision  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  yearToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
340	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  thisYear);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	23	None	replace
341	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  thisMonth);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	27	None	replace
342	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
343	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  thisMonth);  [CE]  possible  loss  of  precision  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
344	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisMonth);  [CE]  possible  loss  of  precision  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(thisYear,  monthToUse,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
345	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear,  thisMonth);  [CE]  possible  loss  of  precision  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  thisYear,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
346	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisMonth);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	27	None	replace
347	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear);  [CE]  possible  loss  of  precision  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
348	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  thisMonth);  [CE]  possible  loss  of  precision  [FE]                                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
349	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  dayToUse);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
350	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  monthToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  monthToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
351	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  thisYear);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  thisYear);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
352	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  dayToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  dayToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
353	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(month,  monthToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(month,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(month,  monthToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
354	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  monthToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  monthToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
355	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  yearToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  yearToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
356	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  thisMonth);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  thisMonth);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
357	[BUG]  [BUGGY]  dayToUse  =  maxDay?  thisYear  :  thisYear;  [CE]  incompatible  types  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  thisYear  :  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  thisYear  :  thisYear;	  dayToUse    =    thisYear;    	non-compiled	[CE]  incompatible  types	16	None	replace
358	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  thisMonth;	  dayToUse    =    thisYear;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	16	12	replace
359	[BUG]  [BUGGY]  dayToUse  =  thisMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  thisMonth;	  dayToUse    =    thisYear;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	16	12	replace
360	[BUG]  [BUGGY]  dayToUse  =  thisYear,  maxDay);  [CE]  ';'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  thisYear,  maxDay);	  dayToUse    =    thisYear;    	non-compiled	[CE]  ';'  expected	16	None	replace
361	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  thisYear;	  dayToUse    =    thisYear;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	16	12	replace
362	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  thisYear;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  thisYear;	  dayToUse    =    thisYear;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	16	12	replace
363	[BUG]  [BUGGY]  dayToUse  =  thisYear,  maxDay;  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear,  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  thisYear,  maxDay;	  dayToUse    =    thisYear;    	non-compiled	[CE]  ';'  expected	16	None	replace
364	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  thisYear  +  1;	  dayToUse    =    thisYear;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	16	12	replace
365	[BUG]  [BUGGY]  dayToUse  =  thisYear  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  thisYear  +  1;	  dayToUse    =    thisYear;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	16	12	replace
366	[BUG]  [BUGGY]  weekToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  weekToUse  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  weekToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	weekToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  weekToUse	33	None	replace
367	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
368	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay,  thisYear);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
369	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
370	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  monthToUse,  maxDay);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
371	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  dayToUse,  maxDay);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
372	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
373	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  dayToUse,  maxDay);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
374	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  iLeapMonth;	  dayToUse    =    iLeapMonth;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	12	replace
375	[BUG]  [BUGGY]  dayToUse  -=  iLeapMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  iLeapMonth;	  dayToUse    =    iLeapMonth;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	12	replace
376	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iLeapMonth  :  iMax;  [CE]  incompatible  types  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iLeapMonth  :  iMax;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iLeapMonth  :  iMax;	  dayToUse    =    iLeapMonth;    	non-compiled	[CE]  incompatible  types	2	None	replace
377	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  maxDay,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  maxDay,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
378	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  monthToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  monthToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
379	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(monthToUse,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
380	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  months,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
381	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(instant,  monthToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(instant,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(instant,  monthToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
382	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  dayToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    maxDay    -    1;    dayToUse  =  maxDay  -  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	8	add
383	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  dayToUse  =  maxDay  -  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  dayToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    dayToUse  =  maxDay  -  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	8	add
384	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  DayToUse  =  maxDay  -  1;  [CE]  cannot  find  symbol  DayToUse  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  DayToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    DayToUse  =  maxDay  -  1;	  	non-compiled	[CE]  cannot  find  symbol  DayToUse	5	None	add
385	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  weekToUse  =  maxDay  -  1;  [CE]  cannot  find  symbol  weekToUse  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  weekToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    weekToUse  =  maxDay  -  1;	  	non-compiled	[CE]  cannot  find  symbol  weekToUse	5	None	add
386	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  monthToUse  =  maxDay  -  1;  [timeout]  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  monthToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    monthToUse  =  maxDay  -  1;	  	non-compiled	[timeout]	5	None	add
387	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  minuteToUse  =  maxDay  -  1;  [timeout]  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  minuteToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    minuteToUse  =  maxDay  -  1;	  	non-compiled	[timeout]	5	None	add
388	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  dayToUse  =  minDay  -  1;  [CE]  cannot  find  symbol  minDay  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  dayToUse  =  minDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    dayToUse  =  minDay  -  1;	  	non-compiled	[CE]  cannot  find  symbol  minDay	5	None	add
389	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  yearToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    maxDay    -    1;    yearToUse  =  maxDay  -  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	8	add
390	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  yearToUse  =  maxDay  -  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  yearToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    yearToUse  =  maxDay  -  1;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	8	add
391	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  hourToUse  =  maxDay  -  1;  [CE]  cannot  find  symbol  hourToUse  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  hourToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    hourToUse  =  maxDay  -  1;	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	5	None	add
392	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  daysToUse  =  maxDay  -  1;  [CE]  cannot  find  symbol  daysToUse  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  daysToUse  =  maxDay  -  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    daysToUse  =  maxDay  -  1;	  	non-compiled	[CE]  cannot  find  symbol  daysToUse	5	None	add
393	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  yearToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	34	None	replace
394	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	34	None	replace
395	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  maxDay);  [CE]  cannot  find  symbol  month  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(month,  yearToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  month	34	None	replace
396	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(day,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  day  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(day,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(day,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  day	34	None	replace
397	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	34	None	replace
398	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(instant,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	34	None	replace
399	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [CE]  cannot  find  symbol  datePart  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
400	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	add
401	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	add
402	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [CE]  cannot  find  symbol  datePart  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
403	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
404	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  break;  }  [CE]  cannot  find  symbol  datePart  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  break;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  break;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	15	None	add
405	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayM  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayM  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayM	  	non-compiled	[CE]  ';'  expected	15	None	add
406	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis(  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis(  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis(	  	non-compiled	[CE]  ')'  expected	15	None	add
407	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis	  	non-compiled	[CE]  ';'  expected	15	None	add
408	[BUG]  [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis(yearToUs  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis(yearToUs  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    if(dayToUse  ==  thisYear)  {  dayToUse  =  thisYear;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  datePart  =  iChronology.getYearMonthDayMillis(yearToUs	  	non-compiled	[CE]  ')'  expected	15	None	add
409	[BUG]  [BUGGY]      iChronology.setYearMonth(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.setYearMonth(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.setYearMonth(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
410	[BUG]  [BUGGY]      iChronology.setMonthOfYear(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.setMonthOfYear(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.setMonthOfYear(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
411	[BUG]  [BUGGY]      iChronology.addDaysInYearMonth(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.addDaysInYearMonth(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.addDaysInYearMonth(yearToUse,  monthToUse,  maxDay);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
412	[BUG]  [BUGGY]      iChronology.addDaysInYearMonth(instant,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.addDaysInYearMonth(instant,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.addDaysInYearMonth(instant,  monthToUse,  dayToUse);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
413	[BUG]  [BUGGY]      iChronology.setMonthOfYear(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      iChronology.setMonthOfYear(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        iChronology.setMonthOfYear(yearToUse,  monthToUse,  maxDay);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
414	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayUse(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayUse(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayUse(yearToUse,  monthToUse,  maxDay);	  dayToUse    =    thisYear;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
415	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear);  [CE]  possible  loss  of  precision  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear);	  dayToUse    =    thisYear;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
416	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayUse(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayUse(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayUse(yearToUse,  monthToUse);	  dayToUse    =    thisYear;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
417	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  thisYear,  maxDay);  [CE]  possible  loss  of  precision  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  thisYear,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  thisYear,  maxDay);	  dayToUse    =    thisYear;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
418	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	19	None	replace
419	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	19	None	replace
420	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [CE]  cannot  find  symbol  days  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  days	29	None	replace
421	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	29	None	replace
422	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
423	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	22	None	replace
424	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	22	None	replace
425	[BUG]  [BUGGY]  dayToUse  =  iChronology.getLeapMonthDayMillis(dayToUse);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getLeapMonthDayMillis(dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getLeapMonthDayMillis(dayToUse);	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
426	[BUG]  [BUGGY]  dayToUse  =  iChronology.getLeapMonthDayMillis(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getLeapMonthDayMillis(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getLeapMonthDayMillis(yearToUse,  monthToUse);	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
427	[BUG]  [BUGGY]  dayToUse  =  iChronology.getLeapMonthDayMillis(dayToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getLeapMonthDayMillis(dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getLeapMonthDayMillis(dayToUse,  maxDay);	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
428	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  maxDay);  [timeout]  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  maxDay);	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[timeout]	7	None	replace
429	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  monthToUse;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  +  monthToUse;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
430	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  monthToUse;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  monthToUse;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  monthToUse;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
431	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  minDay;  [CE]  cannot  find  symbol  minDay  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  minDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  minDay;	  dayToUse    =    iLeapMonth    +    maxDay;    	non-compiled	[CE]  cannot  find  symbol  minDay	13	None	replace
432	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  int  MIN  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  MIN;  }  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  int  MIN  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  MIN;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  int  MIN  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  MIN;  }	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
433	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [CE]  break  outside  switch  or  loop  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }	  	non-compiled	[CE]  break  outside  switch  or  loop	8	None	add
434	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology  [CE]  ';'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology	  	non-compiled	[CE]  ';'  expected	8	None	add
435	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  new  BasicChronology(  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  new  BasicChronology(  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  new  BasicChronology(	  	non-compiled	[CE]  ')'  expected	8	None	add
436	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChr  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChr  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChr	  	non-compiled	[CE]  ';'  expected	8	None	add
437	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
438	[BUG]  [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology.getYearMonthDayM  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology.getYearMonthDayM  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    if(dayToUse  >  MIN)  {  dayToUse  =  MIN;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology.getYearMonthDayM	  	non-compiled	[CE]  ';'  expected	8	None	add
439	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  monthToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  monthToUse);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
440	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse,  maxDay);	  dayToUse    =    MIN;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
441	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [CE]  cannot  find  symbol  weekToUse  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  weekToUse	24	None	replace
442	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  minDay);  [CE]  cannot  find  symbol  minDay  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  minDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  minDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  minDay	24	None	replace
443	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	5	None	add
444	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	12	add
445	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	12	add
446	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	5	None	add
447	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    maxDay    -    1;    if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	12	add
448	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >=  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	5	12	add
449	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [CE]  cannot  find  symbol  datePart  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	5	None	add
450	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs	  	non-compiled	[CE]  ')'  expected	5	None	add
451	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology	  	non-compiled	[CE]  ';'  expected	5	None	add
452	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs  [CE]  ')'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs	  	non-compiled	[CE]  ')'  expected	5	None	add
453	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChr  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChr  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    -    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  -  1;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChr	  	non-compiled	[CE]  ';'  expected	5	None	add
454	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
455	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
456	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
457	[BUG]  [BUGGY]  dayToUse  =  iChronology.getMonthOfYear(instant,  monthToUse,  dayToUse);  [CE]  no  suitable  method  found  for  getMonthOfYear(long,int,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getMonthOfYear(instant,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getMonthOfYear(instant,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(long,int,int)	40	None	replace
458	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(instant,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonthMillis(instant,  thisYear,  thisMonth);	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
459	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse);	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
460	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonthMillis(yearToUse,  monthToUse,  dayToUse);	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
461	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	8	add
462	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	8	add
463	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology  [CE]  ';'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology	  	non-compiled	[CE]  ';'  expected	10	None	add
464	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [CE]  break  outside  switch  or  loop  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  timePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }	  	non-compiled	[CE]  break  outside  switch  or  loop	10	None	add
465	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  instant  +  timePart;  }  [CE]  cannot  find  symbol  datePart  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  instant  +  timePart;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  instant  +  timePart;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	10	None	add
466	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    if(dayToUse  >  maxDay)  {  dayToUse  -=  maxDay;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUs	  	non-compiled	[CE]  ')'  expected	10	None	add
467	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	10	None	add
468	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  year,  maxDay);  [CE]  cannot  find  symbol  year  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  year,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(monthToUse,  year,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  year	49	None	replace
469	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(month,  yearToUse,  maxDay);  [CE]  cannot  find  symbol  month  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(month,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(month,  yearToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  month	49	None	replace
470	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  months,  dayToUse,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(yearToUse,  months,  dayToUse,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)	49	None	replace
471	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  thisYear,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(monthToUse,  thisYear,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(monthToUse,  thisYear,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int)	49	None	replace
472	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  thisMonth,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  thisMonth,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  thisMonth,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	52	None	replace
473	[BUG]  [BUGGY]  dayToUse  -=  MAX_DAY;  [CE]  cannot  find  symbol  MAX_DAY  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  MAX_DAY;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  MAX_DAY;	  dayToUse    -=    maxDay;    	non-compiled	[CE]  cannot  find  symbol  MAX_DAY	11	None	replace
474	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayOfMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayOfMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayOfMonth);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
475	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  1,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  1,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  1,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
476	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  days);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  days);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
477	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  days);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  days);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
478	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(month,  yearToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(month,  yearToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(month,  yearToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
479	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  day);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  day);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  day);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
480	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  months,  dayToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  months,  dayToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
481	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse,  dayToUse);  [CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    months,    dayToUse);    [timeout]    	non-compiled	[CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)	42	None	replace
482	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  days);  [CE]  cannot  find  symbol  days  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  days);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  days);	  dayToUse    =    iChronology.getDayOfMonth(instant,    months,    dayToUse);    [timeout]    	non-compiled	[CE]  cannot  find  symbol  days	42	None	replace
483	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
484	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  months,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  months,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  months,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
485	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  thisYear,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
486	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
487	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  1,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  1,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  1,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
488	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  5;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  5;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
489	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  5;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  5;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  5;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
490	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
491	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  monthToUse);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  monthToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
492	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse  +  1);  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse  +  1);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse  +  1);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
493	[BUG]  [BUGGY]  MonthToUse  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  MonthToUse  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	MonthToUse  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
494	[BUG]  [BUGGY]  MonthMonth  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  MonthMonth  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	MonthMonth  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
495	[BUG]  [BUGGY]  semaineToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  semaineToUse  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  semaineToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	semaineToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  semaineToUse	33	None	replace
496	[BUG]  [BUGGY]  dayToUse  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
497	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  year);  [CE]  cannot  find  symbol  year  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  year);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(monthToUse,  year);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  cannot  find  symbol  year	41	None	replace
498	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayOUse,  monthToUse);  [CE]  cannot  find  symbol  dayOUse  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayOUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayOUse,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	non-compiled	[CE]  cannot  find  symbol  dayOUse	41	None	replace
499	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  maxDay);  [timeout]  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[timeout]	38	None	replace
500	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayOUse,  monthToUse);  [timeout]  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayOUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(dayOUse,  monthToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[timeout]	38	None	replace
501	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1  +  monthToUse;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  -  1  +  monthToUse;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
502	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  1  +  monthToUse;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  1  +  monthToUse;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  1  +  monthToUse;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
503	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisMonth);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	27	None	replace
504	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisMonth);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisMonth);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	27	None	replace
505	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
506	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
507	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months,  dayToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months,  dayToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months,  dayToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
508	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  year);  [CE]  cannot  find  symbol  year  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  year);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  year);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  year	53	None	replace
509	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  monthToUse,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	21	None	replace
510	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  daysToUse  =  iLeapMonth;  [CE]  cannot  find  symbol  daysToUse  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  daysToUse  =  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    daysToUse  =  iLeapMonth;	  	non-compiled	[CE]  cannot  find  symbol  daysToUse	1	None	add
511	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
512	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  weekToUse);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
513	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayOfMonth);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
514	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  year);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  year);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  year);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
515	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayOUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  dayOUse  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayOUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayOUse,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  dayOUse	34	None	replace
516	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [CE]  cannot  find  symbol  days  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  days	34	None	replace
517	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	34	None	replace
518	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  monthToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  monthToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
519	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
520	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  year);  [CE]  cannot  find  symbol  year  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  year);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  monthToUse,  year);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  year	51	None	replace
521	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  dayToUse);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
522	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  0,  dayToUse);  [CE]  possible  loss  of  precision  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  0,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  0,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
523	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
524	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [CE]  cannot  find  symbol  days  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  days);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  days	26	None	replace
525	[BUG]  [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  weekToUse,  dayToUse);  [CE]  cannot  find  symbol  weekToUse  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  weekToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	thisYear  =  iChronology.getYearMonthDayMillis(yearToUse,  weekToUse,  dayToUse);	      thisYear    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  weekToUse	26	None	replace
526	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	50	None	replace
527	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
528	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  dayToUse  =  maxDay  +  1;  [CE]  possible  loss  of  precision  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  dayToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  dayToUse  =  maxDay  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
529	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [CE]  cannot  find  symbol  datePart  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	3	None	add
530	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  timePart  +  1;  }  [CE]  cannot  find  symbol  datePart  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  timePart  +  1;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  timePart  +  1;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	3	None	add
531	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
532	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  dayToUse  =  maxDay  +  1;  [CE]  possible  loss  of  precision  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  dayToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  dayToUse  =  maxDay  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
533	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  dayToUse  =  maxDay  +  1;  [CE]  possible  loss  of  precision  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  dayToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  dayToUse  =  maxDay  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
534	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [CE]  cannot  find  symbol  datePart  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    if(dayToUse  >  maxDay)  {  dayToUse  =  maxDay  +  1;  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  break;  }	  	non-compiled	[CE]  cannot  find  symbol  datePart	3	None	add
535	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,	  	non-compiled	[CE]  ')'  expected	3	None	add
536	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  monthToUse  =  iChronology.getYearMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  monthToUse  =  iChronology.getYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    monthToUse  =  iChronology.getYearMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
537	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  minuteToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  minuteToUse  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  minuteToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    minuteToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol  minuteToUse	37	None	add
538	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  hourToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  hourToUse  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  hourToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    hourToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	37	None	add
539	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMon  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMon  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMon	  	non-compiled	[CE]  ')'  expected	35	None	add
540	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
541	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
542	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
543	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	35	8	add
544	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  daysToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMon  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  daysToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMon  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  daysToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMon	  	non-compiled	[CE]  ')'  expected	35	None	add
545	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  this  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  this  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  this	  	non-compiled	[CE]  ')'  expected	35	None	add
546	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUs  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUs  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    if(dayToUse  ==  maxDay)  {  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  }  else  {  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUs	  	non-compiled	[CE]  ')'  expected	35	None	add
547	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  iLeapMonth  =  iLeapMonth  +  maxDay;  [CE]  cannot  assign  a  value  to  final  variable  iLeapMonth  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  iLeapMonth  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    iLeapMonth  =  iLeapMonth  +  maxDay;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iLeapMonth	12	None	add
548	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  daysToUse  =  iLeapMonth  +  maxDay;  [CE]  cannot  find  symbol  daysToUse  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay;  daysToUse  =  iLeapMonth  +  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth    +    maxDay;    daysToUse  =  iLeapMonth  +  maxDay;	  	non-compiled	[CE]  cannot  find  symbol  daysToUse	12	None	add
549	[BUG]  [BUGGY]  DayOfMonth  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  DayOfMonth  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	DayOfMonth  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
550	[BUG]  [BUGGY]  daysToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  daysToUse  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  daysToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	daysToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  daysToUse	30	None	replace
551	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  yearToUse,  dayToUse);  [CE]  possible  loss  of  precision  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  yearToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  yearToUse,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
552	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  0,  maxDay);  [CE]  possible  loss  of  precision  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  0,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  0,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
553	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  months,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	48	None	replace
554	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  days);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  days);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  days);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	48	None	replace
555	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	48	None	replace
556	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  weekToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  weekToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	48	None	replace
557	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	48	None	replace
558	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
559	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  weekToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  weekToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  weekToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
560	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  minDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  minDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  minDay);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	43	None	replace
561	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisYear,  thisMonth);  [CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  no  suitable  method  found  for  getDayOfMonth(long,int,int,int)	36	None	replace
562	[BUG]  [BUGGY]  dayToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth);  [CE]  no  suitable  method  found  for  getMonthOfYear(long,int,int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(long,int,int)	36	None	replace
563	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  dayToUse,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	24	None	replace
564	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisYear,  maxDay);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	27	None	replace
565	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonthMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonthMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonthMillis(yearToUse,  monthToUse,  dayToUse);	  dayToUse    =    iLeapMonthDayMillis;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
566	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  dayToUse);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  maxDay,  dayToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
567	[BUG]  [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	Month  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);	      Month    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
568	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  31;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  +  31;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
569	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  31;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  31;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  +  31;	  dayToUse    =    maxDay    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	12	replace
570	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
571	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getYearMonthMillis(yearToUse,  monthToUse);  [CE]  possible  loss  of  precision  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getYearMonthMillis(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getYearMonthMillis(yearToUse,  monthToUse);	  	non-compiled	[CE]  possible  loss  of  precision	37	None	add
572	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  monthToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  monthToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    monthToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
573	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  yearToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  yearToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    yearToUse  =  iChronology.getYearMonthMonth(yearToUse,  monthToUse);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
574	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse);  [timeout]  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse);	  	non-compiled	[timeout]	37	None	add
575	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisYear,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	21	None	replace
576	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisMonth);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisMonth);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisMonth);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	21	None	replace
577	[BUG]  [BUGGY]  dayToUse  =  minDay  +  iLeapMonth;  [CE]  cannot  find  symbol  minDay  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  minDay  +  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  minDay  +  iLeapMonth;	  dayToUse    =    iLeapMonth    +    maxDay;    	non-compiled	[CE]  cannot  find  symbol  minDay	13	None	replace
578	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  +  maxDay  +  1;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
579	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  maxDay  +  1;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
580	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay  +  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iLeapMonth  +  maxDay  +  thisYear;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
581	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay  +  thisYear;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay  +  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  maxDay  +  thisYear;	  dayToUse    =    iLeapMonth    +    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	13	12	replace
582	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay,  monthToUse);  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth  +  maxDay,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iLeapMonth  +  maxDay,  monthToUse);	  dayToUse    =    iLeapMonth    +    maxDay;    	non-compiled	[CE]  ';'  expected	13	None	replace
583	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  0,  dayToUse);  [CE]  possible  loss  of  precision  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  0,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(dayToUse,  0,  dayToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(dayToUse,    monthToUse);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
584	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthMonth(instant,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthMonth(instant,  thisYear,  thisMonth);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
585	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth),  maxDay);  [CE]  ';'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth),  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth),  maxDay);	  dayToUse    =    iChronology.getDayOfMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  ';'  expected	36	None	replace
586	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	38	None	replace
587	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	12	replace
588	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  months);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	12	replace
589	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  yearToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	38	None	replace
590	[BUG]  [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYearMonth(yearToUse,  monthToUse,  dayToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYearMonth(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        int  monthToUse  =  iChronology.getMonthOfYearMonth(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	17	None	add
591	[BUG]  [BUGGY]      int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  dayToUse);	  	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	17	None	add
592	[BUG]  [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        int  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse);	  	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	17	None	add
593	[BUG]  [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYearMonth(yearToUse,  monthToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYearMonth(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        int  monthToUse  =  iChronology.getMonthOfYearMonth(yearToUse,  monthToUse,  maxDay);	  	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	17	None	add
594	[BUG]  [BUGGY]      int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        int  monthToUse  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse,  maxDay);	  	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	17	None	add
595	[BUG]  [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYear(dayToUse,  thisYear,  thisMonth);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]      int  monthToUse  =  iChronology.getMonthOfYear(dayToUse,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	        int  monthToUse  =  iChronology.getMonthOfYear(dayToUse,  thisYear,  thisMonth);	  	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	17	None	add
596	[BUG]  [BUGGY]  dayToUse  =  maxDay?  MIN  :  maxDay;  [CE]  incompatible  types  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  MIN  :  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  MIN  :  maxDay;	  dayToUse    =    MIN;    	non-compiled	[CE]  incompatible  types	9	None	replace
597	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  MIN  +  1;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	12	replace
598	[BUG]  [BUGGY]  dayToUse  =  MIN  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  MIN  +  1;	  dayToUse    =    MIN;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	12	replace
599	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  weekToUse  -=  maxDay;  [CE]  cannot  find  symbol  weekToUse  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  weekToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    weekToUse  -=  maxDay;	  	non-compiled	[CE]  cannot  find  symbol  weekToUse	10	None	add
600	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  monthToUse  -=  maxDay;  [timeout]  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  monthToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    monthToUse  -=  maxDay;	  	non-compiled	[timeout]	10	None	add
601	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  DayToUse  -=  maxDay;  [timeout]  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  DayToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    DayToUse  -=  maxDay;	  	non-compiled	[timeout]	10	None	add
602	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  yearToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    -=    maxDay;    yearToUse  -=  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	8	add
603	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  yearToUse  -=  maxDay;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  yearToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    yearToUse  -=  maxDay;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	10	8	add
604	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  minuteToUse  -=  maxDay;  [CE]  cannot  find  symbol  minuteToUse  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  minuteToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    minuteToUse  -=  maxDay;	  	non-compiled	[CE]  cannot  find  symbol  minuteToUse	10	None	add
605	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  hourToUse  -=  maxDay;  [CE]  cannot  find  symbol  hourToUse  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  hourToUse  -=  maxDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    hourToUse  -=  maxDay;	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	10	None	add
606	[BUG]  [BUGGY]  dayToUse  -=  maxDay;  dayToUse  -=  minDay;  [CE]  cannot  find  symbol  minDay  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay;  dayToUse  -=  minDay;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    -=    maxDay;    dayToUse  -=  minDay;	  	non-compiled	[CE]  cannot  find  symbol  minDay	10	None	add
607	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay);	  dayToUse    =    iDayOfMonth;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	14	12	replace
608	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay);	  dayToUse    =    iDayOfMonth;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	14	12	replace
609	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  thisMonth);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  thisYear,  thisMonth);	  dayToUse    =    iDayOfMonth;    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	14	None	replace
610	[BUG]  [BUGGY]  MonthMonthDayMillis  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  MonthMonthDayMillis  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	MonthMonthDayMillis  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      minuteToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
611	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
612	[BUG]  [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  [CE]  possible  loss  of  precision  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);	      monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
613	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisDay);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
614	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisMax);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisMax);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisMax);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
615	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  yearToUse);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  yearToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  yearToUse);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
616	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisMaxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisMaxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  thisYear,  thisMonth,  thisMaxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	46	None	replace
617	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  maxDay,  monthToUse,  dayToUse);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  maxDay,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(yearToUse,  maxDay,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	53	None	replace
618	[BUG]  [BUGGY]  DayToUse  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  maxDay);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  DayToUse  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	DayToUse  dayToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
619	[BUG]  [BUGGY]  weekToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  dayToUse);  [CE]  cannot  find  symbol  weekToUse  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  weekToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	weekToUse  =  iChronology.getDaysInYearMonth(instant,  thisYear,  thisMonth,  dayToUse);	  dayToUse    =    iChronology.getDaysInYearMonth(instant,    thisYear,    thisMonth);    	non-compiled	[CE]  cannot  find  symbol  weekToUse	50	None	replace
620	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  thisMonth,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	34	None	replace
621	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	34	None	replace
622	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);  [CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  yearToUse,  dayToUse,  maxDay);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getYearMonthDayMillis  in  class  BasicChronology  cannot  be  applied  to  given  types;	34	None	replace
623	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  yearToUse,  monthToUse,  maxDay);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getMonthOfYear(instant,  yearToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getMonthOfYear(instant,  yearToUse,  monthToUse,  maxDay);	      int    monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	44	None	replace
624	[BUG]  [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iLeapMonth.length;  [CE]  int  cannot  be  dereferenced  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iLeapMonth;  dayToUse  =  iLeapMonth.length;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    iLeapMonth;    dayToUse  =  iLeapMonth.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	add
625	[BUG]  [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse);  [CE]  cannot  find  symbol  days  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  days,  monthToUse);	      yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  cannot  find  symbol  days	23	None	replace
626	[BUG]  [BUGGY]  dayToUse  =  thisYear;  weekToUse  =  thisYear;  [CE]  cannot  find  symbol  weekToUse  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  weekToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    weekToUse  =  thisYear;	  	non-compiled	[CE]  cannot  find  symbol  weekToUse	15	None	add
627	[BUG]  [BUGGY]  dayToUse  =  thisYear;  monthToUse  =  thisYear;  [timeout]  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  monthToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    monthToUse  =  thisYear;	  	non-compiled	[timeout]	15	None	add
628	[BUG]  [BUGGY]  dayToUse  =  thisYear;  DayToUse  =  thisYear;  [timeout]  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  DayToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    DayToUse  =  thisYear;	  	non-compiled	[timeout]	15	None	add
629	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  yearToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    thisYear;    yearToUse  =  thisYear;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	add
630	[BUG]  [BUGGY]  dayToUse  =  thisYear;  yearToUse  =  thisYear;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  yearToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    yearToUse  =  thisYear;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	15	8	add
631	[BUG]  [BUGGY]  dayToUse  =  thisYear;  minuteToUse  =  thisYear;  [CE]  cannot  find  symbol  minuteToUse  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  minuteToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    minuteToUse  =  thisYear;	  	non-compiled	[CE]  cannot  find  symbol  minuteToUse	15	None	add
632	[BUG]  [BUGGY]  dayToUse  =  thisYear;  hourToUse  =  thisYear;  [CE]  cannot  find  symbol  hourToUse  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  hourToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    hourToUse  =  thisYear;	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	15	None	add
633	[BUG]  [BUGGY]  dayToUse  =  thisYear;  daysToUse  =  thisYear;  [CE]  cannot  find  symbol  daysToUse  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  daysToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    daysToUse  =  thisYear;	  	non-compiled	[CE]  cannot  find  symbol  daysToUse	15	None	add
634	[BUG]  [BUGGY]  dayToUse  =  thisYear;  jourToUse  =  thisYear;  [CE]  cannot  find  symbol  jourToUse  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  thisYear;  jourToUse  =  thisYear;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    thisYear;    jourToUse  =  thisYear;	  	non-compiled	[CE]  cannot  find  symbol  jourToUse	15	None	add
635	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  maxDay);  [CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(dayToUse,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  method  getDaysInYearMonth  in  class  BasicChronology  cannot  be  applied  to  given  types;	52	None	replace
636	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(hour,  yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  hour  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDaysInYearMonth(hour,  yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDaysInYearMonth(hour,  yearToUse,  monthToUse,  maxDay);	  dayToUse    =    iChronology.getDaysInYearMonth(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  cannot  find  symbol  hour	52	None	replace
637	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  31;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  -  31;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
638	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  31;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  31;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  31;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
639	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  -  MIN;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
640	[BUG]  [BUGGY]  dayToUse  =  maxDay  -  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  -  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  -  MIN;	  dayToUse    =    maxDay    -    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	6	12	replace
641	[BUG]  [BUGGY]  dayToUse  =  maxDay  +  1;  daysToUse  =  maxDay  +  1;  [CE]  cannot  find  symbol  daysToUse  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  +  1;  daysToUse  =  maxDay  +  1;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    maxDay    +    1;    daysToUse  =  maxDay  +  1;	  	non-compiled	[CE]  cannot  find  symbol  daysToUse	3	None	add
642	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  /  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  maxDay  /  iLeapMonth;	  dayToUse    =    iLeapMonth;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	12	replace
643	[BUG]  [BUGGY]  dayToUse  =  maxDay  /  iLeapMonth;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay  /  iLeapMonth;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay  /  iLeapMonth;	  dayToUse    =    iLeapMonth;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	12	replace
644	[BUG]  [BUGGY]  dayToUse  =  maxDay?  iLeapMonth  :  iMin;  [CE]  incompatible  types  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  maxDay?  iLeapMonth  :  iMin;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  maxDay?  iLeapMonth  :  iMin;	  dayToUse    =    iLeapMonth;    	non-compiled	[CE]  incompatible  types	2	None	replace
645	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  dayToUse);  [timeout]  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    months,    dayToUse);    [timeout]    	non-compiled	[timeout]	42	None	replace
646	[BUG]  [BUGGY]  dayToUse  =  iChronology.getMonthOfYear(instant,  months,  dayToUse);  [timeout]  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getMonthOfYear(instant,  months,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getMonthOfYear(instant,  months,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    months,    dayToUse);    [timeout]    	non-compiled	[timeout]	42	None	replace
647	[BUG]  [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  [CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  monthToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  thisMonth);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  monthToUse  is  already  defined  in  method  add(long,int)	32	None	replace
648	[BUG]  [BUGGY]  int  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [CE]  variable  dayToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  maxDay);	      int    monthToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  dayToUse  is  already  defined  in  method  add(long,int)	32	None	replace
649	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	41	12	replace
650	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  monthToUse);	  dayToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    [timeout]    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	41	12	replace
651	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  1,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	19	None	replace
652	[BUG]  [BUGGY]  int  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  variable  dayToUse  is  already  defined  in  method  add(long,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  dayToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  dayToUse  is  already  defined  in  method  add(long,int)	19	None	replace
653	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisYear);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisYear);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  dayToUse,  thisYear);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse,    thisYear);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	28	None	replace
654	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  maxDay);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  maxDay);	  dayToUse    =    thisYear;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
655	[BUG]  [BUGGY]  dayToUse  =  iChronology.getYearMonthMonthMonth(instant,  thisYear,  thisMonth);  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getYearMonthMonthMonth(instant,  thisYear,  thisMonth);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getYearMonthMonthMonth(instant,  thisYear,  thisMonth);	  dayToUse    =    thisYear;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
656	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  thisMonth,  maxDay);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  thisMonth,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  thisMonth,  maxDay);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)	49	None	replace
657	[BUG]  [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  dayToUse);  [CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	monthToUse  =  iChronology.getMonthOfYear(yearToUse,  monthToUse,  maxDay,  dayToUse);	      monthToUse    =    iChronology.getMonthOfYear(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(int,int,int,int)	49	None	replace
658	[BUG]  [BUGGY]  dayToUse  =  MIN;  weekToUse  =  MIN;  [CE]  cannot  find  symbol  weekToUse  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  weekToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    weekToUse  =  MIN;	  	non-compiled	[CE]  cannot  find  symbol  weekToUse	8	None	add
659	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  monthToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    MIN;    monthToUse  =  MIN;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
660	[BUG]  [BUGGY]  dayToUse  =  MIN;  monthToUse  =  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  monthToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    monthToUse  =  MIN;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	12	add
661	[BUG]  [BUGGY]  dayToUse  =  MIN;  DayToUse  =  MIN;  [CE]  cannot  find  symbol  DayToUse  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  DayToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    DayToUse  =  MIN;	  	non-compiled	[CE]  cannot  find  symbol  DayToUse	8	None	add
662	[BUG]  [BUGGY]  dayToUse  =  MIN;  dayToUse  =  min;  [CE]  cannot  find  symbol  min  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  dayToUse  =  min;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    dayToUse  =  min;	  	non-compiled	[CE]  cannot  find  symbol  min	8	None	add
663	[BUG]  [BUGGY]  dayToUse  =  MIN;  minuteToUse  =  MIN;  [CE]  cannot  find  symbol  minuteToUse  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  minuteToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    minuteToUse  =  MIN;	  	non-compiled	[CE]  cannot  find  symbol  minuteToUse	8	None	add
664	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  yearToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse    =    MIN;    yearToUse  =  MIN;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	add
665	[BUG]  [BUGGY]  dayToUse  =  MIN;  yearToUse  =  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  yearToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    yearToUse  =  MIN;	  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	8	8	add
666	[BUG]  [BUGGY]  dayToUse  =  MIN;  hourToUse  =  MIN;  [CE]  cannot  find  symbol  hourToUse  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  hourToUse  =  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    hourToUse  =  MIN;	  	non-compiled	[CE]  cannot  find  symbol  hourToUse	8	None	add
667	[BUG]  [BUGGY]  dayToUse  =  MIN;  dayToUse  =  MAX;  [CE]  cannot  find  symbol  MAX  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  MIN;  dayToUse  =  MAX;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse    =    MIN;    dayToUse  =  MAX;	  	non-compiled	[CE]  cannot  find  symbol  MAX	8	None	add
668	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  *  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  maxDay  *  MIN;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
669	[BUG]  [BUGGY]  dayToUse  -=  maxDay  *  MIN;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  *  MIN;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  maxDay  *  MIN;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
670	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  +  2;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  -=  maxDay  +  2;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
671	[BUG]  [BUGGY]  dayToUse  -=  maxDay  +  2;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  -=  maxDay  +  2;  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  -=  maxDay  +  2;	  dayToUse    -=    maxDay;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	12	replace
672	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	47	None	replace
673	[BUG]  [BUGGY]  int  dayToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [CE]  variable  dayToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  dayToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  dayToUse  =  iChronology.getYearMonthMonthDayMillis(yearToUse,  monthToUse,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  dayToUse  is  already  defined  in  method  add(long,int)	47	None	replace
674	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  monthToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	12	replace
675	[BUG]  [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  monthToUse);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  monthToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getDayOfMonth(instant,  maxDay,  monthToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	40	12	replace
676	[BUG]  [BUGGY]  dayToUse  =  iChronology.getMonthOfYearMonth(instant,  monthToUse,  dayToUse);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  dayToUse  =  iChronology.getMonthOfYearMonth(instant,  monthToUse,  dayToUse);  [BUGGY]    }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	dayToUse  =  iChronology.getMonthOfYearMonth(instant,  monthToUse,  dayToUse);	  dayToUse    =    iChronology.getDayOfMonth(instant,    monthToUse,    maxDay);    [timeout]    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
677	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  monthToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  monthToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthDayMillis(yearToUse,  months,  monthToUse);	      int    yearToUse    =    iChronology.getYearMonthDayMillis(yearToUse,    monthToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	22	None	replace
678	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  thisYear,  dayToUse);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
679	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse  +  1);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse  +  1);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthMillis(yearToUse,  monthToUse,  dayToUse  +  1);	      int    yearToUse    =    iChronology.getYearMonthMonthMillis(yearToUse,    monthToUse,    dayToUse);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	45	None	replace
680	[BUG]  [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  monthToUse,  maxDay);  [CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    }      int  dayToUse  =  iChronology.getDayOfMonth(instant,  thisYear,  thisMonth);  int  maxDay  =  iChronology.getDaysInYearMonth(yearToUse,  monthToUse);  if  (dayToUse  >  maxDay)  {    [BUGGY]  int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  monthToUse,  maxDay);  [BUGGY]    dayToUse  =  maxDay;  }    long  datePart  =  iChronology.getYearMonthDayMillis(yearToUse,  monthToUse,  dayToUse);  return  datePart  +  timePart;  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  long  long  instant  int  months  [VARIABLES]  boolean  long  datePart  instant  serialVersionUID  timePart  int  MIN  dayToUse  iLeapMonth  iMax  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	int  yearToUse  =  iChronology.getYearMonthMonthDayMillis(monthToUse,  monthToUse,  maxDay);	      int    yearToUse    =    iChronology.getYearMonthMonthDayMillis(yearToUse,    monthToUse,    maxDay);    	non-compiled	[CE]  variable  yearToUse  is  already  defined  in  method  add(long,int)	48	None	replace
