bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getDayOfMonth().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getDayOfMonth().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
2	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getDayOfMonth().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getDayOfMonth().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFieldType(iChronology).getDayOfMonth().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
3	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFieldType(iChronology).getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
4	[BUG]  [BUGGY]  int[]  values  =  partial.getMonth().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getMonth().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getMonth().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
5	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getMonthOfYear().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getMonthOfYear().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
6	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(iChronology.getDayOfMonth().getValues();  [CE]  ')'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFieldType(iChronology.getDayOfMonth().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFieldType(iChronology.getDayOfMonth().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  ')'  expected	37	None	replace
7	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
8	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
9	[BUG]  [BUGGY]  long  instant  =  1L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
10	[BUG]  [BUGGY]  int  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
11	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
12	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)+  1;  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)+  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)+  1;	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
13	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
14	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)-  1;  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)-  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)-  1;	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
15	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	39	None	replace
16	[BUG]  [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	39	None	replace
17	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	39	None	replace
18	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [CE]  incompatible  types  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	39	None	replace
19	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [CE]  incompatible  types  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	39	None	replace
20	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology,  values);  [CE]  method  getField  in  class  DateTimeFieldType  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology,  values);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  method  getField  in  class  DateTimeFieldType  cannot  be  applied  to  given  types;	39	None	replace
21	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
22	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
23	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  valueToAdd);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
24	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
25	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getDayOfMonth();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getDayOfMonth();	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
26	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDaysOfMonth(partial,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
28	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
29	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex  -  1,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
30	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
31	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  -  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex  -  1);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
32	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  iChronology);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  iChronology);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  iChronology);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
33	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
34	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex),  valueToAdd);  [CE]  ';'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex),  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex),  valueToAdd);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	38	None	replace
35	[BUG]  [BUGGY]  int[]  values  =  getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getFieldValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getFieldValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
36	[BUG]  [BUGGY]  int[]  values  =  getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(),  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(),  valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  ';'  expected	4	None	replace
37	[BUG]  [BUGGY]  int[]  values  =  getValues(partial);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
38	[BUG]  [BUGGY]  int[]  values  =  getValues(),  valueToAdd;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(),  valueToAdd;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(),  valueToAdd;	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
39	[BUG]  [BUGGY]  int[]  values  =  getValues().length;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues().length;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues().length;	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
40	[BUG]  [BUGGY]  int[]  values  =  getDayOfMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getDayOfMonth();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getDayOfMonth();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
41	[BUG]  [BUGGY]  int  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
42	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1L  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
43	[BUG]  [BUGGY]  long  instant  =  1L  *  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1L  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
44	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis()  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  *  DateTimeUtils.currentTimeMillis()  +  1;	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
45	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis()  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis()  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.currentTimeMillis()  +  1;	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
46	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  29  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  29  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
47	[BUG]  [BUGGY]  long  instant  =  29  *  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  29  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  29  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
48	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.dayOfMonth();  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.dayOfMonth();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.dayOfMonth();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
49	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getDayOfMonth();  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getDayOfMonth();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getDayOfMonth();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
50	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  10  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  10  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
51	[BUG]  [BUGGY]  long  instant  =  10  *  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  10  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  10  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
52	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  2  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  2  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
53	[BUG]  [BUGGY]  long  instant  =  2  *  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  2  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  2  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
54	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
55	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
56	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  Long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  Long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    Long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
57	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }	  	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	25	None	add
58	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
59	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  Object  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  Object  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    Object  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
60	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
61	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  int[]  values  =  partial.getValues  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  int[]  values  =  partial.getValues  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  int[]  values  =  partial.getValues	  	non-compiled	[CE]  ';'  expected	25	None	add
62	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  System.arraycopy(partial,  0,  values,  valueToAdd  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  System.arraycopy(partial,  0,  values,  valueToAdd  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  System.arraycopy(partial,  0,  values,  valueToAdd	  	non-compiled	[CE]  ')'  expected	25	None	add
63	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  add(partial,  fieldIndex,  values[  [CE]  '.class'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  add(partial,  fieldIndex,  values[  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_SECOND)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  }  else  {  add(partial,  fieldIndex,  values[	  	non-compiled	[CE]  '.class'  expected	25	None	add
64	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
65	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	31	None	replace
66	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
67	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldsIndex,  valueToAdd);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldsIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldsIndex,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
68	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  values);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
69	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)-  1;  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)-  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex)-  1;	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
70	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  partial.getMonthOfYear(fieldIndex);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
71	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  values);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial,  values);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
72	[BUG]  [BUGGY]  long  instant  =  1L  *  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1L  *  DateTimeUtils.getMonthOfYear(partial);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
73	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.dayOfMonth(partial);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.dayOfMonth(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.dayOfMonth(partial);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
74	[BUG]  [BUGGY]  long  instant  =  partial.getMonthOfYear()  *  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  partial.getMonthOfYear()  *  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  partial.getMonthOfYear()  *  DateTimeUtils.getMonthOfYear(partial);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
75	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial),  valueToAdd);  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial),  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial),  valueToAdd);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  ';'  expected	24	None	replace
76	[BUG]  [BUGGY]  int  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
77	[BUG]  [BUGGY]  Int  instant  =  0L;  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Int  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Int  instant  =  0L;	  short    instant    =    0L;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
78	[BUG]  [BUGGY]  minute  instant  =  0L;  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  minute  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	minute  instant  =  0L;	  short    instant    =    0L;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
79	[BUG]  [BUGGY]  byte  instant  =  0L;  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  byte  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	byte  instant  =  0L;	  short    instant    =    0L;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
80	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues(fieldIndex);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
81	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues(),  valueToAdd;	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
82	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues(),  valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  ';'  expected	5	None	replace
83	[BUG]  [BUGGY]  Integer[]  values  =  partial.getAllValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getAllValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getAllValues();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
84	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues()  -  1;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues()  -  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues()  -  1;	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
85	[BUG]  [BUGGY]  Integer[]  values  =  partial.getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getFieldValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getFieldValues();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
86	[BUG]  [BUGGY]  int  values[]  =  partial.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  values[]  =  partial.getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  values[]  =  partial.getValues();	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
87	[BUG]  [BUGGY]  Integer  values[]  =  partial.getFieldType(iChronology).getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getFieldType(iChronology).getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getFieldType(iChronology).getValues();	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
88	[BUG]  [BUGGY]  Integer  values[]  =  iChronology.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  iChronology.getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  iChronology.getValues();	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
89	[BUG]  [BUGGY]  Integer  values[]  =  partial.getIntValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getIntValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getIntValues();	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
90	[BUG]  [BUGGY]  Integer  values[]  =  partial.getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getFieldValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getFieldValues();	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
91	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getValues(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getValues(fieldIndex);	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
92	[BUG]  [BUGGY]  Integer  values[]  =  partial.getAllValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getAllValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getAllValues();	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
93	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	replace
94	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	replace
95	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	replace
96	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	replace
97	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
98	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)+  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)+  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)+  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	replace
99	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)-  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)-  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex)-  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	replace
100	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex),  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	30	None	replace
101	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(int,int[])  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(int,int[])	41	None	replace
102	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int)	41	None	replace
103	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(int,int[])  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(int,int[])	41	None	replace
104	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(int,int[])  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(int,int[])	41	None	replace
105	[BUG]  [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(Integer,int[])  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(Integer,int[])	41	None	replace
106	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  valueToAdd);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int)	41	None	replace
107	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values,  valueToAdd);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int)	41	None	replace
108	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  values[1]);  [CE]  no  suitable  method  found  for  set(long,int,int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  values[1]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  values[1]);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int)	41	None	replace
109	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
110	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
111	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
112	[BUG]  [BUGGY]  int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
113	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(iChronology,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getYearValues(iChronology,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getYearValues(iChronology,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
114	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDays(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDays(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDays(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
115	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	29	None	replace
116	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
117	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
118	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
119	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [CE]  possible  loss  of  precision  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
120	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
121	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(fieldIndex,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
122	[BUG]  [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [CE]  incompatible  types  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  incompatible  types	44	None	replace
123	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[1]);  [CE]  variable  instant  might  not  have  been  initialized  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[1]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[1]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  variable  instant  might  not  have  been  initialized	44	None	replace
124	[BUG]  [BUGGY]  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
125	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  +  1;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
126	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  +  1;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
127	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
128	[BUG]  [BUGGY]  long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
129	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  29  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  29  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
130	[BUG]  [BUGGY]  long  instant  =  29  *  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  29  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  29  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
131	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
132	[BUG]  [BUGGY]  long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
133	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  2;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  2;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
134	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  2;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  2;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  2;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
135	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  2  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  2  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
136	[BUG]  [BUGGY]  long  instant  =  2  *  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  2  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  2  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
137	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  1;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
138	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY  /  1;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
139	[BUG]  [BUGGY]  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
140	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
141	[BUG]  [BUGGY]  long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1L  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
142	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND  +  1;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
143	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND  +  1;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
144	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
145	[BUG]  [BUGGY]  long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  /  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
146	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  29  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  29  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
147	[BUG]  [BUGGY]  long  instant  =  29  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  29  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  29  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
148	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  2  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  2  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
149	[BUG]  [BUGGY]  long  instant  =  2  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  2  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  2  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
150	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  28  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  28  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
151	[BUG]  [BUGGY]  long  instant  =  28  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  28  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  28  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
152	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  +  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
153	[BUG]  [BUGGY]  long  instant  =  0L  +  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  +  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
154	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  values);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
155	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex),  values);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	32	None	replace
156	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
157	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)-  1;  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)-  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)-  1;	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
158	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth();  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  partial.getDayOfMonth();	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
159	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)+  1;  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)+  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex)+  1;	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
160	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth(fieldIndex);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  partial.getDayOfMonth(fieldIndex);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
161	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
162	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
163	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(iChronology,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(iChronology,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(iChronology,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
164	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
165	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
166	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  valueToAdd,  fieldIndex);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
167	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
168	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
169	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
170	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
171	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  variables,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  variables,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  variables,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
172	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fields);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fields);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fields);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
173	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
174	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
175	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }	  	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	22	None	add
176	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  Long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  Long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    Long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
177	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
178	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
179	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  Object  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  Object  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    Object  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
180	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  System.arraycopy(partial,  0,  values,  instant,  valueToAdd);  }  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  System.arraycopy(partial,  0,  values,  instant,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  System.arraycopy(partial,  0,  values,  instant,  valueToAdd);  }	  	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	22	None	add
181	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  return  [CE]  '.class'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  return  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  return	  	non-compiled	[CE]  '.class'  expected	22	None	add
182	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  throw  new  IllegalFieldValueException( " ");  }  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  throw  new  IllegalFieldValueException( " ");  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(partial.getFieldType()  ==  DateTimeConstants.MILLIS_PER_DAY)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  throw  new  IllegalFieldValueException( " ");  }	  	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	22	None	add
183	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getYearValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getYearValues();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
184	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial);	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
185	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYearValues();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
186	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDays();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDays();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDays();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
187	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getDayOfMonth();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
188	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  iChronology);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  iChronology);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	6	None	replace
189	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(iChronology,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(iChronology,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(iChronology,  fieldIndex);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	6	None	replace
190	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex  +  1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex  +  1);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	6	None	replace
191	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	6	None	replace
192	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
193	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
194	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0L  +  1;  }  [CE]  cannot  find  symbol  i  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0L  +  1;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0L  +  1;  }	  	non-compiled	[CE]  cannot  find  symbol  i	17	None	add
195	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0L  +  1;  }  [CE]  cannot  find  symbol  i  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0L  +  1;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0L  +  1;  }	  	non-compiled	[CE]  cannot  find  symbol  i	17	None	add
196	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
197	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
198	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  long  instant  =  0L  +  1;  }  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  long  instant  =  0L  +  1;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  long  instant  =  0L  +  1;  }	  	non-compiled	[CE]  ')'  expected	17	None	add
199	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  int  instant  =  0L  +  1;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  int  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    int  instant  =  0L  +  1;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
200	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  instant  =  0L  +  1;  }  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  instant  =  0L  +  1;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  instant  =  0L  +  1;  }	  	non-compiled	[CE]  ')'  expected	17	None	add
201	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  long  instant  =  0L  +  1;  [CE]  ')'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  long  instant  =  0L  +  1;	  	non-compiled	[CE]  ')'  expected	17	None	add
202	[BUG]  [BUGGY]  int  instant  =  0l;  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0l;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0l;	  long    instant    =    0l;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
203	[BUG]  [BUGGY]  Integer  instant  =  0l;  [CE]  incompatible  types  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  0l;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  0l;	  long    instant    =    0l;    	non-compiled	[CE]  incompatible  types	20	None	replace
204	[BUG]  [BUGGY]  int  instant  =  0xff;  [CE]  possible  loss  of  precision  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0xff;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0xff;	  long    instant    =    0l;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
205	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values,  valueToAdd);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int)	42	None	replace
206	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(int,int[])  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(int,int[])	42	None	replace
207	[BUG]  [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(Integer,int[])  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(Integer,int[])	42	None	replace
208	[BUG]  [BUGGY]  int  instant  =(partial  >=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  >=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  >=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	42	None	replace
209	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int,int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0],  valueToAdd);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int)	42	None	replace
210	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[1]);  [CE]  variable  instant  might  not  have  been  initialized  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[1]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[1]);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  variable  instant  might  not  have  been  initialized	43	None	replace
211	[BUG]  [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [CE]  incompatible  types  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  incompatible  types	43	None	replace
212	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [CE]  variable  instant  might  not  have  been  initialized  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  variable  instant  might  not  have  been  initialized	43	None	replace
213	[BUG]  [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial,int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getMonthOfYear(partial,  valueToAdd);	  long    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial,int)	13	None	replace
214	[BUG]  [BUGGY]  long  instant  =  iChronology.getDayOfMonth(partial,  fieldIndex);  [CE]  no  suitable  method  found  for  getDayOfMonth(ReadablePartial,int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getDayOfMonth(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getDayOfMonth(partial,  fieldIndex);	  long    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getDayOfMonth(ReadablePartial,int)	13	None	replace
215	[BUG]  [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  fieldIndex);  [CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getMonthOfYear(partial,  fieldIndex);	  long    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial,int)	13	None	replace
216	[BUG]  [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  values[i]);  [CE]  cannot  find  symbol  i  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getMonthOfYear(partial,  values[i]);	  long    instant    =    0;    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
217	[BUG]  [BUGGY]  long  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);  [CE]  no  suitable  method  found  for  getDayOfMonth(ReadablePartial,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);	  long    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getDayOfMonth(ReadablePartial,int)	13	None	replace
218	[BUG]  [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial);  [CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getMonthOfYear(partial);	  long    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial)	13	None	replace
219	[BUG]  [BUGGY]  long  instant  =  iChronology.getYearValue(partial,  valueToAdd);  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getYearValue(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getYearValue(partial,  valueToAdd);	  long    instant    =    0;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
220	[BUG]  [BUGGY]  Integer  instant  =  0;  [CE]  incompatible  types  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  0;	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
221	[BUG]  [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology));  [CE]  no  suitable  constructor  found  for  Integer(DateTimeField)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology));  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology));	  Integer    instant    =    0L;    	non-compiled	[CE]  no  suitable  constructor  found  for  Integer(DateTimeField)	15	None	replace
222	[BUG]  [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology).intValue());  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology).intValue());  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology).intValue());	  Integer    instant    =    0L;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
223	[BUG]  [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology),  valueToAdd);  [CE]  no  suitable  constructor  found  for  Integer(DateTimeField,int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology),  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology),  valueToAdd);	  Integer    instant    =    0L;    	non-compiled	[CE]  no  suitable  constructor  found  for  Integer(DateTimeField,int)	15	None	replace
224	[BUG]  [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology)).intValue();  [CE]  no  suitable  constructor  found  for  Integer(DateTimeField)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology)).intValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology)).intValue();	  Integer    instant    =    0L;    	non-compiled	[CE]  no  suitable  constructor  found  for  Integer(DateTimeField)	15	None	replace
225	[BUG]  [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology),  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  constructor  found  for  Integer(DateTimeField,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology),  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  new  Integer(partial.getFieldType(0).getField(iChronology),  fieldIndex,  values,  valueToAdd);	  Integer    instant    =    0L;    	non-compiled	[CE]  no  suitable  constructor  found  for  Integer(DateTimeField,int,int[],int)	15	None	replace
226	[BUG]  [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType().getIndex(fieldIndex),  values[valueToAdd]);  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType().getIndex(fieldIndex),  values[valueToAdd]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  new  Integer(partial.getFieldType().getIndex(fieldIndex),  values[valueToAdd]);	  Integer    instant    =    0L;    	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	15	None	replace
227	[BUG]  [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType().getIndex(fieldIndex),  values,  valueToAdd);  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  new  Integer(partial.getFieldType().getIndex(fieldIndex),  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  new  Integer(partial.getFieldType().getIndex(fieldIndex),  values,  valueToAdd);	  Integer    instant    =    0L;    	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	15	None	replace
228	[BUG]  [BUGGY]  int  instant  =  0L  +  1;  [CE]  possible  loss  of  precision  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  0L  +  1;	  long    instant    =    0L    +    1;    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
229	[BUG]  [BUGGY]  long  instant  =  partial.getFieldType(iChronology)+  1;  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  partial.getFieldType(iChronology)+  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  partial.getFieldType(iChronology)+  1;	  long    instant    =    0L    +    1;    	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	18	None	replace
230	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1L  +  1;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
231	[BUG]  [BUGGY]  long  instant  =  1L  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1L  +  1;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
232	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  +  1L;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
233	[BUG]  [BUGGY]  long  instant  =  0L  +  1L;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  +  1L;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
234	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  partial.size()  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  partial.size()  +  1;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
235	[BUG]  [BUGGY]  long  instant  =  partial.size()  +  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  partial.size()  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  partial.size()  +  1;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
236	[BUG]  [BUGGY]  long  instant  =  partial.getItemCount()  +  1;  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  partial.getItemCount()  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  partial.getItemCount()  +  1;	  long    instant    =    0L    +    1;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
237	[BUG]  [BUGGY]  double  instant  =  0;  [CE]  no  suitable  method  found  for  set(double,int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  double  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	double  instant  =  0;	  int    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  set(double,int)	14	None	replace
238	[BUG]  [BUGGY]  float  instant  =  0;  [CE]  no  suitable  method  found  for  set(float,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  float  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	float  instant  =  0;	  int    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  set(float,int)	14	None	replace
239	[BUG]  [BUGGY]  short  instant  =  0;  [CE]  possible  loss  of  precision  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  short  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	short  instant  =  0;	  int    instant    =    0;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
240	[BUG]  [BUGGY]  byte  instant  =  0;  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  byte  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	byte  instant  =  0;	  int    instant    =    0;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
241	[BUG]  [BUGGY]  int  instant  =  1;  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  1;	  int    instant    =    0;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
242	[BUG]  [BUGGY]  char  instant  =  0;  [CE]  possible  loss  of  precision  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  char  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	char  instant  =  0;	  int    instant    =    0;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
243	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
244	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFieldValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
245	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
246	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFields(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
247	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFields(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
248	[BUG]  [BUGGY]  int[]  values  =  partial.getFields(fieldIndex,  iChronology);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFields(fieldIndex,  iChronology);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFields(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
249	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFields(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFields(partial,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFields(partial,  valueToAdd);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
250	[BUG]  [BUGGY]  int[]  values  =  partial.getFields(iChronology,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFields(iChronology,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFields(iChronology,  fieldIndex);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
251	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex  +  1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFields(partial,  fieldIndex  +  1);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
252	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldsIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldsIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFields(partial,  fieldsIndex,  valueToAdd);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
253	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFields(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	8	None	replace
254	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getFieldType(iChronology).getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getFieldType(iChronology).getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getFieldType(iChronology).getValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
255	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getValues()  /  2;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
256	[BUG]  [BUGGY]  int[]  values  =(int[])partial.clone();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.clone();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.clone();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
257	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getValues()  -  1;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
258	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getFieldValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
259	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getAllValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
260	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getValuesInYear();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
261	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
262	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
263	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
264	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  iChronology);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  iChronology);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
265	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
266	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	33	None	replace
267	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
268	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  int  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  int  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    int  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
269	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
270	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
271	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    Long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
272	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  isize  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  isize  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  isize  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
273	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  if(partial.getFieldType()  ==  null)  {  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  System.arraycopy(partial,  0,  values,  instant,  valueToAdd);  }  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  if(partial.getFieldType()  ==  null)  {  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  System.arraycopy(partial,  0,  values,  instant,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    if(partial.getFieldType()  ==  null)  {  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  System.arraycopy(partial,  0,  values,  instant,  valueToAdd);  }	  	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	27	None	add
274	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  if(partial.getFieldType()  ==  null)  {  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  }  [CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  if(partial.getFieldType()  ==  null)  {  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    if(partial.getFieldType()  ==  null)  {  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  }	  	non-compiled	[CE]  method  getFieldType  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	27	None	add
275	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [CE]  ']'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i	  	non-compiled	[CE]  ']'  expected	27	None	add
276	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[1]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[1]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[1]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
277	[BUG]  [BUGGY]  float  instant  =  0L;  [CE]  no  suitable  method  found  for  set(float,int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  float  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	float  instant  =  0L;	  int    instant    =    0L;    	non-compiled	[CE]  no  suitable  method  found  for  set(float,int)	11	None	replace
278	[BUG]  [BUGGY]  double  instant  =  0L;  [CE]  no  suitable  method  found  for  set(double,int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  double  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	double  instant  =  0L;	  int    instant    =    0L;    	non-compiled	[CE]  no  suitable  method  found  for  set(double,int)	11	None	replace
279	[BUG]  [BUGGY]  char  instant  =  0L;  [CE]  possible  loss  of  precision  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  char  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	char  instant  =  0L;	  int    instant    =    0L;    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
280	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Long  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	Long  instant  =  0L;	  int    instant    =    0L;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
281	[BUG]  [BUGGY]  Long  instant  =  0L;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Long  instant  =  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Long  instant  =  0L;	  int    instant    =    0L;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
282	[BUG]  [BUGGY]  long  instant  =  0;  long  instant  =  0;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  long  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    long  instant  =  0;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	12	None	add
283	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0;  }  [CE]  cannot  find  symbol  i  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  i	12	None	add
284	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0;  }  [CE]  cannot  find  symbol  i  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  i	12	None	add
285	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology)  ==  null)  {  long  instant  =  0;  }  [CE]  cannot  find  symbol  i  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology)  ==  null)  {  long  instant  =  0;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i).getField(iChronology)  ==  null)  {  long  instant  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  i	12	None	add
286	[BUG]  [BUGGY]  long  instant  =  0;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	12	None	add
287	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  long  instant  =  0;  }  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  long  instant  =  0;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  long  instant  =  0;  }	  	non-compiled	[CE]  ')'  expected	12	None	add
288	[BUG]  [BUGGY]  long  instant  =  0;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	12	None	add
289	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  instant  =  0;  }  [CE]  ')'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  instant  =  0;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i])  {  instant  =  0;  }	  	non-compiled	[CE]  ')'  expected	12	None	add
290	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).size()  >  0)  {  long  instant  =  0;  }  [CE]  cannot  find  symbol  i  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).size()  >  0)  {  long  instant  =  0;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i).getField(iChronology).size()  >  0)  {  long  instant  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  i	12	None	add
291	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  ')'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  ')'  expected	12	None	add
292	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	35	None	replace
293	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial)+  1;  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial)+  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial)+  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	35	None	replace
294	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
295	[BUG]  [BUGGY]  thisYear  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  thisYear  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  thisYear  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	thisYear  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol  thisYear	35	None	replace
296	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial),  values);  [CE]  ';'  expected  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial),  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial),  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  ';'  expected	35	None	replace
297	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[0]);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[0]);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values[0]);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	35	None	replace
298	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(fieldIndex);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
299	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(),  valueToAdd;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
300	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(),  valueToAdd);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  ';'  expected	1	None	replace
301	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
302	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFieldValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFieldValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
303	[BUG]  [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues()  -  1;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
304	[BUG]  [BUGGY]  long  instant  =  0l;  long  instant  =  0l;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  long  instant  =  0l;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    long  instant  =  0l;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	19	None	add
305	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  [CE]  '.class'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <	  	non-compiled	[CE]  '.class'  expected	19	None	add
306	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  partial.getFieldType(i).getField(iChronology);  }  [CE]  cannot  find  symbol  i  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  cannot  find  symbol  i	19	None	add
307	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
308	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0l;  }  else  {  return  partial.getFieldType(i).getField(iChronology);  }  [CE]  cannot  find  symbol  i  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0l;  }  else  {  return  partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0l;  }  else  {  return  partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  cannot  find  symbol  i	19	None	add
309	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(	  	non-compiled	[CE]  '.class'  expected	19	None	add
310	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0l;  }  [CE]  cannot  find  symbol  i  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0l;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology).isEmpty())  {  long  instant  =  0l;  }	  	non-compiled	[CE]  cannot  find  symbol  i	19	None	add
311	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i),  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  i  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i),  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i),  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  i	19	None	add
312	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  [CE]  cannot  find  symbol  i  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }	  	non-compiled	[CE]  cannot  find  symbol  i	19	None	add
313	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[  [CE]  '.class'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[	  	non-compiled	[CE]  '.class'  expected	19	None	add
314	[BUG]  [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	40	None	replace
315	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [CE]  incompatible  types  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	40	None	replace
316	[BUG]  [BUGGY]  int  instant  =(partial  >=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  >=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  >=  null)?  0L  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	40	None	replace
317	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values,  valueToAdd);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(long,int[],int)	42	None	replace
318	[BUG]  [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [CE]  incompatible  types  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	39	None	replace
319	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [CE]  ']'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i	  	non-compiled	[CE]  ']'  expected	25	None	add
320	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
321	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
322	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]	  	non-compiled	[CE]  ')'  expected	25	None	add
323	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	  	non-compiled	[CE]  '.class'  expected	25	None	add
324	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i  [CE]  ']'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i	  	non-compiled	[CE]  ']'  expected	25	None	add
325	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
326	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  values);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  values);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
327	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values;	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
328	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0;  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0;	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
329	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0;  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0;	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
330	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance();  long  instant  =  0;  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance();  long  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance();  long  instant  =  0;	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
331	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0;  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0;	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
332	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
333	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
334	[BUG]  [BUGGY]  long  instant  =  0;  java.util.Locale  locale  =  DateTimeUtils.getLocale(locale);  long  instant  =  0;  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.Locale  locale  =  DateTimeUtils.getLocale(locale);  long  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.Locale  locale  =  DateTimeUtils.getLocale(locale);  long  instant  =  0;	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
335	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getValue());  long  instant  =  0;  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getValue());  long  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getValue());  long  instant  =  0;	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
336	[BUG]  [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
337	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(1);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
338	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(fieldIndex,  values);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	1	None	replace
339	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	  	non-compiled	[CE]  '.class'  expected	19	None	add
340	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }  [CE]  'else'  without  'if'  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  'else'  without  'if'	19	None	add
341	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	  	non-compiled	[CE]  '.class'  expected	19	None	add
342	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology	  	non-compiled	[CE]  ')'  expected	19	None	add
343	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [CE]  ']'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i	  	non-compiled	[CE]  ']'  expected	19	None	add
344	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i  [CE]  ']'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i	  	non-compiled	[CE]  ']'  expected	19	None	add
345	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	  	non-compiled	[CE]  '.class'  expected	19	None	add
346	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).remove(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).remove(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).remove(	  	non-compiled	[CE]  '.class'  expected	19	None	add
347	[BUG]  [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }  [CE]  'else'  without  'if'  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(valueToAdd  ==  1)  {  long  instant  =  0l;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  'else'  without  'if'	19	None	add
348	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Object  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Object  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    Object  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
349	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Object  valueToAdd  =  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Object  valueToAdd  =  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    Object  valueToAdd  =  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
350	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Object  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  Object  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    Object  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
351	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
352	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
353	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
354	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstanceUTC();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstanceUTC();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    java.util.DateTimeFormat  partial  =  DateTimeUtils.getInstanceUTC();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
355	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
356	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [CE]  ']'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i	  	non-compiled	[CE]  ']'  expected	22	None	add
357	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [CE]  ')'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]	  	non-compiled	[CE]  ')'  expected	22	None	add
358	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [CE]  ']'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i	  	non-compiled	[CE]  ']'  expected	22	None	add
359	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology	  	non-compiled	[CE]  ')'  expected	22	None	add
360	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
361	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(	  	non-compiled	[CE]  '.class'  expected	22	None	add
362	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    if(valueToAdd  ==  1)  {  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  }  else  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	  	non-compiled	[CE]  '.class'  expected	22	None	add
363	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(fieldIndex);	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
364	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
365	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
366	[BUG]  [BUGGY]  long  instant  =  1  *  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
367	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getDayOfMonth(partial);  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getDayOfMonth(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getDayOfMonth(partial);	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
368	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  31  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  31  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
369	[BUG]  [BUGGY]  long  instant  =  31  *  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  31  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  31  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
370	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [CE]  variable  instant  might  not  have  been  initialized  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  variable  instant  might  not  have  been  initialized	44	None	replace
371	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
372	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	44	8	replace
373	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [CE]  possible  loss  of  precision  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
374	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
375	[BUG]  [BUGGY]  long  instant  =  1  *  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
376	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  27  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  27  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
377	[BUG]  [BUGGY]  long  instant  =  27  *  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  27  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  27  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
378	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  28  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  28  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
379	[BUG]  [BUGGY]  long  instant  =  28  *  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  28  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  28  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	23	8	replace
380	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	43	8	replace
381	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(valueToAdd,  values[0]);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	43	8	replace
382	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [CE]  possible  loss  of  precision  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(1).getField(iChronology).set(instant,  values[0]);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values[0]);    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
383	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
384	[BUG]  [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_DAY;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_DAY;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
385	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_HOUR;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_HOUR;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
386	[BUG]  [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_HOUR;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_HOUR;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_HOUR;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
387	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
388	[BUG]  [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  +  1L  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
389	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
390	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  iChronology);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  iChronology);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(valueToAdd,  iChronology);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
391	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getValues(valueToAdd,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
392	[BUG]  [BUGGY]  instant  =  0;  [CE]  cannot  find  symbol  instant  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  instant  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	instant  =  0;	  short    instant    =    0L;    	non-compiled	[CE]  cannot  find  symbol  instant	16	None	replace
393	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues(valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues(valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
394	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues(fieldIndex,  values);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
395	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues(fieldIndex,  valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
396	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValues(1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValues(1);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
397	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues().toArray(valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
398	[BUG]  [BUGGY]  int[]  values  =  getValues(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(fieldIndex);	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
399	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYear();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
400	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  +  1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex  +  1);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
401	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getValue());  long  instant  =  0L  +  1;  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getValue());  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getValue());  long  instant  =  0L  +  1;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
402	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0L  +  1;  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  long  instant  =  0L  +  1;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
403	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0L  +  1;  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getChronology());  long  instant  =  0L  +  1;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
404	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance();  long  instant  =  0L  +  1;  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance();  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance();  long  instant  =  0L  +  1;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
405	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getValue());  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getValue());  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getValue());	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
406	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0L  +  1;  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology);  long  instant  =  0L  +  1;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
407	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getParent());  long  instant  =  0L  +  1;  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getParent());  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.getInstance(partial.getParent());  long  instant  =  0L  +  1;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
408	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  type  =  partial.getFieldType(iChronology).getField(iChronology);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
409	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  +  1;  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    java.util.DateTimeFieldType  iChronology  =  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  +  1;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
410	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology);	  int    instant    =    0;    	non-compiled	[CE]  incompatible  types	14	None	replace
411	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology);	  int    instant    =    0;    	non-compiled	[CE]  incompatible  types	14	None	replace
412	[BUG]  [BUGGY]  int  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).intValue();  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).intValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).intValue();	  int    instant    =    0;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
413	[BUG]  [BUGGY]  int  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology).intValue();  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology).intValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology).intValue();	  int    instant    =    0;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
414	[BUG]  [BUGGY]  int  instant  =(valueToAdd  ==  0)?  0  :  Integer.MAX_VALUE;  [CE]  possible  loss  of  precision  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =(valueToAdd  ==  0)?  0  :  Integer.MAX_VALUE;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =(valueToAdd  ==  0)?  0  :  Integer.MAX_VALUE;	  int    instant    =    0;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
415	[BUG]  [BUGGY]  long  instant  =  1  *  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1  *  DateTimeUtils.getMonthOfYear(partial);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
416	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial)+  1;  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial)+  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  *  DateTimeUtils.getMonthOfYear(partial)+  1;	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
417	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =    0;    	non-compiled	[CE]  incompatible  types	13	None	replace
418	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =    0;    	non-compiled	[CE]  incompatible  types	13	None	replace
419	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getValue();  [CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0  :  partial.getValue();	  long    instant    =    0;    	non-compiled	[CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	13	None	replace
420	[BUG]  [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);	  long    instant    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getMonthOfYear(ReadablePartial,int,int[],int)	13	None	replace
421	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0  :  partial.getValue();  [CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0  :  partial.getValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0  :  partial.getValue();	  long    instant    =    0;    	non-compiled	[CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	13	None	replace
422	[BUG]  [BUGGY]  long  instant  =  iChronology.getYearValue(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  iChronology.getYearValue(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  iChronology.getYearValue(partial,  fieldIndex);	  long    instant    =    0;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
423	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [CE]  incompatible  types  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0L  :  partial.getFieldType(1).getField(iChronology);	  long    instant    =(partial!=    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	40	None	replace
424	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fields[fieldIndex]);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fields[fieldIndex]);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fields[fieldIndex]);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	35	None	replace
425	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldsToAdd);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldsToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldsToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	35	None	replace
426	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fields[0],  values[1]);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fields[0],  values[1]);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fields[0],  values[1]);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	35	None	replace
427	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getDayOfMonth(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getDayOfMonth(fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
428	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth(iChronology,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getDayOfMonth(iChronology,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getDayOfMonth(iChronology,  fieldIndex);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
429	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getYearValues(fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
430	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
431	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
432	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getValues(1);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
433	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getValues(2);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
434	[BUG]  [BUGGY]  int[]  values  =(int[])partial.cloneTree();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.cloneTree();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.cloneTree();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
435	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  <  0)?  0L  :  values[0];  [CE]  incompatible  types  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  <  0)?  0L  :  values[0];  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  <  0)?  0L  :  values[0];	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
436	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  values[0];  [CE]  incompatible  types  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  values[0];  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  ==  0)?  0L  :  values[0];	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
437	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  valueToAdd;  [CE]  incompatible  types  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  valueToAdd;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  ==  0)?  0L  :  valueToAdd;	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
438	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  <  0)?  0L  :  valueToAdd;  [CE]  incompatible  types  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  <  0)?  0L  :  valueToAdd;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  <  0)?  0L  :  valueToAdd;	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
439	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  <  0)?  0L  :  values[1];  [CE]  incompatible  types  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  <  0)?  0L  :  values[1];  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  <  0)?  0L  :  values[1];	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
440	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  >=  0)?  0L  :  values[0];  [CE]  incompatible  types  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  >=  0)?  0L  :  values[0];  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  >=  0)?  0L  :  values[0];	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
441	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  values[1];  [CE]  incompatible  types  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  values[1];  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  ==  0)?  0L  :  values[1];	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
442	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  0L;  [CE]  incompatible  types  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  ==  0)?  0L  :  0L;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  ==  0)?  0L  :  0L;	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
443	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
444	[BUG]  [BUGGY]  long  instant  =  1  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
445	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  27  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  27  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
446	[BUG]  [BUGGY]  long  instant  =  27  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  27  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  27  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
447	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
448	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(iChronology,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getMonthOfYear(iChronology,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getMonthOfYear(iChronology,  fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
449	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
450	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
451	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1,  values);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex  +  1,  values);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
452	[BUG]  [BUGGY]  int[]  values  =  partial.getFields(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFields(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFields(fieldIndex);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
453	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldsWithValue(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFieldsWithValue(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFieldsWithValue(partial,  fieldIndex);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
454	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues()  -  1;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getValues()  -  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getValues()  -  1;	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
455	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues()  +  1;  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getValues()  +  1;  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getValues()  +  1;	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
456	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
457	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
458	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	34	None	replace
459	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1,  values);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1,  values);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	30	None	replace
460	[BUG]  [BUGGY]  int[]  values  =  partial.getdayOfMonth().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getdayOfMonth().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getdayOfMonth().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
461	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldValues().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFieldValues().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFieldValues().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
462	[BUG]  [BUGGY]  int[]  values  =  partial.getDays().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getDays().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getDays().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
463	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	6	None	replace
464	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex  +  1,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex  +  1,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex  +  1,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	6	None	replace
465	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
466	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  fieldIndex)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  fieldIndex)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i)!=  fieldIndex)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
467	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [CE]  ')'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
468	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  }  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
469	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
470	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).intValue();  }  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).intValue();  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).intValue();  }	  	non-compiled	[CE]  ')'  expected	19	None	add
471	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  fieldIndex)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i)!=  fieldIndex)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i)!=  fieldIndex)  {  long  instant  =  0l;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
472	[BUG]  [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)  ==  null)  {  long  instant  =  0l;  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  i  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0l;  if(partial.getFieldType(i).getField(iChronology)  ==  null)  {  long  instant  =  0l;  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0l;    if(partial.getFieldType(i).getField(iChronology)  ==  null)  {  long  instant  =  0l;  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  i	19	None	add
473	[BUG]  [BUGGY]  int[]  values  =  partial.getYear().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getYear().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getYear().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
474	[BUG]  [BUGGY]  int[]  values  =  partial.getStartOfYear().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getStartOfYear().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getStartOfYear().getValues();	      int[]    values    =    iChronology.getDayOfMonth().getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	37	None	replace
475	[BUG]  [BUGGY]  int[]  values  =  partial.getWidthValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getWidthValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getWidthValues();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	36	None	replace
476	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValuesInYear();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer[]  values  =  partial.getValuesInYear();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer[]  values  =  partial.getValuesInYear();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
477	[BUG]  [BUGGY]  int  instant  =  null;  [CE]  incompatible  types  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  instant  =  null;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  instant  =  null;	  int    instant    =    0;    	non-compiled	[CE]  incompatible  types	14	None	replace
478	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValuesInYear(partial,  valueToAdd);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
479	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
480	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology);	  Integer    instant    =    0L;    	non-compiled	[CE]  incompatible  types	15	None	replace
481	[BUG]  [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).intValue();  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).intValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(partial!=  null)?  0L  :  partial.getFieldType(0).getField(iChronology).intValue();	  Integer    instant    =    0L;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
482	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(Integer,int[])  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);	  Integer    instant    =    0L;    	non-compiled	[CE]  no  suitable  method  found  for  set(Integer,int[])	15	None	replace
483	[BUG]  [BUGGY]  Integer  instant  =  partial.getFieldType(0).getField(iChronology).set(0,  values,  valueToAdd);  [CE]  no  suitable  method  found  for  set(int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =  partial.getFieldType(0).getField(iChronology).set(0,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =  partial.getFieldType(0).getField(iChronology).set(0,  values,  valueToAdd);	  Integer    instant    =    0L;    	non-compiled	[CE]  no  suitable  method  found  for  set(int,int[],int)	15	None	replace
484	[BUG]  [BUGGY]  Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology).intValue();  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology).intValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  instant  =(valueToAdd  <  1)?  0L  :  partial.getFieldType(0).getField(iChronology).intValue();	  Integer    instant    =    0L;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
485	[BUG]  [BUGGY]  long  instant  =  1  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1  *  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	  long    instant    =    0L    *    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
486	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }	  	non-compiled	[CE]  ')'  expected	12	None	add
487	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  }	  	non-compiled	[CE]  ')'  expected	12	None	add
488	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  }  [CE]  ')'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  }	  	non-compiled	[CE]  ')'  expected	12	None	add
489	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  }  [CE]  ')'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  }	  	non-compiled	[CE]  ')'  expected	12	None	add
490	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }  [CE]  ')'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology);  }	  	non-compiled	[CE]  ')'  expected	12	None	add
491	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  i  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  i	12	None	add
492	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).intValue();  }  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).intValue();  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getFieldType(i).getField(iChronology).intValue();  }	  	non-compiled	[CE]  ')'  expected	12	None	add
493	[BUG]  [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getValue(i),  fieldIndex,  values,  valueToAdd);  }  [CE]  cannot  find  symbol  i  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0;  if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getValue(i),  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0;    if(partial.getFieldType(i)!=  null)  {  long  instant  =  0;  }  else  {  return  new  Integer(partial.getValue(i),  fieldIndex,  values,  valueToAdd);  }	  	non-compiled	[CE]  cannot  find  symbol  i	12	None	add
494	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [CE]  variable  instant  might  not  have  been  initialized  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);	  long    instant    =    0;    	non-compiled	[CE]  variable  instant  might  not  have  been  initialized	13	None	replace
495	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).getStandardValue();  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).getStandardValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).getStandardValue();	  long    instant    =    0;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
496	[BUG]  [BUGGY]  long  instant  =(partial.getValue()  ==  null)?  0  :  partial.getValue();  [CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial.getValue()  ==  null)?  0  :  partial.getValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial.getValue()  ==  null)?  0  :  partial.getValue();	  long    instant    =    0;    	non-compiled	[CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	13	None	replace
497	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).getUnitMillis();  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).getUnitMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0  :  partial.getFieldType(0).getField(iChronology).getUnitMillis();	  long    instant    =    0;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
498	[BUG]  [BUGGY]  long  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [CE]  variable  instant  might  not  have  been  initialized  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial!=  null)?  0  :  partial.getFieldType(0).getField(iChronology).set(instant,  values[0]);	  long    instant    =    0;    	non-compiled	[CE]  variable  instant  might  not  have  been  initialized	13	None	replace
499	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =(int[])partial.getPartialValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
500	[BUG]  [BUGGY]  int[]  values  =  new  int[partial.getValues()  ];  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  new  int[partial.getValues()  ];  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  new  int[partial.getValues()  ];	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	3	None	replace
501	[BUG]  [BUGGY]  byte  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [CE]  incompatible  types  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  byte  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	byte  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology);    	non-compiled	[CE]  incompatible  types	39	None	replace
502	[BUG]  [BUGGY]  byte  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [CE]  no  suitable  method  found  for  set(byte,int[])  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  byte  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	byte  instant  =(partial  ==  null)?  0L  :  partial.getFieldType(0).getField(iChronology).set(instant,  values);	  long    instant    =(partial    ==    null)?    0L    :    partial.getFieldType(0).getField(iChronology).set(instant,    values);    	non-compiled	[CE]  no  suitable  method  found  for  set(byte,int[])	41	None	replace
503	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	33	None	replace
504	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  partial.getMonthOfYear(fieldIndex,  valueToAdd);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
505	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values[valueToAdd]);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values[valueToAdd]);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values[valueToAdd]);	      int    valueToAdd    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	31	None	replace
506	[BUG]  [BUGGY]  Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
507	[BUG]  [BUGGY]  theMonthOfYear  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  theMonthOfYear  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  theMonthOfYear  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	theMonthOfYear  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol  theMonthOfYear	35	None	replace
508	[BUG]  [BUGGY]  valueToAdd  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  valueToAdd  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	valueToAdd  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
509	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDaysInYearMonth(partial,  fieldIndex);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
510	[BUG]  [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  iChronology.getDayOfMonth(partial,  fieldIndex,  valueToAdd);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
511	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth(fieldIndex,  valueToAdd);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int  valueToAdd  =  partial.getDayOfMonth(fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int  valueToAdd  =  partial.getDayOfMonth(fieldIndex,  valueToAdd);	      int    valueToAdd    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	32	None	replace
512	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
513	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	29	None	replace
514	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  1;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
515	[BUG]  [BUGGY]  long  instant  =  1;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  1;	  long    instant    =    0L    +    1;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	18	8	replace
516	[BUG]  [BUGGY]  long  instant  =  0,  valueToAdd  =  0;  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0,  valueToAdd  =  0;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0,  valueToAdd  =  0;	  long    instant    =    0L    +    1;    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	18	None	replace
517	[BUG]  [BUGGY]  long  instant  =(partial.getValue()  ==  null)?  0L  :  partial.getValue();  [CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial.getValue()  ==  null)?  0L  :  partial.getValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial.getValue()  ==  null)?  0L  :  partial.getValue();	  long    instant    =    0l;    	non-compiled	[CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	20	None	replace
518	[BUG]  [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getValue();  [CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =(partial  ==  null)?  0L  :  partial.getValue();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =(partial  ==  null)?  0L  :  partial.getValue();	  long    instant    =    0l;    	non-compiled	[CE]  method  getValue  in  interface  ReadablePartial  cannot  be  applied  to  given  types;	20	None	replace
519	[BUG]  [BUGGY]  int[]  values  =  partial.getFields(fieldIndex,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getFields(fieldIndex,  valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getFields(fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
520	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex,  valuesToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  iChronology.getFields(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  iChronology.getFields(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getFields(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
521	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  float  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  float  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    float  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
522	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  byte  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  byte  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    byte  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
523	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    int  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
524	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getPartialFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getPartialFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getPartialFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
525	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_SECOND;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	25	None	add
526	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeAdd(valueToAdd));  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeAdd(valueToAdd));  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeAdd(valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
527	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeMultiply(valueToAdd));  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeMultiply(valueToAdd));  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeMultiply(valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
528	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeNegate(valueToAdd));  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeNegate(valueToAdd));  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.safeNegate(valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
529	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values.length);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  values.length);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  values.length);	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
530	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.toDayOfMonth(valueToAdd));  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.toDayOfMonth(valueToAdd));  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getValues(partial,  fieldIndex,  ValueUtils.toDayOfMonth(valueToAdd));	      int[]    values    =    getValues(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	38	None	replace
531	[BUG]  [BUGGY]  int[]  values  =  partial.getDayOfMonth(fieldIndex,  iChronology);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  partial.getDayOfMonth(fieldIndex,  iChronology);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  partial.getDayOfMonth(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getDayOfMonth(partial,    fieldIndex);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
532	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  initial  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  initial  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  initial  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
533	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  timePart  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  timePart  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  timePart  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
534	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
535	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    long  instant  =  0L  *  DateTimeUtils.currentTimeMillis();  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	27	None	add
536	[BUG]  [BUGGY]  int[]  values  =  getImmediateParentPointer().getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getImmediateParentPointer().getValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getImmediateParentPointer().getValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
537	[BUG]  [BUGGY]  int[]  values  =  getImmediatePartialValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  int[]  values  =  getImmediatePartialValues();  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	int[]  values  =  getImmediatePartialValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
538	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    char  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
539	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
540	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  float  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  float  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    float  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
541	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  char  instant  =  partial.getFieldType(i).getField(iChronology);  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  char  instant  =  partial.getFieldType(i).getField(iChronology);  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    char  instant  =  partial.getFieldType(i).getField(iChronology);  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
542	[BUG]  [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_DAY;    long  instant  =  0L  *  DateTimeConstants.MILLIS_PER_DAY;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	22	None	add
543	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues(valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  Integer  values[]  =  partial.getValues(valueToAdd);  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	Integer  values[]  =  partial.getValues(valueToAdd);	      Integer    values[]    =    partial.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
544	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  31  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  31  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
545	[BUG]  [BUGGY]  long  instant  =  31  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  31  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  31  *  DateTimeConstants.MILLIS_PER_SECOND;	  long    instant    =    0L    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	26	8	replace
546	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  /  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  0L  /  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
547	[BUG]  [BUGGY]  long  instant  =  0L  /  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  /  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  0L  /  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
548	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  28  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	long  instant  =  28  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
549	[BUG]  [BUGGY]  long  instant  =  28  *  DateTimeUtils.currentTimeMillis();  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  28  *  DateTimeUtils.currentTimeMillis();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long  instant  =  28  *  DateTimeUtils.currentTimeMillis();	  long    instant    =    0L    *    DateTimeUtils.currentTimeMillis();    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	28	8	replace
550	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getPartialType(i).getField(iChronology).set(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
551	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
552	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  Long  instant  =  0L  +  1;  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  Long  instant  =  0L  +  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    Long  instant  =  0L  +  1;	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
553	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[1]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[1]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[1]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
554	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getPartialType(i).getField(iChronology).add(instant,  values[i]);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getPartialType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getPartialType(i).getField(iChronology).add(instant,  values[i]);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
555	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).set(instant,  values);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
556	[BUG]  [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values,  valueToAdd);  [CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {    [BUGGY]  long  instant  =  0L  +  1;  long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	long    instant    =    0L    +    1;    long  instant  =  0L  +  1;  thisYear  =  partial.getFieldType(i).getField(iChronology).add(instant,  values,  valueToAdd);	  	non-compiled	[CE]  variable  instant  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	17	None	add
