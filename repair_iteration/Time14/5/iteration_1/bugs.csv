bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
2	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);  [FE]  AssertionFailedError  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
3	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int,int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int)	9	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  +  1);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  +  1);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
5	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  +  1);  [FE]  AssertionFailedError  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  +  1);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  +  1);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
6	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  172800000  for  monthOfYear  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  *  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  *  DateTimeConstants.MILLIS_PER_DAY);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  172800000  for  monthOfYear  must  be  in  the  range  [1  	9	15	replace
7	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  *  DateTimeConstants.MILLIS_PER_DAY);  [FE]  org.joda.time.IllegalFieldValueException:  Value  172800000  for  monthOfYear  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  *  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  *  DateTimeConstants.MILLIS_PER_DAY);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  172800000  for  monthOfYear  must  be  in  the  range  [1  	9	15	replace
8	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  	9	15	replace
9	[BUG]  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  	9	15	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
11	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [FE]  AssertionFailedError  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
12	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);  [CE]  cannot  find  symbol  chronology  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	non-compiled	[CE]  cannot  find  symbol  chronology	9	None	replace
13	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1,  valueToAdd);  [CE]  no  suitable  method  found  for  set(long,int,int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1,  valueToAdd);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  -  1,  valueToAdd);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	non-compiled	[CE]  no  suitable  method  found  for  set(long,int,int)	9	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	  	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
15	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	  	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  AssertionFailedError  	9	15	replace
16	[BUG]  [BUGGY]    int[]  values  =  partial.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getValues();  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
17	[BUG]  [BUGGY]    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  i);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  i);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  i);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	add
18	[BUG]  [BUGGY]    int[]  values  =  partial.getValues(i);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getValues(i);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getValues(i);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
19	[BUG]  [BUGGY]    int[]  values  =  iChronology.getValues(partial,  i);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  iChronology.getValues(partial,  i);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  iChronology.getValues(partial,  i);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
20	[BUG]  [BUGGY]    int[]  values  =  iChronology.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  iChronology.getValues();  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  iChronology.getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
21	[BUG]  [BUGGY]    ((  BasicChronology)partial).set(instant,  values[i]);  [CE]  no  suitable  method  found  for  set(long,int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    ((  BasicChronology)partial).set(instant,  values[i]);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    ((  BasicChronology)partial).set(instant,  values[i]);		non-compiled	[CE]  no  suitable  method  found  for  set(long,int)	10	None	add
22	[BUG]  [BUGGY]    int[]  values  =  partial.getFieldType(i).getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getFieldType(i).getValues();  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getFieldType(i).getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
23	[BUG]  [BUGGY]    int[]  values  =(int[])partial.getValues(i);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =(int[])partial.getValues(i);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =(int[])partial.getValues(i);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
24	[BUG]  [BUGGY]    int  valueToAdd  =  partial.getValue(i);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int  valueToAdd  =  partial.getValue(i);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int  valueToAdd  =  partial.getValue(i);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
25	[BUG]  [BUGGY]    int  valueToAdd  =  partial.getFieldType(i).getField(iChronology);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int  valueToAdd  =  partial.getFieldType(i).getField(iChronology);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int  valueToAdd  =  partial.getFieldType(i).getField(iChronology);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
26	[BUG]  [BUGGY]    int  valueToAdd  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int  valueToAdd  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int  valueToAdd  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
27	[BUG]  [BUGGY]    int  valueToAdd  =  partial.getValue(i).getFieldType(iChronology);  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int  valueToAdd  =  partial.getValue(i).getFieldType(iChronology);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int  valueToAdd  =  partial.getValue(i).getFieldType(iChronology);		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
28	[BUG]  [BUGGY]    int[]  values  =  partial.getValues(i,  valueToAdd);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getValues(i,  valueToAdd);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getValues(i,  valueToAdd);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
29	[BUG]  [BUGGY]    int  valueToAdd  =  partial.getValue(i).intValue();  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int  valueToAdd  =  partial.getValue(i).intValue();  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int  valueToAdd  =  partial.getValue(i).intValue();		non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
30	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  &  0xFFFF);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  &  0xFFFF);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	8	replace
31	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  &  0xFFFF);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  &  0xFFFF);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  &  0xFFFF);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	9	8	replace
32	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  +  1]);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  +  1]);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  	9	15	replace
33	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  +  1]);  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  +  1]);  [BUGGY]  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  +  1]);	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  monthOfYear  must  be  in  the  range  [1  	9	15	replace
34	[BUG]  [BUGGY]    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
35	[BUG]  [BUGGY]    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  i);  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  i);  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    iChronology  =  DateTimeUtils.getMonthOfYear(partial,  i);  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	10	None	add
36	[BUG]  [BUGGY]    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
37	[BUG]  [BUGGY]    int[]  values  =  partial.getValues();  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getValues();  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getValues();  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  values[i]);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
38	[BUG]  [BUGGY]    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
39	[BUG]  [BUGGY]    Integer[]  values  =  partial.getValues();  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [CONTEXT]  public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    Integer[]  values  =  partial.getValues();  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	    Integer[]  values  =  partial.getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	add
