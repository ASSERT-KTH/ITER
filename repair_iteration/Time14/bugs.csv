bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (valueToAdd == 0) { [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   [BUGGY] if (valueToAdd == 0) { [BUGGY] return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	replace	
2	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   [BUGGY] [BUGGY] if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	206	206	8	add	
3	[BUG] [BUGGY] if (DateTimeUtils.isContiguous(partial)) { [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  [BUGGY] if (DateTimeUtils.isContiguous(partial)) { [BUGGY] long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	
4	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  [BUGGY] [BUGGY] if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	add	
5	[BUG] [BUGGY] long instant = 0L; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { [BUGGY] long instant = 0L; [BUGGY] for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	replace	
6	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { [BUGGY] [BUGGY] long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	211	211	8	add	
7	[BUG] [BUGGY] for (int i = 0, isize = partial.size(); i < isize; i++) { [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; [BUGGY] for (int i = 0, isize = partial.size(); i < isize; i++) { [BUGGY] instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	
8	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; [BUGGY] [BUGGY] for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	
9	[BUG] [BUGGY] instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { [BUGGY] instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); [BUGGY] } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	replace	
10	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {   if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { [BUGGY] [BUGGY] instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	213	213	8	add	
11	[BUG] [BUGGY] return MIN; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int getMinimumValue() { [BUGGY] return MIN; [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getMinimumValue [RETURN_TYPE] int  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.38851434494290565	334	334	8	replace	
12	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int getMinimumValue() { [BUGGY] [BUGGY] return MIN; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getMinimumValue [RETURN_TYPE] int  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.38851434494290565	334	334	8	add	
13	[BUG] [BUGGY] return iMax; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int getMaximumValue() { [BUGGY] return iMax; [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getMaximumValue [RETURN_TYPE] int  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.38851434494290565	339	339	8	replace	
14	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int getMaximumValue() { [BUGGY] [BUGGY] return iMax; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getMaximumValue [RETURN_TYPE] int  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.38851434494290565	339	339	8	add	
15	[BUG] [BUGGY] super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { [BUGGY] super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); [BUGGY] iChronology = chronology; iMax = iChronology.getMaxMonth(); iLeapMonth = leapMonth; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	51	51	8	replace	
16	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { [BUGGY] [BUGGY] super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); iChronology = chronology; iMax = iChronology.getMaxMonth(); iLeapMonth = leapMonth; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	51	51	8	add	
17	[BUG] [BUGGY] iChronology = chronology; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); [BUGGY] iChronology = chronology; [BUGGY] iMax = iChronology.getMaxMonth(); iLeapMonth = leapMonth; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	52	52	8	replace	
18	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); [BUGGY] [BUGGY] iChronology = chronology; iMax = iChronology.getMaxMonth(); iLeapMonth = leapMonth; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	52	52	8	add	
19	[BUG] [BUGGY] iMax = iChronology.getMaxMonth(); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); iChronology = chronology; [BUGGY] iMax = iChronology.getMaxMonth(); [BUGGY] iLeapMonth = leapMonth; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	53	53	8	replace	
20	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); iChronology = chronology; [BUGGY] [BUGGY] iMax = iChronology.getMaxMonth(); iLeapMonth = leapMonth; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	53	53	8	add	
21	[BUG] [BUGGY] iLeapMonth = leapMonth; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); iChronology = chronology; iMax = iChronology.getMaxMonth(); [BUGGY] iLeapMonth = leapMonth; [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	54	54	8	replace	
22	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); iChronology = chronology; iMax = iChronology.getMaxMonth(); [BUGGY] [BUGGY] iLeapMonth = leapMonth; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	54	54	8	add	
23	[BUG] [BUGGY] } [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); iChronology = chronology; iMax = iChronology.getMaxMonth(); iLeapMonth = leapMonth; [BUGGY] } [BUGGY]  [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	55	55	8	replace	
24	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); iChronology = chronology; iMax = iChronology.getMaxMonth(); iLeapMonth = leapMonth; [BUGGY] [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] <init> [RETURN_TYPE] BasicChronology,int)  BasicChronology chronology int leapMonth [VARIABLES] boolean long serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	55	55	8	add	
25	[BUG] [BUGGY] return iChronology.getMonthOfYear(instant); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int get(long instant) { [BUGGY] return iChronology.getMonthOfYear(instant); [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] get [RETURN_TYPE] int  long instant [VARIABLES] boolean long instant serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	72	72	8	replace	
26	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public int get(long instant) { [BUGGY] [BUGGY] return iChronology.getMonthOfYear(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] get [RETURN_TYPE] int  long instant [VARIABLES] boolean long instant serialVersionUID int MIN iLeapMonth iMax leapMonth BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	72	72	8	add	
27	[BUG] [BUGGY] FieldUtils.verifyValueBounds(this, month, MIN, iMax); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { [BUGGY] FieldUtils.verifyValueBounds(this, month, MIN, iMax); [BUGGY]  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	293	293	8	replace	
28	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { [BUGGY] [BUGGY] FieldUtils.verifyValueBounds(this, month, MIN, iMax);  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	293	293	8	add	
29	[BUG] [BUGGY] int thisYear = iChronology.getYear(instant); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  [BUGGY] int thisYear = iChronology.getYear(instant); [BUGGY]  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	295	295	8	replace	
30	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  [BUGGY] [BUGGY] int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	295	295	8	add	
31	[BUG] [BUGGY] int thisDom = iChronology.getDayOfMonth(instant, thisYear); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  int thisYear = iChronology.getYear(instant);  [BUGGY] int thisDom = iChronology.getDayOfMonth(instant, thisYear); [BUGGY] int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	297	297	8	replace	
32	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  int thisYear = iChronology.getYear(instant);  [BUGGY] [BUGGY] int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	297	297	8	add	
33	[BUG] [BUGGY] int maxDom = iChronology.getDaysInYearMonth(thisYear, month); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); [BUGGY] int maxDom = iChronology.getDaysInYearMonth(thisYear, month); [BUGGY] if (thisDom > maxDom) {  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	298	298	8	replace	
34	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); [BUGGY] [BUGGY] int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	298	298	8	add	
35	[BUG] [BUGGY] if (thisDom > maxDom) { [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); [BUGGY] if (thisDom > maxDom) { [BUGGY]  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	299	299	8	replace	
36	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long set(long instant, int month) { FieldUtils.verifyValueBounds(this, month, MIN, iMax);  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); [BUGGY] [BUGGY] if (thisDom > maxDom) {  thisDom = maxDom; }  return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	299	299	8	add	
37	[BUG] [BUGGY] return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  [BUGGY] return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +   iChronology.getMillisOfDay(instant); [BUGGY] iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	304	305	8	replace	
38	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]  int thisYear = iChronology.getYear(instant);  int thisDom = iChronology.getDayOfMonth(instant, thisYear); int maxDom = iChronology.getDaysInYearMonth(thisYear, month); if (thisDom > maxDom) {  thisDom = maxDom; }  [BUGGY] [BUGGY] return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +   iChronology.getMillisOfDay(instant); iChronology.getMillisOfDay(instant); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] set [RETURN_TYPE] long  long instant int month [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	304	305	8	add	
39	[BUG] [BUGGY] return iChronology.years(); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public DurationField getRangeDurationField() { [BUGGY] return iChronology.years(); [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getRangeDurationField [RETURN_TYPE] DurationField  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	310	310	8	replace	
40	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public DurationField getRangeDurationField() { [BUGGY] [BUGGY] return iChronology.years(); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getRangeDurationField [RETURN_TYPE] DurationField  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	310	310	8	add	
41	[BUG] [BUGGY] return iChronology.days(); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public DurationField getLeapDurationField() { [BUGGY] return iChronology.days(); [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getLeapDurationField [RETURN_TYPE] DurationField  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	329	329	8	replace	
42	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public DurationField getLeapDurationField() { [BUGGY] [BUGGY] return iChronology.days(); } [CLASS] BasicMonthOfYearDateTimeField [METHOD] getLeapDurationField [RETURN_TYPE] DurationField  [VARIABLES] boolean long datePart difference instant minuendInstant minuendRem monthToUse months serialVersionUID subtrahendInstant subtrahendRem timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay maxDom minuendDom minuendMonth minuendYear month monthToUse months remMonthToUse subtrahendDom subtrahendMonth subtrahendYear thisDom thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.3592106040535498	329	329	8	add	
43	[BUG] [BUGGY] dayToUse = maxDay; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] }      int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { [BUGGY] dayToUse = maxDay; [BUGGY] }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	replace	
44	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] }      int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { [BUGGY] [BUGGY] dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.2886751345948129	139	139	8	add	
45	[BUG] [BUGGY] instant = add(instant, valueToAdd); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]  if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } [BUGGY] instant = add(instant, valueToAdd); [BUGGY] return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	replace	
46	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]  if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } [BUGGY] [BUGGY] instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	215	215	8	add	
47	[BUG] [BUGGY] return iChronology.get(partial, instant); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); [BUGGY] return iChronology.get(partial, instant); [BUGGY] } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	replace	
48	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] if (valueToAdd == 0) { return values; }  if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); [BUGGY] [BUGGY] return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] int[]  ReadablePartial partial int fieldIndex int[] values int valueToAdd [VARIABLES] int[] values ReadablePartial partial boolean long datePart instant monthToUse months serialVersionUID timePart yearToUse int MIN dayToUse fieldIndex i iLeapMonth iMax i_monthToUse i_months i_yearToUse isize leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear valueToAdd yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.23570226039551587	216	216	8	add	
49	[BUG] [BUGGY] yearToUse = thisYear + (monthToUse / iMax); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { [BUGGY] yearToUse = thisYear + (monthToUse / iMax); [BUGGY] monthToUse = (monthToUse % iMax) + 1; } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; } monthToUse = iMax - remMonthToUse + 1; [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.22360679774997896	114	114	8	replace	
50	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { [BUGGY] [BUGGY] yearToUse = thisYear + (monthToUse / iMax); monthToUse = (monthToUse % iMax) + 1; } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; } monthToUse = iMax - remMonthToUse + 1; [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.22360679774997896	114	114	8	add	
51	[BUG] [BUGGY] monthToUse = (monthToUse % iMax) + 1; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { yearToUse = thisYear + (monthToUse / iMax); [BUGGY] monthToUse = (monthToUse % iMax) + 1; [BUGGY] } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; } monthToUse = iMax - remMonthToUse + 1;  [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.22360679774997896	115	115	8	replace	
52	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { yearToUse = thisYear + (monthToUse / iMax); [BUGGY] [BUGGY] monthToUse = (monthToUse % iMax) + 1; } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; } monthToUse = iMax - remMonthToUse + 1;  [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.22360679774997896	115	115	8	add	
53	[BUG] [BUGGY] if (months == 0) { [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long add(long instant, int months) { [BUGGY] if (months == 0) { [BUGGY] return instant; // the easy case }    long timePart = iChronology.getMillisOfDay(instant);     [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	92	92	8	replace	
54	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long add(long instant, int months) { [BUGGY] [BUGGY] if (months == 0) { return instant; // the easy case }    long timePart = iChronology.getMillisOfDay(instant);     [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	92	92	8	add	
55	[BUG] [BUGGY] long timePart = iChronology.getMillisOfDay(instant); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long add(long instant, int months) { if (months == 0) { return instant; // the easy case }    [BUGGY] long timePart = iChronology.getMillisOfDay(instant); [BUGGY]     int thisYear = iChronology.getYear(instant); int thisMonth = iChronology.getMonthOfYear(instant, thisYear);     [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	98	98	8	replace	
56	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] public long add(long instant, int months) { if (months == 0) { return instant; // the easy case }    [BUGGY] [BUGGY] long timePart = iChronology.getMillisOfDay(instant);     int thisYear = iChronology.getYear(instant); int thisMonth = iChronology.getMonthOfYear(instant, thisYear);     [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	98	98	8	add	
57	[BUG] [BUGGY] int thisYear = iChronology.getYear(instant); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] return instant; // the easy case }    long timePart = iChronology.getMillisOfDay(instant);     [BUGGY] int thisYear = iChronology.getYear(instant); [BUGGY] int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	103	103	8	replace	
58	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] return instant; // the easy case }    long timePart = iChronology.getMillisOfDay(instant);     [BUGGY] [BUGGY] int thisYear = iChronology.getYear(instant); int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	103	103	8	add	
59	[BUG] [BUGGY] int thisMonth = iChronology.getMonthOfYear(instant, thisYear); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] }    long timePart = iChronology.getMillisOfDay(instant);     int thisYear = iChronology.getYear(instant); [BUGGY] int thisMonth = iChronology.getMonthOfYear(instant, thisYear); [BUGGY]      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { yearToUse = thisYear + (monthToUse / iMax); [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	104	104	8	replace	
60	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] }    long timePart = iChronology.getMillisOfDay(instant);     int thisYear = iChronology.getYear(instant); [BUGGY] [BUGGY] int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { yearToUse = thisYear + (monthToUse / iMax); [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	104	104	8	add	
61	[BUG] [BUGGY] int monthToUse = thisMonth - 1 + months; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]  int thisYear = iChronology.getYear(instant); int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  [BUGGY] int monthToUse = thisMonth - 1 + months; [BUGGY] if (monthToUse >= 0) { yearToUse = thisYear + (monthToUse / iMax); monthToUse = (monthToUse % iMax) + 1; } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	112	112	8	replace	
62	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]  int thisYear = iChronology.getYear(instant); int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  [BUGGY] [BUGGY] int monthToUse = thisMonth - 1 + months; if (monthToUse >= 0) { yearToUse = thisYear + (monthToUse / iMax); monthToUse = (monthToUse % iMax) + 1; } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	112	112	8	add	
63	[BUG] [BUGGY] if (monthToUse >= 0) { [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] int thisYear = iChronology.getYear(instant); int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  int monthToUse = thisMonth - 1 + months; [BUGGY] if (monthToUse >= 0) { [BUGGY] yearToUse = thisYear + (monthToUse / iMax); monthToUse = (monthToUse % iMax) + 1; } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	113	113	8	replace	
64	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] int thisYear = iChronology.getYear(instant); int thisMonth = iChronology.getMonthOfYear(instant, thisYear);      int yearToUse;  int monthToUse = thisMonth - 1 + months; [BUGGY] [BUGGY] if (monthToUse >= 0) { yearToUse = thisYear + (monthToUse / iMax); monthToUse = (monthToUse % iMax) + 1; } else { yearToUse = thisYear + (monthToUse / iMax) - 1; monthToUse = Math.abs(monthToUse); int remMonthToUse = monthToUse % iMax;  if (remMonthToUse == 0) { remMonthToUse = iMax; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	113	113	8	add	
65	[BUG] [BUGGY] int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] if (monthToUse == 1) { yearToUse += 1; } }      [BUGGY] int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); [BUGGY] int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	136	136	8	replace	
66	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] if (monthToUse == 1) { yearToUse += 1; } }      [BUGGY] [BUGGY] int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	136	136	8	add	
67	[BUG] [BUGGY] int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] yearToUse += 1; } }      int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); [BUGGY] int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); [BUGGY] if (dayToUse > maxDay) { dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	137	137	8	replace	
68	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] yearToUse += 1; } }      int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); [BUGGY] [BUGGY] int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	137	137	8	add	
69	[BUG] [BUGGY] if (dayToUse > maxDay) { [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] } }      int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); [BUGGY] if (dayToUse > maxDay) { [BUGGY] dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	138	138	8	replace	
70	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] } }      int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); [BUGGY] [BUGGY] if (dayToUse > maxDay) { dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	138	138	8	add	
71	[BUG] [BUGGY] long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]   int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { dayToUse = maxDay; }    [BUGGY] long datePart =   iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); [BUGGY] iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	144	145	8	replace	
72	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT]   int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { dayToUse = maxDay; }    [BUGGY] [BUGGY] long datePart =   iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	144	145	8	add	
73	[BUG] [BUGGY] return datePart + timePart; [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); [BUGGY] return datePart + timePart; [BUGGY] } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	146	146	8	replace	
74	[BUG] [BUGGY] [FE] org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1 [CONTEXT] int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); if (dayToUse > maxDay) { dayToUse = maxDay; }    long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); [BUGGY] [BUGGY] return datePart + timePart; } [CLASS] BasicMonthOfYearDateTimeField [METHOD] add [RETURN_TYPE] long  long instant int months [VARIABLES] boolean long datePart instant serialVersionUID timePart int MIN dayToUse iLeapMonth iMax leapMonth maxDay monthToUse months remMonthToUse thisMonth thisYear yearToUse BasicChronology chronology iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.21320071635561041	146	146	8	add	
