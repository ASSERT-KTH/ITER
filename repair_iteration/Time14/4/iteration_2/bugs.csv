bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(instant);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getYearValues(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getYearValues(instant);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
2	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  instant);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getYearValues(partial,  instant);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
3	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
4	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getYearValues(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getYearValues(instant,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
5	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getYearValues(partial);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
6	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues(instant);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getMonthOfYearValues(instant);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
7	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues();  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getYearValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getYearValues();	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
8	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDays(instant);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getDays(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getDays(instant);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
9	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearValues(instant);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getDaysInYearValues(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getDaysInYearValues(instant);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
10	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
11	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  values);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
12	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
13	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  DateTimeUtils.getMonthOfYear(partial,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
14	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)+  1;  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)+  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)+  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
15	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)-  1;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)-  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant)-  1;	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
16	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(instant);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues(instant);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
17	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd;  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues(),  valueToAdd;	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
18	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues(),  valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  ';'  expected	16	None	replace
19	[BUG]  [BUGGY]  Integer[]  values  =  partial.getAllValues();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getAllValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getAllValues();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues()  -  1;  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues()  -  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues()  -  1;	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
21	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues()  /  2;  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues()  /  2;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues()  /  2;	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
22	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(instant);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(instant);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getFieldType(iChronology).getValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(),  valueToAdd;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(),  valueToAdd);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  ';'  expected	13	None	replace
26	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(fieldIndex);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getFieldValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getFieldValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues()  -  1;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd,  instant);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
30	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
31	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
32	[BUG]  [BUGGY]  thisYear  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  thisYear  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	thisYear  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  int[]  values  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
35	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    For(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
36	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  -  1;  i++)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size());  i  <  isize  -  1;  i++)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
37	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {	  	non-compiled	[CE]  >  expected	3	None	add
38	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
39	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  estize  =  partial.size();  i  <  isize  -  1;  i++)  {  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  estize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    for(int  i  =  0,  estize  =  partial.size();  i  <  isize  -  1;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
40	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
41	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  instant,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
42	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(instant,  iChronology);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(instant,  iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(instant,  iChronology);	      int[]    values    =    iChronology.getValues(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(iChronology,  instant);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(iChronology,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(iChronology,  instant);	      int[]    values    =    iChronology.getValues(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant  +  1);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant  +  1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  instant  +  1);	      int[]    values    =    iChronology.getValues(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  instant,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  instant,  fieldIndex);	      int[]    values    =    iChronology.getValues(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	31	None	add
47	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  For(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  For(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    For(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {	  	non-compiled	[CE]  '.class'  expected	31	None	add
48	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size();  i  <  isize);  i++)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size();  i  <  isize);  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    for(int  i  =  1,  isize  =  partial.size();  i  <  isize);  i++)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
49	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {	  	non-compiled	[CE]  >  expected	31	None	add
50	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size());  i  <  isize;  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size());  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    for(int  i  =  1,  isize  =  partial.size());  i  <  isize;  i++)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
51	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size();  i  >=  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size();  i  >=  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    for(int  i  =  1,  isize  =  partial.size();  i  >=  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	31	None	add
52	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	31	None	add
53	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  estize  =  partial.size();  i  <  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  1,  estize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    for(int  i  =  1,  estize  =  partial.size();  i  <  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	31	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  valueToAdd;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  valueToAdd;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	12	replace
55	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  valueToAdd;  i++)  {  [FE]  AssertionFailedError  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  valueToAdd;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  valueToAdd;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	12	replace
56	[BUG]  [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  ISIZING;  i++)  {  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  ISIZING;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  ISIZING;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  ISIZING;  i++)  {  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  ISIZING;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  values  =  partial.size();  i  <  ISIZING;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  instant;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  instant;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	15	replace
59	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  instant;  i++)  {  [FE]  AssertionFailedError  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  instant;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  instant;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	15	replace
60	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  size;  i++)  {  [CE]  cannot  find  symbol  size  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  size;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  size;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  size	9	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZING_FACTOR;  i++)  {  [CE]  cannot  find  symbol  ISIZING_FACTOR  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZING_FACTOR;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZING_FACTOR;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  ISIZING_FACTOR	9	None	replace
62	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
63	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
64	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
65	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
66	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  4;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  4;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
67	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  4;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  4;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  4;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
68	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	8	replace
69	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  1;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	8	replace
70	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +);  i++)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +);  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +);  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant);  i++)  {  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant);  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant);  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1)  {  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  1)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	15	replace
74	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	15	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  1,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
76	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  1,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
78	[BUG]  [BUGGY]  for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  2,  isize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  4,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  4,  isize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
80	[BUG]  [BUGGY]  for(int  i  =  4,  isize  =  partial.size();  i  <  isize;  i++)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  4,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  4,  isize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	15	replace
82	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  1,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	15	replace
83	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	15	replace
84	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	15	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  10,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  10,  isize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
86	[BUG]  [BUGGY]  for(int  i  =  10,  isize  =  partial.size();  i  <  isize;  i++)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  10,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  10,  isize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	15	replace
87	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
88	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
89	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
90	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
91	[BUG]  [BUGGY]  minuteOfMonth  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  minuteOfMonth  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	minuteOfMonth  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  2;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
93	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  2;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  2;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
95	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  -  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	15	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  -  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	13	replace
97	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  -  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	13	replace
98	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
99	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  1;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	4	8	replace
100	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
101	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
102	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
103	[BUG]  [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Instant[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
104	[BUG]  [BUGGY]  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
105	[BUG]  [BUGGY]  instant  =  iChronology.getDayOfMonth(partial,  values);  [CE]  illegal  start  of  type  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  iChronology.getDayOfMonth(partial,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  iChronology.getDayOfMonth(partial,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
106	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  values);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
107	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
108	[BUG]  [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Instant[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
109	[BUG]  [BUGGY]  instant  =  iChronology.get(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  iChronology.get(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  iChronology.get(partial,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
110	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  instant,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
111	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
112	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(instant);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getMonthOfYear(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getMonthOfYear(instant);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
113	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  instant);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getMonthOfYearValue(partial,  instant);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
114	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  instant);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  instant);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
115	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(iChronology,  instant);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getMonthOfYear(iChronology,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getMonthOfYear(iChronology,  instant);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
116	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(instant,  iChronology);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getMonthOfYear(instant,  iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getMonthOfYear(instant,  iChronology);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
117	[BUG]  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(0).getField(iChronology);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
118	[BUG]  [BUGGY]  instant  =  partial.getFieldType(valueToAdd).getField(iChronology);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(valueToAdd).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(valueToAdd).getField(iChronology);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
119	[BUG]  [BUGGY]  instant  =  partial.getFieldType(fieldIndex).getField(iChronology);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(fieldIndex).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(fieldIndex).getField(iChronology);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
120	[BUG]  [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(1).getField(iChronology);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
121	[BUG]  [BUGGY]  instant  =  partial.getFieldType(instant).getField(iChronology);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(instant).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(instant).getField(iChronology);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
122	[BUG]  [BUGGY]  instant  =  partial.getFieldType(timePart).getField(iChronology);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(timePart).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(timePart).getField(iChronology);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
123	[BUG]  [BUGGY]  For(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [CE]  '.class'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  For(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	For(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize;  i++)  {  [CE]  cannot  find  symbol  ISize  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  ISize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  ISize	8	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.length();  i  <  isize;  i++)  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.length();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.length();  i  <  isize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
126	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getFieldType(iChronology).getValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getFieldType(iChronology).getValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getFieldType(iChronology).getValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
127	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getValues()  -  1;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
128	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getValues()  /  2;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
129	[BUG]  [BUGGY]  int[]  values  =(int[])partial.clone();  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.clone();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.clone();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
130	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getAllValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
131	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getValuesInYear();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	29	None	add
133	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [CE]  '.class'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
134	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [CE]  >  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {	  	non-compiled	[CE]  >  expected	29	None	add
135	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {  [CE]  'else'  without  'if'  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	29	None	add
136	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  5;  i++)  {  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  5;  i++)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
137	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {  [CE]  'else'  without  'if'  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	29	None	add
138	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  5;  i++)  {  [CE]  'else'  without  'if'  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  5;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	29	None	add
139	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
140	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    if(i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {	  	non-compiled	[CE]  ')'  expected	29	None	add
141	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
142	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  '.class'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
143	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  >  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  >  expected	1	None	add
144	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  1;  i++)  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
145	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  1;  i++)  {  [CE]  'else'  without  'if'  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  1;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
146	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  if(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  if(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    if(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
147	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
148	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1)  {  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
149	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
150	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  For(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  '.class'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  For(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    For(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
151	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  >  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  >  expected	7	None	add
152	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize);  i++)  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize);  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize);  i++)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
153	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  >=  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  >=  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    for(int  i  =  0,  isize  =  partial.size()  +  1;  i  >=  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
154	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  if(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  if(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    if(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
155	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    FOR(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
156	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  with(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  with(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    with(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
157	[BUG]  [BUGGY]  Instant  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Instant  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Instant  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
158	[BUG]  [BUGGY]  long  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  long  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	long  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
159	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).add(instant,  values[i]);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
160	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(i).getFields();  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getFieldType(i).getFields();  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getFieldType(i).getFields();	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
161	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  [CE]  ')'  expected  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getInstance(partial.getFieldType(i).getField(iChronology);	      	non-compiled	[CE]  ')'  expected	12	None	replace
162	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
163	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
164	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
165	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(instant);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(instant);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
166	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getFieldValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
168	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  '.class'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
169	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  >  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  >  expected	5	None	add
170	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  2;  i++)  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size());  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
171	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  2;  i++)  {  [CE]  'else'  without  'if'  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  +  2;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
172	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {  [CE]  'else'  without  'if'  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
173	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  if(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  if(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    if(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
174	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
175	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    if(i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
176	[BUG]  [BUGGY]  int[]  values  =  getFieldValues();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getFieldValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getFieldValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
177	[BUG]  [BUGGY]  int[]  values  =  getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues(),  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues(),  valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  ';'  expected	18	None	replace
178	[BUG]  [BUGGY]  int[]  values  =  getValues(partial);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues(partial);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
179	[BUG]  [BUGGY]  int[]  values  =  getValues(),  instant);  [CE]  ';'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues(),  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues(),  instant);	      int[]    values    =    getValues();    	non-compiled	[CE]  ';'  expected	18	None	replace
180	[BUG]  [BUGGY]  int[]  values  =  getValues().length;  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues().length;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues().length;	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
181	[BUG]  [BUGGY]  int[]  values  =  getValues(),  valueToAdd;  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues(),  valueToAdd;  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues(),  valueToAdd;	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
182	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues(partial,  fieldIndex);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
183	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
184	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
185	[BUG]  [BUGGY]  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
186	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueToAdd,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueToAdd,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
187	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
189	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [CE]  '.class'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    For(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	10	None	add
190	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [CE]  >  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {	  	non-compiled	[CE]  >  expected	10	None	add
191	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length);  i++)  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length);  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  values.length);  i++)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
192	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  values.length;  i++)  {  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    for(int  i  =  0,  isize  =  partial.size());  i  <  values.length;  i++)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
193	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    FOR(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	10	None	add
194	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  values.length;  i++)  {  [CE]  'else'  without  'if'  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  >=  values.length;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
195	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [CE]  ')'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    if(i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
196	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
197	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
198	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
199	[BUG]  [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
200	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
201	[BUG]  [BUGGY]  int[]  values  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  DateTimeUtils.getMonthOfYear(partial,  fieldIndex);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
203	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  '.class'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    For(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	37	None	add
204	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  >  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  >  expected	37	None	add
205	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  *  2;  i++)  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size());  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size());  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
206	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  *  2;  i++)  {  [CE]  'else'  without  'if'  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  >=  isize  *  2;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
207	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  if(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  if(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    if(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	37	None	add
208	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {  [CE]  'else'  without  'if'  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  3;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
209	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    FOR(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	37	None	add
210	[BUG]  [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  values.length;  i++)  {  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  values  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	11	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  values.length;  i++)  {  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	11	None	replace
212	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	15	replace
213	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  +  1;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  values.length  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	15	replace
214	[BUG]  [BUGGY]  for(int  i  =  0,  values.length  =  partial.size();  i  <  values.length;  i++)  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  values.length  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  values.length  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
215	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  hash  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  hash  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
216	[BUG]  [BUGGY]  for(int  i  =  0,  hash  =  partial.size();  i  <  values.length;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  hash  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  hash  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
217	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  len  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  len  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
218	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  partial.size();  i  <  values.length;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  len  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  len  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
219	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
220	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  3;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
221	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
222	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  4;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
223	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  5;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
224	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  5;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  5;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
225	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  10;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  10;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
226	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  10;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  10;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  10;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
227	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  8;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  8;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
228	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  8;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  8;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  8;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
229	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
230	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
231	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getDayOfMonth(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getDayOfMonth(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  getDayOfMonth(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
232	[BUG]  [BUGGY]  instant  =  getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
233	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  valueToAdd,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  valueToAdd,  values);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
234	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
235	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getYear(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getYear(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  getYear(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
236	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	15	replace
237	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize  +  1;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	2	15	replace
238	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.length;  i  <  isize  +  1;  i++)  {  [CE]  cannot  find  symbol  length  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.length;  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.length;  i  <  isize  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
239	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
240	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
241	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(iChronology,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(iChronology,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(iChronology,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
242	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd,  instant);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  valueToAdd,  instant);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
243	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
244	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldsIndex,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
245	[BUG]  [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(0).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
246	[BUG]  [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(1).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(1).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
247	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i],  valueToAdd);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
248	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(i).getField(chronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
249	[BUG]  [BUGGY]  instant  =  partial.getFieldType(i),  partial.getField(iChronology).set(instant,  values[i]);  [CE]  ';'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(i),  partial.getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(i),  partial.getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  ';'  expected	15	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  ISIZES;  i++)  {  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  ISIZES;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  ISIZES;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZES;    i++)    {    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	39	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  ISIZES;  i++)  {  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  ISIZES;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  values  =  partial.size();  i  <  ISIZES;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZES;    i++)    {    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	39	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  hashCode;  i++)  {  [CE]  cannot  find  symbol  hashCode  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  hashCode;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  hashCode;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZES;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  hashCode	39	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZES_PER_MILLIS;  i++)  {  [CE]  cannot  find  symbol  ISIZES_PER_MILLIS  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZES_PER_MILLIS;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZES_PER_MILLIS;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZES;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  ISIZES_PER_MILLIS	39	None	replace
254	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  valueIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(partial,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
255	[BUG]  [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Instant[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(partial,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
256	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(partial,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
257	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1,  values);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant  +  1,  values);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  if(isize  =  partial.size();  i  <  values.length;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  if(isize  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    if(isize  =  partial.size();  i  <  values.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
259	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    (int  i  =  0,  isize  =  partial.size();  i  <  values.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
260	[BUG]  [BUGGY]  instant  =  partial.getFieldType(valueToAdd).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(valueToAdd).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(valueToAdd).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
261	[BUG]  [BUGGY]  instant  =  partial.getFieldType(fieldIndex).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(fieldIndex).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(fieldIndex).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
262	[BUG]  [BUGGY]  instant  =  partial.getFieldType(valueToAdd).getField(iChronology).set(instant,  values[valueToAdd]);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(valueToAdd).getField(iChronology).set(instant,  values[valueToAdd]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(valueToAdd).getField(iChronology).set(instant,  values[valueToAdd]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
263	[BUG]  [BUGGY]  instant  =  partial.getFieldType(instant).getField(iChronology).set(instant,  values[valueToAdd]);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(instant).getField(iChronology).set(instant,  values[valueToAdd]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(instant).getField(iChronology).set(instant,  values[valueToAdd]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
264	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  instant  +  1);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  instant  +  1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  instant  +  1);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
265	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(instant,  partial);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(instant,  partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getMonthOfYear(instant,  partial);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
266	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  instant  +  1,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  instant  +  1,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  instant  +  1,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    if(i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	37	None	add
268	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    (int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	37	None	add
269	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  Object[]  values  =  partial.getFieldType(i).getField(iChronology);  [CE]  'else'  without  'if'  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  Object[]  values  =  partial.getFieldType(i).getField(iChronology);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    Object[]  values  =  partial.getFieldType(i).getField(iChronology);	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
270	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  if(isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  if(isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    if(isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
271	[BUG]  [BUGGY]  for(int  i  =  0,  null  =  partial.size();  i  <  values.length;  i++)  {  [CE]  <identifier>  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  null  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  null  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  isize  -  1;  i++)  {  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  values  =  partial.size();  i  <  isize  -  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	4	None	replace
273	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
274	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(valueToAdd,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
275	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(valueToAdd);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
276	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  iChronology);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(valueToAdd,  iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(valueToAdd,  iChronology);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
278	[BUG]  [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  values  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  values  =  partial.size();  i  <  isize  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	2	None	replace
279	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
280	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  6;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
281	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getFieldValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
282	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getValues(1);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
283	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getValues(2);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
284	[BUG]  [BUGGY]  int[]  values  =  getValues(instant);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues(instant);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
285	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues().toArray(valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  if(i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  if(i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    if(i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
287	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  (int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  (int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    (int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
288	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(instant,  valueToAdd);	      int[]    values    =    iChronology.getValues(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  if(isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  if(isize  =  partial.size();  i  <  isize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    if(isize  =  partial.size();  i  <  isize  +  5;  i++)  {	  	non-compiled	[CE]  ')'  expected	29	None	add
290	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldsIndex,  values,  valueToAdd);  }	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(partial,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
291	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  values,  valueToAdd);  }  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  values,  valueToAdd);  }	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(partial,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
292	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(partial,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(partial,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(partial,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(partial,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
293	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues();  instant  =  iChronology.get(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(partial,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
294	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd  +  1);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd  +  1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd  +  1);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
295	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  valueToAdd);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
296	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
297	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  values[i]);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  values[i]);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values,  values[i]);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
298	[BUG]  [BUGGY]  int  valueToAdd  =  partial.getFieldType(i).getField(iChronology);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int  valueToAdd  =  partial.getFieldType(i).getField(iChronology);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int  valueToAdd  =  partial.getFieldType(i).getField(iChronology);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
299	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
300	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  iChronology.getDayOfMonth(instant,  values  [CE]  ')'  expected  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  iChronology.getDayOfMonth(instant,  values  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  iChronology.getDayOfMonth(instant,  values	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  ')'  expected	21	None	replace
301	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  super.add(partial,  fieldIndex,  values,  valueToAdd);  }	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
302	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);  }  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values);  }  else  {  instant  =  iChronology.getDayOfMonth(partial,  valueToAdd);  }	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
303	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  fieldIndex,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
304	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values,  valueToAdd);  }  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values,  valueToAdd);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values,  valueToAdd);  }	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
305	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
306	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  valueToAdd,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  valueToAdd,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  1,  isize  =  partial.size();  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    1,    isize    =    partial.size();    i    <    isize;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	31	None	add
308	[BUG]  [BUGGY]  for(int  i  =  0,  hash  =  partial.size();  i  <  ISIZING;  i++)  {  [CE]  cannot  find  symbol  ISIZING  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  hash  =  partial.size();  i  <  ISIZING;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  hash  =  partial.size();  i  <  ISIZING;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZING;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  ISIZING	9	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  isize;  i++)  {  [CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  valueToAdd  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  variable  valueToAdd  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0,  areize  =  partial.size();  i  <  isize;  i++)  {  [CE]  cannot  find  symbol  isize  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  areize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  areize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  isize	8	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0,  hasize  =  partial.size();  i  <  isize;  i++)  {  [CE]  cannot  find  symbol  isize  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  hasize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  hasize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  isize	8	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +;  i++)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
313	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  valueToAdd;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  valueToAdd;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
314	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  valueToAdd;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  valueToAdd;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  valueToAdd;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
315	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
316	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +  instant;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  2;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	38	13	replace
318	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  2;  i++)  {  [FE]  AssertionFailedError  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  /  2;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	38	13	replace
319	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2L;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2L;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
320	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2L;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2L;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2L;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	38	15	replace
321	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues(fieldIndex);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
322	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues(valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues(valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
323	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues(instant,  valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
324	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(1);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValues(1);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValues(1);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
325	[BUG]  [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values);  }  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values);  }  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	if(instant  >=  0)  {  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  values);  }	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
326	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.get(instant,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
327	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(instant,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(fieldIndex);  instant  =  iChronology.get(instant,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values;  i++)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  values;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  values;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZES;    i++)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	39	None	replace
329	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(param,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getYearValues(param,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getYearValues(param,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
330	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(param,  instant);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getYearValues(param,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getYearValues(param,  instant);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  if(i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    if(i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
332	[BUG]  [BUGGY]  instant  =  partial.getFieldType(iChronology).getField(iChronology);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(iChronology).getField(iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(iChronology).getField(iChronology);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
333	[BUG]  [BUGGY]  instant  =  partial.getFieldType(iChronology).getField(instant);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(iChronology).getField(instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(iChronology).getField(instant);	      instant    =    partial.getFieldType(i).getField(iChronology);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
334	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(instant,  valueToAdd);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
335	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  getMonthOfYear(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  instant  =  getMonthOfYear(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(fieldIndex);  instant  =  getMonthOfYear(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
336	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getFieldOfYear(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getFieldOfYear(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  getFieldOfYear(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
337	[BUG]  [BUGGY]  Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
338	[BUG]  [BUGGY]  partial  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  partial  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	partial  =  DateTimeUtils.getMonthOfYear(partial,  valueToAdd);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1,  i  <  isize;  i++)  {  [CE]  ';'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  0,  isize  =  partial.size()  +  1,  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    for(int  i  =  0,  isize  =  partial.size()  +  1,  i  <  isize;  i++)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
340	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [CE]  'else'  without  'if'  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    for(int  i  =  1,  isize  =  partial.size()  +  1;  i  <  isize;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
341	[BUG]  [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Instant[]  values  =  partial.getValues();  instant  =  getMonthOfYear(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
342	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getYearOfYear(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  getYearOfYear(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  getYearOfYear(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    getMonthOfYear(instant,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
343	[BUG]  [BUGGY]  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  '.class'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	For(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    	non-compiled	[CE]  '.class'  expected	6	None	replace
344	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  11;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  11;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
345	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  11;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  11;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  11;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	15	replace
346	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  *  2;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  *  2;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
347	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  if(isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2;  i++)  {  if(isize  =  partial.size();  i  <  isize  *  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    if(isize  =  partial.size();  i  <  isize  *  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	37	None	add
348	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  +  5;  i++)  {  [CE]  'else'  without  'if'  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  5;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  +  5;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    5;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  +  5;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	29	None	add
349	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    2;    i++)    {    (int  i  =  0,  isize  =  partial.size();  i  <  isize  +  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
350	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(instant);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
351	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getMonthOfYear(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getMonthOfYear(instant,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
352	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(partial,  instant);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getMonthOfYear(partial,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getMonthOfYear(partial,  instant);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
353	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYearValue(instant,  iChronology);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getMonthOfYearValue(instant,  iChronology);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getMonthOfYearValue(instant,  iChronology);	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
354	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear();  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getMonthOfYear();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getMonthOfYear();	      int[]    values    =    iChronology.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
355	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(instant,  null);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues(instant,  null);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues(instant,  null);	      int[]    values    =    iChronology.getValues(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
356	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
357	[BUG]  [BUGGY]  instant  =  partial.getFieldType(timePart).getField(iChronology).set(instant,  values[i]);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getFieldType(timePart).getField(iChronology).set(instant,  values[i]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getFieldType(timePart).getField(iChronology).set(instant,  values[i]);	      instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
358	[BUG]  [BUGGY]  int[]  values  =  partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValuesInYear();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValuesInYear();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
359	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  iChronology.getValuesInYear(partial,  valueToAdd);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
360	[BUG]  [BUGGY]  instant  =  partial.getValues();  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  instant  =  partial.getValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	instant  =  partial.getValues();	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
361	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.set(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.set(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.set(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.get(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  &&  isize  -  1;  i++)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  &&  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  &&  isize  -  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
363	[BUG]  [BUGGY]  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  For(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	For(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	4	None	replace
364	[BUG]  [BUGGY]  for(int  i  =  0,  issize  =  partial.size();  i  <  isize;  i++)  {  [CE]  cannot  find  symbol  isize  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  issize  =  partial.size();  i  <  isize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  issize  =  partial.size();  i  <  isize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  isize	8	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  estize;  i++)  {  [CE]  cannot  find  symbol  estize  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  estize;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  estize;  i++)  {	  for(int    i    =    0,    isize    =    partial.size()    +    1;    i    <    isize;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estize	8	None	replace
366	[BUG]  [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Instant[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Instant[]  values  =  partial.getValues();  instant  =  iChronology.getDayOfMonth(instant,  values,  valueToAdd);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
367	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.getMonthOfYear(instant,  values);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  iChronology.getMonthOfYear(instant,  values);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  iChronology.getMonthOfYear(instant,  values);	      int[]    values    =    partial.getValues();    instant    =    iChronology.getDayOfMonth(instant,    values);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
368	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  -  1;  i++)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  -  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  ISize  -  1;  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
369	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  --  i++)  {  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  i++)  {  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  --  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    -    1;    i++)    {    for(int  i  =  0,  isize  =  partial.size();  i  <  isize  -  1;  --  i++)  {	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
370	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +)  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  *  2  +)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    *    2;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
371	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getPartialValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
372	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  [0];  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =(int[])partial.getValues()  [0];  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =(int[])partial.getValues()  [0];	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
373	[BUG]  [BUGGY]  int[]  values  =  getImmediatePartialValues();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getImmediatePartialValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getImmediatePartialValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
374	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(new  int[valueToAdd]);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues().toArray(new  int[valueToAdd]);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues().toArray(new  int[valueToAdd]);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
375	[BUG]  [BUGGY]  int[]  values  =  getValues(instant,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getValues(instant,  valueToAdd);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getValues(instant,  valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
376	[BUG]  [BUGGY]  int[]  values  =  getMeanValues();  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  getMeanValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  getMeanValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
377	[BUG]  [BUGGY]  Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer  iChronology  =  DateTimeUtils.getMonthOfYear(partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1,  isize++)  {  [CE]  ';'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1,  isize++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1,  isize++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
379	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.getItemCount();  i  <  isize  +  1;  i++)  {  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.getItemCount();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.getItemCount();  i  <  isize  +  1;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
380	[BUG]  [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int  iChronology  =  DateTimeUtils.getMonthOfYear(partial,  instant);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
381	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  partial);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  iChronology  =  DateTimeUtils.getMonthOfYear(instant,  partial);  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	iChronology  =  DateTimeUtils.getMonthOfYear(instant,  partial);	      iChronology    =    DateTimeUtils.getMonthOfYear(partial,    instant);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
382	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  iter  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	add	for(int  i  =  0,  iter  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
383	[BUG]  [BUGGY]  for(int  i  =  0,  iter  =  partial.size();  i  <  values.length;  i++)  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  iter  =  partial.size();  i  <  values.length;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  iter  =  partial.size();  i  <  values.length;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    values.length;    i++)    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	11	8	replace
384	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZED;  i++)  {  [CE]  cannot  find  symbol  ISIZED  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZED;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int  i  =  0,  isize  =  partial.size();  i  <  ISIZED;  i++)  {	  for(int    i    =    0,    isize    =    partial.size();    i    <    ISIZES;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  ISIZED	39	None	replace
385	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[0]);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
386	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values);  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	int[]  values  =  partial.getValues();  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
387	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  ')'  expected  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  (int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    (int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
388	[BUG]  [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  if(isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [CE]  ')'  expected  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  for(int  i  =  0,  isize  =  partial.size();  i  <  isize  +  1;  i++)  {  if(isize  =  partial.size();  i  <  isize  +  1;  i++)  {  [BUGGY]    instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	for(int    i    =    0,    isize    =    partial.size();    i    <    isize    +    1;    i++)    {    if(isize  =  partial.size();  i  <  isize  +  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
389	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getValuesInYear();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getValuesInYear();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
390	[BUG]  [BUGGY]  Integer[]  values  =  partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }  if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;    [BUGGY]  Integer[]  values  =  partial.getFieldValues();  [BUGGY]    for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	212	212	8	replace	Integer[]  values  =  partial.getFieldValues();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
