bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  partial.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  partial.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  partial.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
2	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
3	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  partial.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  partial.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  partial.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
4	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial.getValue()))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial.getValue()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial.getValue()))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
5	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
6	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial.getFieldType()))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial.getFieldType()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial.getFieldType()))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
7	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  state.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  state.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  state.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
8	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  isContiguous(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  isContiguous(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  isContiguous(partial,  valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
9	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	33	None	replace
10	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	33	None	replace
11	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	33	None	replace
12	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	33	None	replace
13	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	33	None	replace
14	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ')'  expected	33	None	replace
15	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [CE]  <identifier>  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  <identifier>  expected	33	None	replace
16	[BUG]  [BUGGY]  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	add	if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	8	replace
17	[BUG]  [BUGGY]  if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	compilable	  [FE]  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1  	30	8	replace
18	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	add	if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
19	[BUG]  [BUGGY]  if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {  [FE]  IllegalArgumentException  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
20	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isLocal(partial))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isLocal(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isLocal(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
21	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isInfinite(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isInfinite(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isInfinite(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
22	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isJoin(partial))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isJoin(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isJoin(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
23	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isISOControl(partial))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isISOControl(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isISOControl(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
24	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isNew(partial))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isNew(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isNew(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
25	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  '.class'  expected	37	None	replace
26	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [CE]  ')'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
27	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
28	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [CE]  ']'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  ']'  expected	37	None	replace
29	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[  [CE]  '.class'  expected  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  '.class'  expected	37	None	replace
30	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  [CE]  '.class'  expected  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  '.class'  expected	37	None	replace
31	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values  [CE]  ')'  expected  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
32	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [CE]  ')'  expected  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
33	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	34	None	replace
34	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	34	None	replace
35	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	34	None	replace
36	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	34	None	replace
37	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [CE]  <identifier>  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  <identifier>  expected	34	None	replace
38	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	34	None	replace
39	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr  [CE]  ')'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ')'  expected	34	None	replace
40	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	34	None	replace
41	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValues(partial);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValues(partial);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValues(partial,  valueToAdd);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getFieldValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getFieldValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
48	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
49	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
50	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
51	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
52	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fields);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fields);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fields);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
53	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
54	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  fields,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  fields,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  fields,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
55	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
56	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYears(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYears(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYears(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
59	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
63	[BUG]  [BUGGY]  while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  'else'  without  'if'  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
64	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  valueToAdd);  }  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  valueToAdd);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  valueToAdd);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
69	[BUG]  [BUGGY]  while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  'else'  without  'if'  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
70	[BUG]  [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
71	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYearValue(partial,  fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
73	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getDayOfMonth(partial,  fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
74	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex),  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  ';'  expected	21	None	replace
75	[BUG]  [BUGGY]  int[]  values  =  getFieldValues();  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getFieldValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getFieldValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  int[]  values  =  getValues(partial);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues(partial);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues(partial);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues(partial,  fieldIndex);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  int[]  values  =  getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues(),  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues(),  valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  ';'  expected	3	None	replace
79	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(values);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues().toArray(values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues().toArray(values);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
80	[BUG]  [BUGGY]  int[]  values  =  getDayOfMonth();  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getDayOfMonth();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getDayOfMonth();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  int[]  values  =  getValues(),  valueToAdd;  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues(),  valueToAdd;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues(),  valueToAdd;	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial,  valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
83	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMonthOfYear(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMonthOfYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMonthOfYear(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
84	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.isMonthOfYear())  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.isMonthOfYear())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  partial.isMonthOfYear())  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
85	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  values))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  values))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial,  values))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
86	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  partial.equals(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
87	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
88	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  ==  DateTimeUtils.MILLIS_PER_DAY)  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  ==  DateTimeUtils.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  ==  DateTimeUtils.MILLIS_PER_DAY)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
89	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillisOfDay(partial))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillisOfDay(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillisOfDay(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
90	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.getFieldType(i).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.getFieldType(i).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  partial.getFieldType(i).equals(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
91	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial,  valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
92	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
93	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  DateTimeUtils.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  DateTimeUtils.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  DateTimeUtils.isYear(partial))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
94	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.equals(iChronology))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.equals(iChronology))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.equals(iChronology))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
95	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology.getDayOfMonth()))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology.getDayOfMonth()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology.getDayOfMonth()))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
96	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
97	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(i).getField(iChronology)!=  null)  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(i).getField(iChronology)!=  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(i).getField(iChronology)!=  null)  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
98	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
99	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology.dayOfMonth()))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology.dayOfMonth()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(i).equals(iChronology.dayOfMonth()))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
100	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  DateTimeUtils.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  DateTimeUtils.isContiguous(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
101	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial,  valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
102	[BUG]  [BUGGY]  if(DateTimeUtils.isYear(partial)||  DateTimeUtils.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isYear(partial)||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isYear(partial)||  DateTimeUtils.isContiguous(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
103	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  valueToAdd)||  DateTimeUtils.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  valueToAdd)||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial,  valueToAdd)||  DateTimeUtils.isContiguous(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
104	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial,  values))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial,  values))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial,  values))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
105	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isLocal(partial))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isLocal(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isLocal(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
106	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinite(partial))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinite(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinite(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
107	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  iChronology);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
108	[BUG]  [BUGGY]  int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getWeekValues(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
109	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDays(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getDays(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getDays(partial,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
110	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	35	None	replace
111	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	35	None	replace
112	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	35	None	replace
113	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	35	None	replace
114	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	35	None	replace
115	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	35	None	replace
116	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [CE]  ';'  expected  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  ';'  expected	35	None	replace
117	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  DateTimeUtils.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  DateTimeUtils.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  DateTimeUtils.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
118	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  DateTimeUtils.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  DateTimeUtils.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  DateTimeUtils.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
119	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(valueToAdd,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(valueToAdd,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(valueToAdd,  valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
120	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(instant))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(instant))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(instant))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
121	[BUG]  [BUGGY]  if(DateTimeUtils.isYear(partial)||  DateTimeUtils.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isYear(partial)||  DateTimeUtils.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isYear(partial)||  DateTimeUtils.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
122	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguousValue(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguousValue(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguousValue(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
123	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isFunction(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isFunction(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isFunction(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
124	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  [CE]  '.class'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]    	non-compiled	[CE]  '.class'  expected	38	None	replace
125	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  [CE]  '.class'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]    	non-compiled	[CE]  '.class'  expected	38	None	replace
126	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant  [CE]  ')'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]    	non-compiled	[CE]  ')'  expected	38	None	replace
127	[BUG]  [BUGGY]  int[]  values  =(int[])partial.clone();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.clone();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.clone();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
128	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getFieldValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getFieldValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getValues()  /  2;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getValues()  /  2;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
130	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getValuesInYear();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getValuesInYear();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
131	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getValues()  -  1;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getValues()  -  1;	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
132	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getAllValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getAllValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
133	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,  [CE]  '.class'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  '.class'  expected	39	None	replace
134	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,  [CE]  '.class'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  '.class'  expected	39	None	replace
135	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values  [CE]  ')'  expected  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  ')'  expected	39	None	replace
136	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values  [CE]  ')'  expected  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  ')'  expected	39	None	replace
137	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [CE]  ';'  expected  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  ';'  expected	39	None	replace
138	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values  [CE]  ')'  expected  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  ')'  expected	39	None	replace
139	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,  [CE]  '.class'  expected  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(values,	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  '.class'  expected	39	None	replace
140	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  '.class'  expected	39	None	replace
141	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)&&  DateTimeUtils.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)&&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)&&  DateTimeUtils.isContiguous(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
142	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial,  valueToAdd)||  DateTimeUtils.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial,  valueToAdd)||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial,  valueToAdd)||  DateTimeUtils.isContiguous(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
143	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial,  fieldIndex)||  DateTimeUtils.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial,  fieldIndex)||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial,  fieldIndex)||  DateTimeUtils.isContiguous(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
144	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial,  valueToAdd))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
145	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isMonthOfYear(partial))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isMonthOfYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isMonthOfYear(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
146	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isFunction(partial))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isFunction(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isFunction(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
147	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isTransient(partial))  {  [CE]  cannot  find  symbol  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isTransient(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isTransient(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
148	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isLocal(partial))  {  [CE]  cannot  find  symbol  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isLocal(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isLocal(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
149	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	32	None	replace
150	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [CE]  <identifier>  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  <identifier>  expected	32	None	replace
151	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	32	None	replace
152	[BUG]  [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChr	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ')'  expected	32	None	replace
153	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	32	None	replace
154	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues(fieldIndex);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
155	[BUG]  [BUGGY]  Integer[]  values  =  iChronology.getValues();  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  iChronology.getValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  iChronology.getValues();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
156	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues(),  valueToAdd;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues(),  valueToAdd;	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
157	[BUG]  [BUGGY]  Integer[]  values  =  partial.getAllValues();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getAllValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getAllValues();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
158	[BUG]  [BUGGY]  Integer[]  values  =  partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getFieldValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getFieldValues();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
159	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues(valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues(valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
160	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	36	None	replace
161	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	36	None	replace
162	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(iChronology,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(iChronology,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(iChronology,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
163	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldsIndex,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
164	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(valueToAdd,  iChronology);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(valueToAdd,  iChronology);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(valueToAdd,  iChronology);	      int[]    values    =    iChronology.getYearValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
165	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
166	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valueToAdd,  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
167	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
168	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  fieldsIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  fieldsIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  fieldsIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
169	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  parameters,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  parameters,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  parameters,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
170	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)+  1;  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)+  1;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)+  1;	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
171	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
172	[BUG]  [BUGGY]  int[]  fields  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  fields  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  fields  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
173	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
174	[BUG]  [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
175	[BUG]  [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  illegal  start  of  type  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
176	[BUG]  [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  illegal  start  of  type  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
177	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
178	[BUG]  [BUGGY]  int[]  fields  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  fields  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  fields  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
179	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
180	[BUG]  [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
181	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
182	[BUG]  [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  fields  =  partial.getFieldTypes();  for(int  i  =  0;  i  <  fields.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
183	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
184	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
185	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  >=  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  >=  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial  >=  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
186	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  If(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  If(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    If(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  ';'  expected	29	None	add
187	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  >>  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  >>  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial  >>  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
188	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  [BUGGY]  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  [BUGGY]  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial  [BUGGY]  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  ')'  expected	29	None	add
189	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  [Delete]  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial  [Delete]  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial  [Delete]  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  ')'  expected	29	None	add
190	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  If(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  ';'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  If(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    If(partial  ==  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  ';'  expected	29	None	add
191	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.hasMillis(partial))  {  [CE]  illegal  start  of  expression  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.hasMillis(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  ||  DateTimeUtils.hasMillis(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
192	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues(fieldIndex);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
193	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getFieldType(iChronology).getValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getFieldType(iChronology).getValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
194	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues(),  valueToAdd;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
195	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd);  [CE]  ';'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues(),  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues(),  valueToAdd);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  ';'  expected	1	None	replace
196	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues(fieldIndex,  valueToAdd);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
197	[BUG]  [BUGGY]  int[]  values  =  partial.getFieldValues();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getFieldValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getFieldValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
198	[BUG]  [BUGGY]  int[]  values  =  partial.getAllValues();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getAllValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getAllValues();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
199	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
200	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial);	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
201	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYearValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYearValues();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
202	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDays();  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getDays();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getDays();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
203	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDaysInYearValues();  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getDaysInYearValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getDaysInYearValues();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
204	[BUG]  [BUGGY]  int[]  values  =  iChronology.getDayOfMonth();  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getDayOfMonth();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getDayOfMonth();	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
205	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.isYear())  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.isYear())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.isYear())  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
206	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  DateTimeUtils.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  DateTimeUtils.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  DateTimeUtils.isYear(partial))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
207	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(i).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(i).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(i).equals(valueToAdd))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
208	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.equals(valueToAdd))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
209	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.isYearValue(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.isYearValue(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.isYearValue(valueToAdd))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
210	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.isYearMonth())  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.isYearMonth())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.isYearMonth())  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
211	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial,  valueToAdd))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
212	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  iChronology.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  iChronology.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)&&  iChronology.isYear(partial))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
213	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
214	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
215	[BUG]  [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  illegal  start  of  type  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
216	[BUG]  [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
217	[BUG]  [BUGGY]  while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  'else'  without  'if'  [FE]                                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	while(partial!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
218	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  valueToAdd);  }  [CE]  illegal  start  of  type  [FE]                                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  valueToAdd);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  valueToAdd);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
219	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
220	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial  ==  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
221	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  If(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  ';'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  If(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    If(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  ';'  expected	27	None	add
222	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  >=  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  >=  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial  >=  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
223	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  >>  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  >>  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial  >>  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
224	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  [BUGGY]  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  [BUGGY]  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial  [BUGGY]  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  ')'  expected	27	None	add
225	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  [Delete]  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial  [Delete]  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial  [Delete]  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  ')'  expected	27	None	add
226	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  DateTimeUtils.hasMillis(partial))  {  [CE]  illegal  start  of  expression  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  DateTimeUtils.hasMillis(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  &&  DateTimeUtils.hasMillis(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
227	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isNew(partial))  {  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isNew(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isNew(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
228	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isLocal(partial))  {  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isLocal(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isLocal(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
229	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isJoin(partial))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isJoin(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isJoin(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
230	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isForIn(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isForIn(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isForIn(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
231	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isInfinite(partial))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isInfinite(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isInfinite(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
232	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isFunction(partial))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isFunction(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isFunction(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
233	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isSecondOfDay(partial))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isSecondOfDay(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isSecondOfDay(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
234	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
235	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valueToAdd,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
236	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  fields,  valueToAdd,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
237	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd)+  1;  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd)+  1;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd)+  1;	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
238	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd  +  1);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd  +  1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd  +  1);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
239	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  parameters,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  parameters,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  parameters,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
240	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  thisYear);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  thisYear);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  thisYear);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
241	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
242	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.isYear())  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.isYear())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  partial.isYear())  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
243	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.dayOfMonth()))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.dayOfMonth()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.dayOfMonth()))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
244	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
245	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial,  valueToAdd))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
246	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.isYearValue(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.isYearValue(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  partial.isYearValue(valueToAdd))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
247	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  iChronology.isDayOfMonth(partial))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  iChronology.isDayOfMonth(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)&&  iChronology.isDayOfMonth(partial))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
248	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.getDayOfMonth()))  {  [CE]  cannot  find  symbol  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.getDayOfMonth()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.getDayOfMonth()))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
249	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  iChronology.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  iChronology.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)&&  iChronology.isYear(partial))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
250	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial,  valueToAdd))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
251	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial,  values))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial,  values))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial,  values))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
252	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.isInfinite(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.isInfinite(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.isInfinite(valueToAdd))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
253	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial,  fieldIndex))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial,  fieldIndex))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial,  fieldIndex))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
254	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isYear(partial))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
255	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.isInfinite())  {  [CE]  cannot  find  symbol  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.isInfinite())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.isInfinite())  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
256	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.isFieldType(iChronology))  {  [CE]  cannot  find  symbol  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.isFieldType(iChronology))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.isFieldType(iChronology))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
257	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(i).isInfinite(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(i).isInfinite(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(i).isInfinite(valueToAdd))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
258	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
259	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex  +  1,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
260	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
261	[BUG]  [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
262	[BUG]  [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
263	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinite(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinite(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinite(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
264	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isLocal(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isLocal(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isLocal(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
265	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillis(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillis(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillis(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
266	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isAlpha(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isAlpha(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isAlpha(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
267	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isNew(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isNew(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isNew(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
268	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinity(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinity(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinity(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
269	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
270	[BUG]  [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	9	None	replace
271	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isMonthOfYear(partial))  {  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isMonthOfYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isMonthOfYear(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
272	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isYear(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
273	[BUG]  [BUGGY]  if(partial  ==  null  ||  DateTimeUtils.isNew(partial))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial  ==  null  ||  DateTimeUtils.isNew(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial  ==  null  ||  DateTimeUtils.isNew(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
274	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology)!=  null)  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology)!=  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology)!=  null)  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
275	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology).isInfinite(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology).isInfinite(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology).isInfinite(valueToAdd))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
276	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology)  ==  null)  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology)  ==  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology)  ==  null)  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
277	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology).isEmpty(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology).isEmpty(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  partial.getFieldType(iChronology).isEmpty(valueToAdd))  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
278	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  valueToAdd  ==  0)  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  valueToAdd  ==  0)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  valueToAdd  ==  0)  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
279	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  DateTimeUtils.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex)||  DateTimeUtils.isContiguous(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
280	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  0)  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  0)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  0)  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
281	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isAlpha(partial))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isAlpha(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isAlpha(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
282	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinity(partial))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinity(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInfinity(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
283	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
284	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
285	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
286	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex  +  1);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
287	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  dateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  dateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  &&  dateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
288	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  DateTimeUtils.hasContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  &&  DateTimeUtils.hasContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  &&  DateTimeUtils.hasContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
289	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  values,  fieldIndex);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  values,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  valueToAdd,  values,  fieldIndex);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
290	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd  +  1);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd  +  1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd  +  1);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
291	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)-  1;  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)-  1;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd)-  1;	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
292	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
293	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
294	[BUG]  [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
295	[BUG]  [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
296	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
297	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(valueToAdd,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(valueToAdd,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(valueToAdd,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
298	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
299	[BUG]  [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
300	[BUG]  [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
301	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	32	None	replace
302	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	32	None	replace
303	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [CE]  <identifier>  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  <identifier>  expected	32	None	replace
304	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology)!=  null)  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology)!=  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology)!=  null)  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
305	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  valueToAdd  >  DateTimeUtils.currentTimeMillis())  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  valueToAdd  >  DateTimeUtils.currentTimeMillis())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  valueToAdd  >  DateTimeUtils.currentTimeMillis())  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
306	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
307	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology)  ==  null)  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology)  ==  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  partial.getFieldType(iChronology)  ==  null)  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
308	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial,  fieldIndex))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial,  fieldIndex))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial,  fieldIndex))  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
309	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  valueToAdd  ==  DateTimeUtils.currentTimeMillis())  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)||  valueToAdd  ==  DateTimeUtils.currentTimeMillis())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)||  valueToAdd  ==  DateTimeUtils.currentTimeMillis())  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
310	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  cannot  find  symbol  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  DateTimeConstants.MILLIS_PER_DAY)  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
311	[BUG]  [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getMonthOfYear(fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getMonthOfYear(fieldIndex,  values);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
312	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	36	None	replace
313	[BUG]  [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer  values[]  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	36	None	replace
314	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	36	None	replace
315	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  '.class'  expected	35	None	replace
316	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	33	None	replace
317	[BUG]  [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	33	None	replace
318	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [CE]  <identifier>  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  <identifier>  expected	33	None	replace
319	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(fieldIndex);	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
320	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
321	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(valueToAdd);	      int[]    values    =    iChronology.getYearValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
322	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValues(fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
323	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValues(fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValues(fieldIndex,  values);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
324	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValues(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
325	[BUG]  [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getFieldValues(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
326	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.hasTheme(partial))  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.hasTheme(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  ||  DateTimeUtils.hasTheme(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
327	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.isCollection(partial))  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.isCollection(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  ||  DateTimeUtils.isCollection(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
328	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [CE]  ';'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  ';'  expected	39	None	replace
329	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
330	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  partial.equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  partial.equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  partial.equals(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
331	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd.isContiguous(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
332	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  0)  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  0)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  0)  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
333	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  Integer.MIN_VALUE)  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  Integer.MIN_VALUE)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isContiguous(partial)||  valueToAdd  ==  Integer.MIN_VALUE)  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
334	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	34	None	replace
335	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	34	None	replace
336	[BUG]  [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [CE]  <identifier>  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(instant!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  <identifier>  expected	34	None	replace
337	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial,  fieldIndex))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
338	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.currentTimeMillis())  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.currentTimeMillis())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.currentTimeMillis())  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
339	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  <  =  0)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  <  =  0)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
340	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.MILLIS_PER_DAY)  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.MILLIS_PER_DAY)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
341	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  ==  1)  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  ==  1)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  ==  1)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
342	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  ==  1)  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  ==  1)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  ==  1)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
343	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.MAX_VALUE)  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.MAX_VALUE)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  >  DateTimeUtils.MAX_VALUE)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
344	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  ==  0)  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  ==  0)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  valueToAdd  ==  0)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
345	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values,  fieldIndex);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values,  fieldIndex);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
346	[BUG]  [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getYearValues(fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getYearValues(fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
347	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd)-  1;  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd)-  1;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd)-  1;	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
348	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueIndex,  values,  fieldToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueIndex,  values,  fieldToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueIndex,  values,  fieldToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
349	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology).isNew(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology).isNew(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology).isNew(valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
350	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology)!=  null)  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology)!=  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology)!=  null)  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
351	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial,  fieldIndex))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial,  fieldIndex))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial,  fieldIndex))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
352	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
353	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology)  ==  null)  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology)  ==  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.getFieldType(iChronology)  ==  null)  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
354	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.equals(valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
355	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  iChronology.equals(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  iChronology.equals(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)&&  iChronology.equals(partial,  valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
356	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
357	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology).isYear(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology).isYear(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology).isYear(valueToAdd))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
358	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology)!=  null)  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology)!=  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  partial.getFieldType(iChronology)!=  null)  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
359	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  iChronology.equals(partial,  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  iChronology.equals(partial,  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)&&  iChronology.equals(partial,  valueToAdd))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
360	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd!=  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  cannot  find  symbol  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd!=  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)&&  valueToAdd!=  DateTimeConstants.MILLIS_PER_DAY)  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
361	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd  ==  1)  {  [CE]  cannot  find  symbol  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd  ==  1)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)&&  valueToAdd  ==  1)  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
362	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
363	[BUG]  [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	7	None	replace
364	[BUG]  [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
365	[BUG]  [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  0)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(instant,    values[i]);    }    	non-compiled	[CE]  '.class'  expected	37	None	replace
366	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getValues(1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getValues(1);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
367	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getValues(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getValues(fieldIndex);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
368	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getValues(2);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getValues(2);	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
369	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  valueToAdd,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
370	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  variables,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  variables,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  variables,  valueToAdd);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
371	[BUG]  [BUGGY]  int[]  values  =  getValues(fieldIndex);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues(fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues(fieldIndex);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
372	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues().toArray(valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues().toArray(valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
373	[BUG]  [BUGGY]  int[]  values  =  getValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues(fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues(fieldIndex,  values);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
374	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
375	[BUG]  [BUGGY]  int[]  values  =  getImmediatePartialValues();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getImmediatePartialValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getImmediatePartialValues();	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
376	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isMonthOfYear(partial))  {  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isMonthOfYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isMonthOfYear(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
377	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isISOControl(partial))  {  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isISOControl(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isISOControl(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
378	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isYear(partial))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isYear(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
379	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isMillis(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isMillis(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isMillis(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
380	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isImmutableAndMonthDayOfMonth(partial))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isImmutableAndMonthDayOfMonth(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isImmutableAndMonthDayOfMonth(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
381	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues(fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues(fieldIndex,  values);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
382	[BUG]  [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues()  -  1;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues()  -  1;	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
383	[BUG]  [BUGGY]  int[]  values  =  partial.getValues(1);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues(1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues(1);	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
384	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues(fieldIndex,  values);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
385	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues(fieldIndex,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues(fieldIndex,  valueToAdd);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
386	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues(1);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues(1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues(1);	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
387	[BUG]  [BUGGY]  if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	10	None	replace
388	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  0);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  0);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  0);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
389	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  thisYear);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  thisYear);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  thisYear);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
390	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  iMax);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  iMax);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  iMax);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
391	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  1);  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  values,  valueToAdd,  1);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
392	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(paratial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(paratial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(paratial!=  null  ||  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
393	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.iscontiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isContiguous(partial))  {  if(partial!=  null  ||  DateTimeUtils.iscontiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    if(partial!=  null  ||  DateTimeUtils.iscontiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
394	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isJavaTimeInstance(partial))  {  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isJavaTimeInstance(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isJavaTimeInstance(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
395	[BUG]  [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isWarning(partial))  {  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  ||  DateTimeUtils.isWarning(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  ||  DateTimeUtils.isWarning(partial))  {	  if(partial!=    null    ||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
396	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	34	None	replace
397	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  valueToAdd;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    valueToAdd;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	34	None	replace
398	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values;  [CE]  ')'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values;  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values;	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex);    	non-compiled	[CE]  ')'  expected	19	None	replace
399	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	32	None	replace
400	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [CE]  '.class'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  '.class'  expected	32	None	replace
401	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
402	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  <  =  1)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  <  =  1)  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
403	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  DateTimeUtils.currentTimeMillis())  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  DateTimeUtils.currentTimeMillis())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  DateTimeUtils.currentTimeMillis())  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
404	[BUG]  [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  1)  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  1)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isynthetic(partial)&&  valueToAdd  ==  1)  {	  if(DateTimeUtils.isynthetic(partial))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
405	[BUG]  [BUGGY]  int[]  values  =  partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValuesInYear();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValuesInYear();	      int[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
406	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isJavaTimeInstance(partial))  {  [CE]  cannot  find  symbol  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isJavaTimeInstance(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isJavaTimeInstance(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
407	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isWarning(partial))  {  [CE]  cannot  find  symbol  [FE]      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isWarning(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isWarning(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
408	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isImmutableValue(partial))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isImmutableValue(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isImmutableValue(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
409	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isStandard(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isStandard(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=  null  &&  DateTimeUtils.isStandard(partial))  {	  if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
410	[BUG]  [BUGGY]  int[]  values  =  getValues(fieldIndex,  valueToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  getValues(fieldIndex,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  getValues(fieldIndex,  valueToAdd);	      int[]    values    =    getValues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
411	[BUG]  [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i],  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i],    values[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
412	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  illegal  start  of  expression  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
413	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.isYearMonth())  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  partial.isYearMonth())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  partial.isYearMonth())  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
414	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.getMonthOfYear()))  {  [CE]  cannot  find  symbol  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.getMonthOfYear()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.isYear(partial.getMonthOfYear()))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
415	[BUG]  [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.getMonthOfYear(partial))  {  [CE]  cannot  find  symbol  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.getMonthOfYear(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isYear(partial)||  DateTimeUtils.getMonthOfYear(partial))  {	  if    (DateTimeUtils.isYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
416	[BUG]  [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values  [CE]  ')'  expected  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  ')'  expected	36	None	replace
417	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.equals(partial.getFieldType(partial)))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.equals(partial.getFieldType(partial)))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.equals(partial.getFieldType(partial)))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
418	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.equals(partial.getValue()))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.equals(partial.getValue()))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  fieldIndex.equals(partial.getValue()))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    partial.isContiguous(valueToAdd))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
419	[BUG]  [BUGGY]  if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  ++i)  {  add(partial,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    ++i)    {    add(partial,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	8	None	replace
420	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  illegal  start  of  expression  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)&&  valueToAdd  <  =  DateTimeConstants.MILLIS_PER_DAY)  {	  if(DateTimeUtils.isInfinite(partial))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
421	[BUG]  [BUGGY]  int[]  values  =(int[])iChronology.getYearValues(partial,  fieldIndex,  values);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])iChronology.getYearValues(partial,  fieldIndex,  values);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])iChronology.getYearValues(partial,  fieldIndex,  values);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
422	[BUG]  [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd!=  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fields[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fields[i]);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
423	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [CE]  '.class'  expected  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add(	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  '.class'  expected	39	None	replace
424	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [CE]  ';'  expected  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).add	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(values,    	non-compiled	[CE]  ';'  expected	39	None	replace
425	[BUG]  [BUGGY]  if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  1)  {  int[]  values  =  partial.getValues();  for(int  i  =  0;  i  <  values.length;  i++)  {  add(partial,  fieldIndex,  values[i]);  }	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0;    i    <    values.length;    i++)    {    add(partial,    fieldIndex,    values[i]);    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  add(ReadablePartial,int,int[],int)	5	None	replace
426	[BUG]  [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.getPartialValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.getPartialValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
427	[BUG]  [BUGGY]  int[]  values  =(int[])partial.cloneTree();  [CE]  illegal  start  of  type  [FE]                    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])partial.cloneTree();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])partial.cloneTree();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
428	[BUG]  [BUGGY]  int[]  values  =(int[])paratial.getValues();  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =(int[])paratial.getValues();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =(int[])paratial.getValues();	      int[]    values    =(int[])partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
429	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valuesToAdd);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valuesToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMonthOfYear(partial,  fieldIndex,  valuesToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
430	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                      org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearMonthOfYear(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
431	[BUG]  [BUGGY]  int[]  values  =  iChronology.getMONTHOFYear(partial,  fieldIndex,  values,  valueToAdd);  [CE]  illegal  start  of  type  [FE]                        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getMONTHOFYear(partial,  fieldIndex,  values,  valueToAdd);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getMONTHOFYear(partial,  fieldIndex,  values,  valueToAdd);	      int[]    values    =    iChronology.getMonthOfYear(partial,    fieldIndex,    values);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
432	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(iChronology).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(iChronology).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(iChronology).equals(valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
433	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.isYear())  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)||  partial.isYear())  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)||  partial.isYear())  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
434	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(iChronology)!=  null)  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(iChronology)!=  null)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)&&  partial.getFieldType(iChronology)!=  null)  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
435	[BUG]  [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  iChronology.getDaysInYearMonth(partial.get(i),  valueToAdd))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if  (DateTimeUtils.isNew(partial)&&  iChronology.getDaysInYearMonth(partial.get(i),  valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if  (DateTimeUtils.isNew(partial)&&  iChronology.getDaysInYearMonth(partial.get(i),  valueToAdd))  {	  if    (DateTimeUtils.isNew(partial))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
436	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  0);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  0);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  0);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
437	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  1);  [CE]  illegal  start  of  type  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  1);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
438	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  datePart);  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  datePart);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  datePart);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
439	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  -1);  [CE]  illegal  start  of  type  [FE]                org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  -1);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  -1);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
440	[BUG]  [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  null);  [CE]  illegal  start  of  type  [FE]                  org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  null);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getYearValues(partial,  fieldIndex,  values,  valueToAdd,  null);	      int[]    values    =    iChronology.getYearValues(partial,    fieldIndex,    values,    valueToAdd);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
441	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values  [CE]  ')'  expected  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  values.length;  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    values.length;    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).add(    	non-compiled	[CE]  ')'  expected	35	None	replace
442	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillis(partial))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillis(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isMillis(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
443	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInstance(partial))  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInstance(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  DateTimeUtils.isInstance(partial))  {	  if(DateTimeUtils.isMonthOfYear(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
444	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);  [CE]  illegal  start  of  type  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	int[]  values  =  iChronology.getValuesInYear(partial,  fieldIndex);	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
445	[BUG]  [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(paratial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  [CE]  illegal  start  of  expression  [FE]    org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(partial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  if(paratial!=  null  &&  DateTimeUtils.isContiguous(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(partial!=    null    &&    DateTimeUtils.isContiguous(partial))    {    if(paratial!=  null  &&  DateTimeUtils.isContiguous(partial))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
446	[BUG]  [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isMillis(partial))  {  [CE]  cannot  find  symbol  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isMillis(partial))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isInfinite(partial)||  DateTimeUtils.isMillis(partial))  {	  if(DateTimeUtils.isInfinite(partial)||    DateTimeUtils.isContiguous(partial))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
447	[BUG]  [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [CE]  ';'  expected  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(valueToAdd  ==  null)  {  int[]  values  =  partial.getValues();  for(int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set	      if(partial!=    null)    {    int[]    values    =    partial.getValues();    for(int    i    =    0,    isize    =    partial.size();    i    <    isize;    i++)    {    instant    =    partial.getFieldType(i).getField(iChronology).set(    	non-compiled	[CE]  ';'  expected	33	None	replace
448	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]        org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  <  =  1)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  <  =  1)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
449	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [CE]  cannot  find  symbol  [FE]          org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)||  partial.getFieldType(iChronology).equals(valueToAdd))  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
450	[BUG]  [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  >  DateTimeConstants.MILLIS_PER_DAY)  {  [CE]  cannot  find  symbol  [FE]            org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  >  DateTimeConstants.MILLIS_PER_DAY)  {  [BUGGY]    long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	if(DateTimeUtils.isMonthOfYear(partial)&&  valueToAdd  >  DateTimeConstants.MILLIS_PER_DAY)  {	  if(DateTimeUtils.isMonthOfYear(partial))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
451	[BUG]  [BUGGY]  Integer[]  values  =  partial.getValuesInYear();  [CE]  illegal  start  of  type  [FE]              org.joda.time.IllegalFieldValueException:  Value  29  for  dayOfMonth  must  be  in  the  range  [1    [CONTEXT]    public  int[]  add(ReadablePartial  partial,  int  fieldIndex,  int[]  values,  int  valueToAdd)  {    if  (valueToAdd  ==  0)  {  return  values;  }      [BUGGY]  Integer[]  values  =  partial.getValuesInYear();  [BUGGY]    if  (DateTimeUtils.isContiguous(partial))  {  long  instant  =  0L;  for  (int  i  =  0,  isize  =  partial.size();  i  <  isize;  i++)  {  instant  =  partial.getFieldType(i).getField(iChronology).set(instant,  values[i]);  }  instant  =  add(instant,  valueToAdd);  return  iChronology.get(partial,  instant);  }  else  {  return  super.add(partial,  fieldIndex,  values,  valueToAdd);  }  }  [CLASS]  BasicMonthOfYearDateTimeField  [METHOD]  add  [RETURN_TYPE]  int[]  ReadablePartial  partial  int  fieldIndex  int[]  values  int  valueToAdd  [VARIABLES]  int[]  values  ReadablePartial  partial  boolean  long  datePart  instant  monthToUse  months  serialVersionUID  timePart  yearToUse  int  MIN  dayToUse  fieldIndex  i  iLeapMonth  iMax  i_monthToUse  i_months  i_yearToUse  isize  leapMonth  maxDay  monthToUse  months  remMonthToUse  thisMonth  thisYear  valueToAdd  yearToUse  BasicChronology  chronology  iChronology  	projects/Time14/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	0.7302967433402214	210	210	8	replace	Integer[]  values  =  partial.getValuesInYear();	      Integer[]    values    =    partial.getValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
