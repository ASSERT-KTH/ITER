bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    final  int  relativeAccuracy  =  f.getAbsoluteAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  relativeAccuracy  =  f.getAbsoluteAccuracy();  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  relativeAccuracy  =  f.getAbsoluteAccuracy();		non-compiled	[CE]  cannot  find  symbol	2	None	add
2	[BUG]  [BUGGY]    final  int  relativeAccuracy  =  Math.min(max,  min,  startValue);  if(relativeAccuracy  >  0)  {  return  solve(min,  max,  startValue);  }  [CE]  no  suitable  method  found  for  min(double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  relativeAccuracy  =  Math.min(max,  min,  startValue);  if(relativeAccuracy  >  0)  {  return  solve(min,  max,  startValue);  }  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  relativeAccuracy  =  Math.min(max,  min,  startValue);  if(relativeAccuracy  >  0)  {  return  solve(min,  max,  startValue);  }		non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	2	None	add
3	[BUG]  [BUGGY]    final  int  relativeAccuracy  =  Math.min(max,  min,  startValue);  [CE]  no  suitable  method  found  for  min(double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  relativeAccuracy  =  Math.min(max,  min,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  relativeAccuracy  =  Math.min(max,  min,  startValue);		non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	2	None	add
4	[BUG]  [BUGGY]    final  int  relativeAccuracy  =  Math.abs(min,  startValue);  if(relativeAccuracy  >  1)  {  return  solve(min,  max,  startValue);  }  [CE]  no  suitable  method  found  for  abs(double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  relativeAccuracy  =  Math.abs(min,  startValue);  if(relativeAccuracy  >  1)  {  return  solve(min,  max,  startValue);  }  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  relativeAccuracy  =  Math.abs(min,  startValue);  if(relativeAccuracy  >  1)  {  return  solve(min,  max,  startValue);  }		non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	2	None	add
5	[BUG]  [BUGGY]    final  int  relativeAccuracy  =  Math.abs(min,  startValue);  [CE]  no  suitable  method  found  for  abs(double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  relativeAccuracy  =  Math.abs(min,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	    final  int  relativeAccuracy  =  Math.abs(min,  startValue);		non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	2	None	add
11	[BUG]  [BUGGY]    final  double  f1  =  atol  -((  f1  *(f0  -  f1))  /(f1  -  f0));  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f1  =  atol  -((  f1  *(f0  -  f1))  /(f1  -  f0));  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f1  =  atol  -((  f1  *(f0  -  f1))  /(f1  -  f0));		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	12	None	add
13	[BUG]  [BUGGY]    final  double  f0  =  computeFunctionValue(rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =  computeFunctionValue(rtol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =  computeFunctionValue(rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
14	[BUG]  [BUGGY]    final  double  f1  =  atol  -((  f1  *(x0  -  x0))  /(f1  -  f0));  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f1  =  atol  -((  f1  *(x0  -  x0))  /(f1  -  f0));  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f1  =  atol  -((  f1  *(x0  -  x0))  /(f1  -  f0));		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	12	None	add
15	[BUG]  [BUGGY]    final  double  f0  =  computeFunctionValue(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =  computeFunctionValue(atol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	160	160	1	replace	    final  double  f0  =  computeFunctionValue(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
24	[BUG]  [BUGGY]  if(f1  >  fx  %  2  ==  0)  {  [CE]  incomparable  types:  boolean  and  int  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]  if(f1  >  fx  %  2  ==  0)  {  [BUGGY]    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	171	171	1	replace	if(f1  >  fx  %  2  ==  0)  {	if  (f1  *  fx  <  0)  {  	non-compiled	[CE]  incomparable  types:  boolean  and  int	17	None	replace
25	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    [BUGGY]    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	171	171	1	replace	  	if  (f1  *  fx  <  0)  {  	non-compiled	[CE]  'else'  without  'if'	17	None	replace
34	[BUG]  [BUGGY]  x0  =  x2;  [CE]  cannot  find  symbol  x2  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]  x0  =  x2;  [BUGGY]  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	174	174	1	replace	x0  =  x2;	x0  =  x1;  	non-compiled	[CE]  cannot  find  symbol  x2	19	None	replace
41	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
42	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
43	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
44	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x0;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(!inverted)  {  return  x0;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
45	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	149	149	1	replace	    if(f1  ==  0.0)  {  if(f0  ==  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
52	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  inverted);  [CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  inverted);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	final  double  fx  =  computeObjectiveValue(x,  inverted);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;	13	None	replace
53	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  rtol);  [CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  rtol);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	final  double  fx  =  computeObjectiveValue(x,  rtol);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;	13	None	replace
55	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  fx  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	  	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  cannot  find  symbol  fx	13	None	replace
62	[BUG]  [BUGGY]  final  double  atol  =  getAttributeAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAttributeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  atol  =  getAttributeAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
63	[BUG]  [BUGGY]  final  double  atol  =  getAtomicAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAtomicAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  atol  =  getAtomicAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
64	[BUG]  [BUGGY]  final  double  atol  =  getAttributesAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAttributesAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  atol  =  getAttributesAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
65	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  atol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	  	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol  atol	5	None	replace
81	[BUG]  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  false)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  false)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  false)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
82	[BUG]  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol!=  false)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol!=  false)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol!=  false)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
83	[BUG]  [BUGGY]    if(inverted)  {  inverted  =  false;  if(inverted)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  inverted  =  false;  if(inverted)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    if(inverted)  {  inverted  =  false;  if(inverted)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
84	[BUG]  [BUGGY]    if(inverted)  {  rtol  =  inverted;  if(rtol!=  false)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  rtol  =  inverted;  if(rtol!=  false)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    if(inverted)  {  rtol  =  inverted;  if(rtol!=  false)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
85	[BUG]  [BUGGY]    if(inverted)  {  rtol  =  inverted;  if(rtol  ==  false)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  rtol  =  inverted;  if(rtol  ==  false)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    if(inverted)  {  rtol  =  inverted;  if(rtol  ==  false)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
95	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	  	if  (fx  ==  0.0)  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
101	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
102	[BUG]  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
103	[BUG]  [BUGGY]    final  double  f0  =  getAttributeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAttributeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAttributeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
104	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
105	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  computeAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
112	[BUG]  [BUGGY]    Method  method  =  getRelativeAccuracy(x);  [CE]  no  suitable  method  found  for  getRelativeAccuracy(double)  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    Method  method  =  getRelativeAccuracy(x);  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	171	171	1	replace	    Method  method  =  getRelativeAccuracy(x);		non-compiled	[CE]  no  suitable  method  found  for  getRelativeAccuracy(double)	18	None	add
113	[BUG]  [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f0  *  fx  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f0  *  fx  >  0)  {  break;  }  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	171	171	1	replace	    if(inverted)  {  inverted  =!inverted;  if(f0  *  fx  >  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
114	[BUG]  [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(fx  >  0.0)  {  return  fx;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(fx  >  0.0)  {  return  fx;  }  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	171	171	1	replace	    if(inverted)  {  inverted  =!inverted;  if(fx  >  0.0)  {  return  fx;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
115	[BUG]  [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f1  >  f0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f1  >  f0)  {  return  x;  }  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	171	171	1	replace	    if(inverted)  {  inverted  =!inverted;  if(f1  >  f0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
122	[BUG]  [BUGGY]  return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,AllowedSolution)	1	None	replace
123	[BUG]  [BUGGY]  return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(UnivariateRealFunction,int,double,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(UnivariateRealFunction,int,double,double,double,AllowedSolution)	1	None	replace
124	[BUG]  [BUGGY]  return  solve(min,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	124	124	1	replace	return  solve(min,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,double,AllowedSolution)	1	None	replace
132	[BUG]  [BUGGY]  final  double  rtol  =  getRadiusAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRadiusAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRadiusAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
133	[BUG]  [BUGGY]  final  double  rtol  =  getRrelativeAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRrelativeAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRrelativeAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
134	[BUG]  [BUGGY]  final  double  rtol  =  getRawAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRawAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  rtol  =  getRawAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
141	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  break;  [CE]  variable  inverted  is  already  defined  in  method  doSolve()  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  break;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	174	174	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  break;		non-compiled	[CE]  variable  inverted  is  already  defined  in  method  doSolve()	20	None	add
142	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  break;  [CE]  ';'  expected  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  break;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	174	174	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  break;		non-compiled	[CE]  ';'  expected	20	None	add
143	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /  fx;  break;  [CE]  variable  inverted  is  already  defined  in  method  doSolve()  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /  fx;  break;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	174	174	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /  fx;  break;		non-compiled	[CE]  variable  inverted  is  already  defined  in  method  doSolve()	20	None	add
144	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  *(f1  +  fx);  break;  [CE]  variable  inverted  is  already  defined  in  method  doSolve()  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  *(f1  +  fx);  break;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	174	174	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  *(f1  +  fx);  break;		non-compiled	[CE]  variable  inverted  is  already  defined  in  method  doSolve()	20	None	add
145	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  [CE]  variable  inverted  is  already  defined  in  method  doSolve()  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	174	174	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);		non-compiled	[CE]  variable  inverted  is  already  defined  in  method  doSolve()	20	None	add
151	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	6	None	add
152	[BUG]  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  f0  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	6	None	add
153	[BUG]  [BUGGY]    final  double  rtol  =  getRelativeAccuracy();  [CE]  variable  rtol  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  rtol  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  rtol  =  getRelativeAccuracy();		non-compiled	[CE]  variable  rtol  is  already  defined  in  method  doSolve()	6	None	add
154	[BUG]  [BUGGY]    final  double  fx  =  getRelativeAccuracy();  [CE]  variable  fx  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  fx  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  fx  =  getRelativeAccuracy();		non-compiled	[CE]  variable  fx  is  already  defined  in  method  doSolve()	6	None	add
155	[BUG]  [BUGGY]    final  double  rtol  =  getRadiusValueAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  rtol  =  getRadiusValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    final  double  rtol  =  getRadiusValueAccuracy();		non-compiled	[CE]  cannot  find  symbol	6	None	add
161	[BUG]  [BUGGY]    if(inverted)  {  if(fx  >  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(inverted)  {  if(fx  >  0.0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math51/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    if(inverted)  {  if(fx  >  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
