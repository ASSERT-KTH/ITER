bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.');    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	56	None	replace
2	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.');    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	56	None	replace
3	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  expPos)+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  expPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  expPos)+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.');    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	56	None	replace
4	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    2;    	non-compiled	[CE]  not  a  statement	15	None	replace
5	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  2;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('-')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	9	None	replace
6	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  0;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  0;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  0;	  int    expPos    =    str.indexOf('-')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	9	None	replace
7	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('-')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.lastIndexOf('-')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.lastIndexOf('-')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('-')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	9	None	replace
8	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E'  +  decPos  +  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E'  +  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E'  +  decPos  +  1);	  int    expPos    =    str.indexOf('E'    +    decPos);    	non-compiled	[CE]  not  a  statement	60	None	replace
9	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
10	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  str.indexOf('e')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.lastIndexOf('.')+  str.indexOf('e')+  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
11	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E'  +  decPos);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E'  +  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E'  +  decPos);	  int    expPos    =    str.indexOf('E')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos);	  int    expPos    =    str.indexOf('E')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  not  a  statement	62	None	replace
14	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	  Integer    expPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	57	None	replace
15	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-',  decPos  +  1);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-',  decPos  +  1);	  int    expPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  not  a  statement	10	None	replace
16	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-',  decPos)+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-',  decPos)+  1;	  int    expPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  not  a  statement	10	None	replace
17	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-',  decPos  -  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-',  decPos  -  1);	  int    expPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  not  a  statement	10	None	replace
18	[BUG]  [BUGGY]  if(expPos  >  -1  ||  expPos  <  decPos)  {  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(expPos  >  -1  ||  expPos  <  decPos)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(expPos  >  -1  ||  expPos  <  decPos)  {	  if(decPos    >    -1    ||    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	41	None	replace
19	[BUG]  [BUGGY]  if(decPos  >  -1  ||  expPos  <  str.length())  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(decPos  >  -1  ||  expPos  <  str.length())  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(decPos  >  -1  ||  expPos  <  str.length())  {	  if(decPos    >    -1    ||    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	41	None	replace
20	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E',  decPos);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E',  decPos);	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	14	None	replace
21	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E'  +  decPos);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E'  +  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E'  +  decPos);	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	14	None	replace
22	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( " ",  decPos);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( " ",  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnexpectedException( " ",  decPos);	  aughtExceptionHandler.throwAsUnexpectedException(   "   ");    	non-compiled	[CE]  not  a  statement	27	None	replace
23	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( ", ");  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( ", ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnexpectedException( ", ");	  aughtExceptionHandler.throwAsUnexpectedException(   "   ");    	non-compiled	[CE]  not  a  statement	27	None	replace
24	[BUG]  [BUGGY]  bucket  <  expPos)  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  bucket  <  expPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	bucket  <  expPos)  {	  bucket    <    decPos)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
25	[BUG]  [BUGGY]  aughtException(mant  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtException(mant  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtException(mant  + "  is  not  a  valid  number.   ");	  aughtException(str    +   "    is    not    a    valid    number.   ");    	non-compiled	[CE]  not  a  statement	55	None	replace
26	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  2);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  2);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  2);	  String    exp    =    str.substring(decPos    +    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
27	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  2,  expPos);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  2,  expPos);	  String    exp    =    str.substring(decPos    +    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
28	[BUG]  [BUGGY]  int  expPos  =  str.indexOf(''+  decPos)+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf(''+  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf(''+  decPos)+  1;	  int    expPos    =    str.indexOf(''+    decPos);    	non-compiled	[CE]  not  a  statement	58	None	replace
29	[BUG]  [BUGGY]  int  expPos  =  str.indexOf(''+  decPos  +  1);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf(''+  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf(''+  decPos  +  1);	  int    expPos    =    str.indexOf(''+    decPos);    	non-compiled	[CE]  not  a  statement	58	None	replace
30	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  expPos)  {  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(decPos  >  -1  &&  expPos  <  expPos)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(decPos  >  -1  &&  expPos  <  expPos)  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
31	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
32	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E',  decPos  +  1);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E',  decPos  +  1);	  int    expPos    =    str.indexOf('E',    decPos);    	non-compiled	[CE]  not  a  statement	3	None	replace
33	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E',  decPos)+  1;  [CE]  not  a  statement  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E',  decPos)+  1;	  int    expPos    =    str.indexOf('E',    decPos);    	non-compiled	[CE]  not  a  statement	3	None	replace
34	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E',  decPos  -  1);  [CE]  not  a  statement  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E',  decPos  -  1);	  int    expPos    =    str.indexOf('E',    decPos);    	non-compiled	[CE]  not  a  statement	3	None	replace
35	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  3;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  3;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  3;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    2;    	non-compiled	[CE]  not  a  statement	29	None	replace
36	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2  +  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2  +  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  not  a  statement	50	None	replace
37	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.',  decPos  +  1);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  not  a  statement	33	None	replace
38	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  1;	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  not  a  statement	33	None	replace
39	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.',  decPos  -  1);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  not  a  statement	33	None	replace
40	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(0,  expPos);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(0,  expPos);	  String    exp    =    str.substring(0,    decPos);    	non-compiled	[CE]  not  a  statement	52	None	replace
41	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos  +  1);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(0,  expPos  +  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(0,  expPos  +  1);	  String    exp    =    str.substring(0,    decPos);    	non-compiled	[CE]  not  a  statement	52	None	replace
42	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  decPos  +  1);  [CE]  not  a  statement  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(0,  decPos  +  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(0,  decPos  +  1);	  String    exp    =    str.substring(0,    decPos);    	non-compiled	[CE]  not  a  statement	52	None	replace
43	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos  -  1);  [CE]  not  a  statement  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(0,  expPos  -  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(0,  expPos  -  1);	  String    exp    =    str.substring(0,    decPos);    	non-compiled	[CE]  not  a  statement	52	None	replace
44	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E');  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E');  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E');	  int    expPos    =    str.indexOf('.')+    str.indexOf('e');    	non-compiled	[CE]  not  a  statement	20	None	replace
45	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e',  decPos);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e',  decPos);	  int    expPos    =    str.indexOf('.')+    str.indexOf('e');    	non-compiled	[CE]  not  a  statement	20	None	replace
46	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-'  +  decPos)+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-'  +  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-'  +  decPos)+  1;	  int    expPos    =    str.indexOf('-'    +    decPos);    	non-compiled	[CE]  not  a  statement	35	None	replace
47	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('-')+  1;	  int    expPos    =    str.indexOf('-'    +    decPos);    	non-compiled	[CE]  not  a  statement	35	None	replace
48	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('D')+  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('D')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('D')+  1;	  int    expPos    =    str.indexOf('-'    +    decPos);    	non-compiled	[CE]  not  a  statement	35	None	replace
49	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos)+  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos)+  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  expPos)+  str.indexOf('e')+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	44	None	replace
50	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  lastChar)+  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  lastChar)+  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  lastChar)+  str.indexOf('e')+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	44	None	replace
51	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	44	None	replace
52	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2  +  1;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2  +  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  not  a  statement	46	None	replace
53	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('_')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('_')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('_')+  1;	  int    expPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  not  a  statement	31	None	replace
54	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('e')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('e')+  1;	  int    expPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  not  a  statement	31	None	replace
55	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('-')+  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('-')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('-')+  1;	  int    expPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  not  a  statement	31	None	replace
56	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos)+  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.'  +  decPos)+  1;	  Integer    expPos    =    str.indexOf('.'    +    decPos);    	non-compiled	[CE]  not  a  statement	49	None	replace
57	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos  +  1);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.'  +  decPos  +  1);	  Integer    expPos    =    str.indexOf('.'    +    decPos);    	non-compiled	[CE]  not  a  statement	49	None	replace
58	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  lastChar);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  lastChar);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.'  +  lastChar);	  Integer    expPos    =    str.indexOf('.'    +    decPos);    	non-compiled	[CE]  not  a  statement	49	None	replace
59	[BUG]  [BUGGY]  int  expPos  =  str.indexOf(''+  lastChar)+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf(''+  lastChar)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf(''+  lastChar)+  1;	  int    expPos    =    str.indexOf(''+    lastChar);    	non-compiled	[CE]  not  a  statement	32	None	replace
60	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  decPos);  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ",  decPos);	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  not  a  statement	24	None	replace
61	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  str);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  str);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ",  str);	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  not  a  statement	24	None	replace
62	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ',  decPos  +  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ',  decPos  +  1);	  int    expPos    =    str.indexOf('    ',    decPos);    	non-compiled	[CE]  not  a  statement	23	None	replace
63	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ',  decPos)+  1;  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ',  decPos)+  1;	  int    expPos    =    str.indexOf('    ',    decPos);    	non-compiled	[CE]  not  a  statement	23	None	replace
64	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ',  lastChar);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ',  lastChar);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ',  lastChar);	  int    expPos    =    str.indexOf('    ',    decPos);    	non-compiled	[CE]  not  a  statement	23	None	replace
65	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  ==  -1)  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  bucket  <  0  ||  expPos  ==  -1)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	bucket  <  0  ||  expPos  ==  -1)  {	  bucket    <    0    ||    expPos    >    -1)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
66	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  decPos  <  str.length()  -  1)  {  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  decPos  <  str.length()  -  1)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	bucket  <  0  ||  expPos  >  -1  &&  decPos  <  str.length()  -  1)  {	  bucket    <    0    ||    expPos    >    -1)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
67	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos  +  1);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e',  decPos  +  1);	  int    expPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  not  a  statement	5	None	replace
68	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e',  decPos)+  1;	  int    expPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  not  a  statement	5	None	replace
69	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos  -  1);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e',  decPos  -  1);	  int    expPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  not  a  statement	5	None	replace
70	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  not  a  statement	61	None	replace
71	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  3;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  3;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  3;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  not  a  statement	61	None	replace
72	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E'  +  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E'  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E'  +  1);	  int    expPos    =    str.indexOf('E'    +    1);    	non-compiled	[CE]  not  a  statement	37	None	replace
73	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	18	None	replace
74	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	18	None	replace
75	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.lastIndexOf('.')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	18	None	replace
76	[BUG]  [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	MutableString  str  =  str.substring(decPos  +  1,  expPos  +  1);	  MutableString    str    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	39	None	replace
77	[BUG]  [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos,  decPos);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos,  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	MutableString  str  =  str.substring(decPos  +  1,  expPos,  decPos);	  MutableString    str    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	39	None	replace
78	[BUG]  [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	MutableString  str  =  str.substring(decPos  +  1,  expPos  +  2);	  MutableString    str    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	39	None	replace
79	[BUG]  [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  MutableString  str  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	MutableString  str  =  str.substring(decPos  +  1,  expPos  -  1);	  MutableString    str    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	39	None	replace
80	[BUG]  [BUGGY]  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");	  faces    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	38	None	replace
81	[BUG]  [BUGGY]  faces  NumberFormatException(str  + ",  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  faces  NumberFormatException(str  + ",  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	faces  NumberFormatException(str  + ",  is  not  a  valid  number.   ");	  faces    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	38	None	replace
82	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	45	None	replace
83	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  Integer    decPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	45	None	replace
84	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  0;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  0;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  0;	  Integer    decPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	45	None	replace
85	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':',  decPos);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf(':',  decPos);	  int    expPos    =    str.indexOf('-')+    str.indexOf(':');    	non-compiled	[CE]  not  a  statement	11	None	replace
86	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':'  +  decPos);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':'  +  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf(':'  +  decPos);	  int    expPos    =    str.indexOf('-')+    str.indexOf(':');    	non-compiled	[CE]  not  a  statement	11	None	replace
87	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':').length();  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':').length();  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf(':').length();	  int    expPos    =    str.indexOf('-')+    str.indexOf(':');    	non-compiled	[CE]  not  a  statement	11	None	replace
88	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos);	  int    expPos    =    str.indexOf('e')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	4	None	replace
89	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  decPos);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  decPos);	  int    expPos    =    str.indexOf('e')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	4	None	replace
90	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.',  decPos  +  1);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  not  a  statement	12	None	replace
91	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.',  decPos  -  1);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  not  a  statement	12	None	replace
92	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  1;	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  not  a  statement	12	None	replace
93	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  char  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	char  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
94	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.length());  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.length());  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  str.length());	  String    exp    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
95	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.lastIndexOf('.')-  1);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.lastIndexOf('.')-  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  str.lastIndexOf('.')-  1);	  String    exp    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
96	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.charAt(expPos  -  1));  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.charAt(expPos  -  1));  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  str.charAt(expPos  -  1));	  String    exp    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
97	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.lastIndexOf('.')+  1);  [CE]  not  a  statement  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.lastIndexOf('.')+  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  str.lastIndexOf('.')+  1);	  String    exp    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
98	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {	  if(decPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
99	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  str.length())  {  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(decPos  >  -1  &&  expPos  <  str.length())  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(decPos  >  -1  &&  expPos  <  str.length())  {	  if(decPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
100	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  expPos  +  1);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	51	None	replace
101	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  expPos  -  1);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	51	None	replace
102	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  expPos  +  2);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	51	None	replace
103	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos,  decPos);  [CE]  not  a  statement  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos,  decPos);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  expPos,  decPos);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  not  a  statement	51	None	replace
104	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('K')+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('K')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('K')+  1;	  int    expPos    =    str.indexOf('-')+    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
105	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('e')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('e')+  1;	  int    expPos    =    str.indexOf('-')+    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
106	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('A')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('A')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('A')+  1;	  int    expPos    =    str.indexOf('-')+    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
107	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	13	None	replace
108	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	13	None	replace
109	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	13	None	replace
110	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E',  decPos);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('E',  decPos);	  int    expPos    =    str.indexOf('    ')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	22	None	replace
111	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E'  +  decPos);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E'  +  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('E'  +  decPos);	  int    expPos    =    str.indexOf('    ')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	22	None	replace
112	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  2;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('    ')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	21	None	replace
113	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('  ')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.lastIndexOf('  ')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.lastIndexOf('  ')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('    ')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	21	None	replace
114	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  3;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  3;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  3;	  int    expPos    =    str.indexOf('    ')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	21	None	replace
115	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-',  decPos);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('-',  decPos);	  int    expPos    =    str.indexOf('-')+    str.indexOf('-');    	non-compiled	[CE]  not  a  statement	59	None	replace
116	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-'  +  decPos);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-'  +  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('-'  +  decPos);	  int    expPos    =    str.indexOf('-')+    str.indexOf('-');    	non-compiled	[CE]  not  a  statement	59	None	replace
117	[BUG]  [BUGGY]  nisip  =  str.charAt(decPos  +  2);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  nisip  =  str.charAt(decPos  +  2);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	nisip  =  str.charAt(decPos  +  2);	  nisip    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  not  a  statement	25	None	replace
118	[BUG]  [BUGGY]  nisip  =  str.charAt(decPos  +  1,  expPos);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  nisip  =  str.charAt(decPos  +  1,  expPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	nisip  =  str.charAt(decPos  +  1,  expPos);	  nisip    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  not  a  statement	25	None	replace
119	[BUG]  [BUGGY]  nisip  =  str.charAt(decPos  +  1).trim();  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  nisip  =  str.charAt(decPos  +  1).trim();  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	nisip  =  str.charAt(decPos  +  1).trim();	  nisip    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  not  a  statement	25	None	replace
120	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('A')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('A')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('A')+  1;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
121	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
122	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E',  DEC_POP);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E',  DEC_POP);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E',  DEC_POP);	  int    expPos    =    str.indexOf('E',    decPos);    	non-compiled	[CE]  not  a  statement	3	None	replace
123	[BUG]  [BUGGY]  String  exp  =  str.substring(1,  decPos);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(1,  decPos);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(1,  decPos);	  String    exp    =    str.substring(0,    decPos);    	non-compiled	[CE]  not  a  statement	52	None	replace
124	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  1  +  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('E')+  1  +  1;	  int    expPos    =    str.indexOf('    ')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	21	None	replace
125	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('e'),  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('e'),  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('e'),  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	44	None	replace
126	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  1  +  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('E')+  1  +  1;	  int    expPos    =    str.indexOf('-')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	9	None	replace
127	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	13	None	replace
128	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  decPos;  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  decPos;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  decPos;	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	13	None	replace
129	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	18	None	replace
130	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  1  +  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  1  +  1;	  int    expPos    =    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	42	None	replace
131	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  1  +  decPos;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  1  +  decPos;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  1  +  decPos;	  int    expPos    =    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	42	None	replace
132	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  str.length())  {  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(expPos  >  -1  &&  expPos  <  str.length())  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(expPos  >  -1  &&  expPos  <  str.length())  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
133	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  lastChar)  {  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(expPos  >  -1  &&  expPos  <  lastChar)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(expPos  >  -1  &&  expPos  <  lastChar)  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
134	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;	  Integer    decPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	45	None	replace
135	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-'  +  1);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('-'  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('-'  +  1);	  int    expPos    =    str.indexOf('-')+    str.indexOf('-');    	non-compiled	[CE]  not  a  statement	59	None	replace
136	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf(':')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf(':')+  1;	  int    expPos    =    str.indexOf('-')+    str.indexOf(':');    	non-compiled	[CE]  not  a  statement	11	None	replace
137	[BUG]  [BUGGY]  if(expPos  >  -1  ||  decPos  <  decPos)  {  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(expPos  >  -1  ||  decPos  <  decPos)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(expPos  >  -1  ||  decPos  <  decPos)  {	  if(decPos    >    -1    ||    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	41	None	replace
138	[BUG]  [BUGGY]  if(decPos  >  -1  ||  expPos  >  -1)  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(decPos  >  -1  ||  expPos  >  -1)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(decPos  >  -1  ||  expPos  >  -1)  {	  if(decPos    >    -1    ||    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	41	None	replace
139	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  2;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  not  a  statement	46	None	replace
140	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  lastChar);  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.',  lastChar);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.',  lastChar);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  not  a  statement	33	None	replace
141	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
142	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  decPos;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  decPos;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  decPos;	  int    expPos    =    str.indexOf('-'    +    decPos);    	non-compiled	[CE]  not  a  statement	35	None	replace
143	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-'  +  lastChar);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-'  +  lastChar);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-'  +  lastChar);	  int    expPos    =    str.indexOf('-'    +    decPos);    	non-compiled	[CE]  not  a  statement	35	None	replace
144	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  decPos;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  decPos;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  decPos;	  int    expPos    =    str.indexOf('E'    +    decPos);    	non-compiled	[CE]  not  a  statement	60	None	replace
145	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E'  +  lastChar);  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E'  +  lastChar);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E'  +  lastChar);	  int    expPos    =    str.indexOf('E'    +    decPos);    	non-compiled	[CE]  not  a  statement	60	None	replace
146	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	  int    decPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
147	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  char  decPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	char  decPos  =  str.indexOf('.');  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  int    decPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
148	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  int    decPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
149	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( ", ");  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( ", ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnquotedException( ", ");	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  not  a  statement	24	None	replace
150	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP)+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  DEC_POP)+  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('.');    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	56	None	replace
151	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  lastChar);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e',  lastChar);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e',  lastChar);	  int    expPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  not  a  statement	5	None	replace
152	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  decPos;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  decPos;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  1  +  decPos;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
153	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  2;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  2;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
154	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  decPos;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  decPos;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  decPos;	  Integer    expPos    =    str.indexOf('.'    +    decPos);    	non-compiled	[CE]  not  a  statement	49	None	replace
155	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  3;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  3;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  3;	  int    expPos    =    str.indexOf('e')+    2;    	non-compiled	[CE]  not  a  statement	43	None	replace
156	[BUG]  [BUGGY]  nisip  =  str.charAt(decPos  -  1);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  nisip  =  str.charAt(decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	nisip  =  str.charAt(decPos  -  1);	  nisip    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  not  a  statement	25	None	replace
157	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.indexOf('.')-  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.indexOf('.')-  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  str.indexOf('.')-  1);	  String    exp    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
158	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('e')+  str.indexOf('E')+  1;	  Integer    expPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	57	None	replace
159	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  1  +  1;  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  1  +  1;	  int    expPos    =    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	2	None	replace
160	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  2;  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	2	None	replace
161	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  1  +  decPos;  [CE]  not  a  statement  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  1  +  decPos;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  1  +  decPos;	  int    expPos    =    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	2	None	replace
162	[BUG]  [BUGGY]  if(expPos  >  -1  &&  decPos  <  decPos)  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(expPos  >  -1  &&  decPos  <  decPos)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(expPos  >  -1  &&  decPos  <  decPos)  {	  if(decPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
163	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  len)  {  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(decPos  >  -1  &&  expPos  <  len)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(decPos  >  -1  &&  expPos  <  len)  {	  if(decPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
164	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  1;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  not  a  statement	61	None	replace
165	[BUG]  [BUGGY]  faces  NumberFormatException(mant  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  faces  NumberFormatException(mant  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	faces  NumberFormatException(mant  + "  is  not  a  valid  number.   ");	  faces    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	38	None	replace
166	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1  +  2;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1  +  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1  +  2;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  not  a  statement	50	None	replace
167	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  not  a  statement	62	None	replace
168	[BUG]  [BUGGY]  int  expPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");	  bucket    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	54	None	replace
169	[BUG]  [BUGGY]  int  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");	  bucket    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	54	None	replace
170	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  str.charAt(decPos  -  1)!=  'n')  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  str.charAt(decPos  -  1)!=  'n')  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	bucket  <  0  ||  expPos  >  -1  &&  str.charAt(decPos  -  1)!=  'n')  {	  bucket    <    0    ||    expPos    >    -1)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
171	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  str.charAt(decPos  -  1)!=  '-')  {  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  str.charAt(decPos  -  1)!=  '-')  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	bucket  <  0  ||  expPos  >  -1  &&  str.charAt(decPos  -  1)!=  '-')  {	  bucket    <    0    ||    expPos    >    -1)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
172	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-',  lastChar);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-',  lastChar);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-',  lastChar);	  int    expPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  not  a  statement	10	None	replace
173	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);	  int    expPos    =    str.indexOf('e')+    str.indexOf('E');    	non-compiled	[CE]  not  a  statement	4	None	replace
174	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  0;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  0;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  0;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    0;    	non-compiled	[CE]  not  a  statement	16	None	replace
175	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1  +  1;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1  +  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  not  a  statement	46	None	replace
176	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
177	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1  +  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1  +  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  not  a  statement	50	None	replace
178	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException(str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException(str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnquotedException(str  + "  is  not  a  valid  number.   ");	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  not  a  statement	24	None	replace
179	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException(str,  decPos);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException(str,  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnquotedException(str,  decPos);	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  not  a  statement	24	None	replace
180	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.charAt(decPos  -  1));  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  str.charAt(decPos  -  1));  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos  +  1,  str.charAt(decPos  -  1));	  String    exp    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
181	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
182	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;	  Integer    expPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	57	None	replace
183	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('_')+  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('_')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('_')+  1;	  int    expPos    =    str.indexOf('-')+    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
184	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	  Integer    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	13	None	replace
185	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos,  expPos  +  1);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  String  exp  =  str.substring(decPos,  expPos  +  1);  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	String  exp  =  str.substring(decPos,  expPos  +  1);	  String    exp    =    str.substring(decPos    +    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
186	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.');  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('.');    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
187	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  decPos  -  1)  {  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  if(expPos  >  -1  &&  expPos  <  decPos  -  1)  {  [BUGGY]      if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	if(expPos  >  -1  &&  expPos  <  decPos  -  1)  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
188	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e'  +  decPos);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e'  +  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e'  +  decPos);	  int    expPos    =    str.indexOf('.')+    str.indexOf('e');    	non-compiled	[CE]  not  a  statement	20	None	replace
189	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    2;    	non-compiled	[CE]  not  a  statement	15	None	replace
190	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')/  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('-')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('-')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('-')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	9	None	replace
191	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')/  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('  ')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('  ')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('    ')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	21	None	replace
192	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('.');  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('.');  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('.');	  Integer    expPos    =    str.indexOf('.'    +    decPos);    	non-compiled	[CE]  not  a  statement	49	None	replace
193	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	18	None	replace
194	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('e')+  str.indexOf('E')-  1;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('e')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.',  decPos)+  str.indexOf('e')+  str.indexOf('E')-  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  not  a  statement	44	None	replace
195	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException(str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException(str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnexpectedException(str  + "  is  not  a  valid  number.   ");	  aughtExceptionHandler.throwAsUnexpectedException(   "   ");    	non-compiled	[CE]  not  a  statement	27	None	replace
196	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException(str,  decPos);  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException(str,  decPos);  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	aughtExceptionHandler.throwAsUnexpectedException(str,  decPos);	  aughtExceptionHandler.throwAsUnexpectedException(   "   ");    	non-compiled	[CE]  not  a  statement	27	None	replace
197	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {      [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	478	478	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('e')/  1;	  Integer    decPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  not  a  statement	45	None	replace
